[0m[[0m[0mdebug[0m] [0m[0mInvalidating /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/lib/scalation_mathstat_2.12-1.5.jar: stamp changed from lastModified(1540763784000) to lastModified(1536616590000)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial source changes: [0m
[0m[[0m[0mdebug[0m] [0m[0m	removed:Set(/home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/BoundedTreewidthBN.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graphalytics/GraphDFS.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graphalytics/TightSim2.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graphalytics/Ball.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graphalytics/GraphMatcher.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/pattern_matching/StrictSim.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/pattern_matching/DualSim.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/pattern_matching/MDualSim2W.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/pattern_matching/MGraphSimW.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graphalytics/TreeLayout.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/pattern_matching/MDualSimX.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/pattern_matching/Query.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/pattern_matching/Ball.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/scala3d/Point3D.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graphalytics/Graph.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/columnar_db/MissingValues.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/pattern_matching/MGraphSim2X.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/ExampleMGraphS.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/pattern_matching/Answers_g3.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/Tree.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/graph_algebra/MuStrictSim.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/columnar_db/Imputation.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/pattern_matching/test/DualIsoPattern_DTest.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graphalytics/GraphPatternTest.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graphalytics/Cycle.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/columnar_db/RelationSQL.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/spatial/LatitudeLongitude.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/image/ImageCV.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/pattern_matching/test/GraphPattern_STest.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/Partition.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graphalytics/TrafficLight.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/image/package.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/Graph.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/scala3d/PerspectiveCamera.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/pattern_matching/LabelFunctions.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/pattern_matching/DualSim2CAR.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/graph_algebra/MuDualIso.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graphalytics/StrictSim.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/scala3d/MoleculeScalaApp.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/graph_algebra/MuTightSim.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graphalytics/IsomorphismChecker.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/graph_algebra/BasicQueries.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/pattern_matching/MDualSim2.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graphalytics/GraphSim2.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/graph_algebra/MuGraph.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graphalytics/GraphGen.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/graph_algebra/MuGraphAlgebra.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/Cycle.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/columnar_db/Catalog.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/columnar_db/QueryRunner.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/pattern_matching/DualSim2.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/scala3d/Line3D.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/ExampleGraphS.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graphalytics/Tree.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/graph_algebra/RelationshipQuery.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/ExampleGraphD.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graphalytics/GraphMetrics.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/spatial/Matrix3D.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/columnar_db/Outliers.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graphalytics/LabelType.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/image/Tracker.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/MGraph.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graphalytics/GraphIso.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/package.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/GraphGen.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/pattern_matching/MDualSim.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/pattern_matching/MDualSimCAR.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graphalytics/GraphqlOpt.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/pattern_matching/MStrictSim.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graphalytics/DualIso.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graphalytics/DualIsoCAR.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/SpanningTree.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/TopSort.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/pattern_matching/GraphMatcher.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/pattern_matching/GraphSimCAR.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/graph_algebra/MuGraphSim.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/MinSpanningTree.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graphalytics/GraphSim.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/ExampleMGraphI.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/pattern_matching/MGraphSim2.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/graph_algebra/MatchAnswers.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/BoundedTreewidthChains.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/pattern_matching/GraphSim.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/pattern_matching/test/DualIsoPattern_STest.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/graph_algebra/ExampleMuGraphI.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/pattern_matching/Answers_g2.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/pattern_matching/TightSim.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/pattern_matching/test/TightPattern_STest.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/pattern_matching/MDualIso.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graphalytics/TopSort.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/columnar_db/package.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/graph_algebra/MuDualSim.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/columnar_db/Query1.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/columnar_db/TableGen.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/image/ChessTracker.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/columnar_db/CreateTable1.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/GraphIO.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/pattern_matching/DualSimCAR.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/columnar_db/MM_Relation.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/scala3d/PhongMaterial.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/BiconnectedComps.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/columnar_db/Query.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/pattern_matching/Answers.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/pattern_matching/test/DualPattern_DTest.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/pattern_matching/test/DualPattern_STest.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graphalytics/Convert.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graphalytics/GraphSimIso.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/image/KL_Tracker.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graphalytics/package.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/columnar_db/Relation.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/graph_algebra/package.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/pattern_matching/MTightSim.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/spatial/Vector2D.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/MGraphGen.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graphalytics/BipartiteMatcher.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graphalytics/TightSim.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/graph_algebra/ExampleMuGraphS.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graphalytics/Answers.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/ExampleGraphI.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graphalytics/DualSim2.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graphalytics/StrictSim2.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/columnar_db/KeyType.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/pattern_matching/package.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/pattern_matching/MGraphSimCAR.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/graph_algebra/TestOperator.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/pattern_matching/MGraphSimX.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graphalytics/GraphMatcherTest.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/pattern_matching/test/GraphPattern_DTest.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/scala3d/Xform.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/image/KLT_Tracker.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/columnar_db/Table.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/columnar_db/Tabular.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/columnar_db/RelationF.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/spatial/Matrix2D.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graphalytics/ExampleGraphS.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/SSShortestPath.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/pattern_matching/test/package.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graphalytics/GraphIO.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/graph_algebra/ExampleMuGraphD.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/pattern_matching/MDualSimW.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/pattern_matching/MDualSim2X.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/GraphDFS.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graphalytics/DualSim.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/pattern_matching/test/StrictPattern_STest.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/pattern_matching/MGraphSim2W.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graphalytics/APShortestPath.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/columnar_db/MakeSchema.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/pattern_matching/MGraphSim.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/pattern_matching/test/TightPattern_DTest.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/ExampleMGraphD.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/graph_algebra/MuGraphGen.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/GraphMetrics.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/pattern_matching/GraphSim2.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/MGraphIO.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/pattern_matching/DualIso.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/graph_algebra/Neo4j.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/graph_algebra/RandomGraph.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/pattern_matching/test/StrictPattern_DTest.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graphalytics/DualSim2CAR.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/scala3d/package.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graphalytics/ColorDAG.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/spatial/Vector3D.scala)[0m
[0m[[0m[0mdebug[0m] [0m[0m	added: Set(/home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/distributed_db_old/package.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/dist_db/DistUtil.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/preprocessing/package.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/analytics/package.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/distributed_db_old/DistUtil.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/distributed_db_old/RelationDBMaster.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/distributed_db_old/RelationDBWorker.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/dist_db/RelDBWorker.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/preprocessing/PreProcessingMaster.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/dist_db/package.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/dist_db/RelDBMaster.scala)[0m
[0m[[0m[0mdebug[0m] [0m[0m	modified: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated products: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mExternal API changes: API Changes: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mModified binary dependencies: Set(/home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/lib/scalation_mathstat_2.12-1.5.jar)[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial directly invalidated classes: Set(scalation.graph_db.pattern_matching.MDualSimTest5, scalation.graph_db.pattern_matching.MGraphSim2Test4, scalation.graphalytics.GraphSim2Test3, scalation.columnar_db.MakeSchema, scalation.graph_db.pattern_matching.MGraphSimWTest5, scalation.graph_db.MGraphGenTest7, scalation.graphalytics.DualIso, scalation.graph_db.pattern_matching.MDualSim2, scalation.spatial.Earth, scalation.graph_db.pattern_matching.DualSimCARTest4, scalation.graph_db.pattern_matching.MTightSimTest6, scalation.columnar_db.Outlier, scalation.graph_db.pattern_matching.GraphSim2Test2, scalation.columnar_db.MissingValuesTest3, scalation.graph_db.pattern_matching.MGraphSim2WTest6, scalation.graph_db.pattern_matching.package, scalation.graphalytics.ExampleGraphS, scalation.graph_db.graph_algebra.MuTightSimTest, scalation.columnar_db.MissingValuesTable, scalation.graph_db.MGraphGenTest2, scalation.graph_db.pattern_matching.StrictSimTest5, scalation.graph_db.Cycle, scalation.graph_db.TreeTest2, scalation.graph_db.GraphGenTest2, scalation.graph_db.pattern_matching.MGraphSimTest4, scalation.graph_db.pattern_matching.MDualSimCARTest3, scalation.image.ImageCVTest, scalation.graph_db.PartitionTest3, scalation.graph_db.pattern_matching.MGraphSim2Test, scalation.columnar_db.MissingValuesTest, scalation.graphalytics.DualSim2Test3, scalation.graph_db.Tree, scalation.graph_db.pattern_matching.DualSim, scalation.graph_db.pattern_matching.MDualSimCARTest6, scalation.graphalytics.graph_algebra.package, scalation.graph_db.BoundedTreeWidthChains, scalation.columnar_db.DistanceOutlier, scalation.graph_db.pattern_matching.test.StrictPattern_DTest, scalation.graphalytics.ColorDAG.DagNode, scalation.graph_db.pattern_matching.MGraphSim2XTest2, scalation.graphalytics.GraphqlOptTest2, scalation.spatial.Vector3DTest, scalation.graph_db.pattern_matching.MGraphSim2WTest, scalation.graphalytics.DualSim2Test, scalation.graphalytics.GraphIOTest, scalation.columnar_db.RelationTest, scalation.columnar_db.RelationTest10, scalation.graph_db.pattern_matching.GraphSimCARTest5, scalation.columnar_db.RelationTest8, scalation.graph_db.pattern_matching.DualSim2Test4, scalation.graph_db.TreeTest, scalation.graph_db.pattern_matching.MGraphSim2WTest2, scalation.graph_db.GraphGen, scalation.graph_db.pattern_matching.TightSimTest, scalation.graph_db.pattern_matching.DualSimTest2, scalation.graph_db.graph_algebra.MuGraphAlgebra, scalation.graph_db.pattern_matching.MGraphSimCAR, scalation.graph_db.GraphGenTest6, scalation.graph_db.graph_algebra.RelationshipQuery, scalation.graph_db.pattern_matching.MDualSim2WTest3, scalation.graph_db.pattern_matching.MGraphSim2XTest3, scalation.graph_db.graph_algebra.MuGraphSimTest4, scalation.graph_db.ExampleMGraphI, scalation.graph_db.pattern_matching.MDualSimXTest4, scalation.graph_db.pattern_matching.GraphSimCARTest, scalation.graph_db.BoundedTreeWidthBN, scalation.graphalytics.ColorDAGTest, scalation.graph_db.graph_algebra.MuTightSimTest3, scalation.graph_db.pattern_matching.MDualSim2XTest2, scalation.columnar_db.RelationSQL, scalation.graphalytics.DualIsoCARTest2, scalation.graph_db.TopSort, scalation.graphalytics.GraphGenTest3, scalation.graph_db.pattern_matching.MGraphSimCARTest5, scalation.columnar_db.RelationTest4, scalation.columnar_db.QuantileOutlier, scalation.graph_db.SSShortestPath, scalation.graph_db.graph_algebra.MuGraphSim, scalation.graph_db.pattern_matching.MGraphSimXTest6, scalation.graph_db.pattern_matching.MGraphSim2X, scalation.graphalytics.TightSim2Test, scalation.graph_db.pattern_matching.DualIsoTest, scalation.graph_db.pattern_matching.MStrictSimTest6, scalation.graphalytics.GraphSim2Test, scalation.graph_db.pattern_matching.LabelFunctions, scalation.graph_db.graph_algebra.MuStrictSimTest, scalation.graph_db.MGraphIO, scalation.graph_db.pattern_matching.MDualSim2Test2, scalation.graph_db.pattern_matching.GraphSimTest2, scalation.graph_db.pattern_matching.MGraphSimTest, scalation.image.ImageCV, scalation.graph_db.pattern_matching.GraphSimTest, scalation.graphalytics.TestGraphContainer, scalation.graph_db.pattern_matching.Answers_g2Test, scalation.graph_db.pattern_matching.QueryTest2, scalation.graph_db.pattern_matching.MDualSim2Test5, scalation.graph_db.pattern_matching.test.GraphPattern_STest3, scalation.graph_db.pattern_matching.MTightSimTest2, scalation.graph_db.graph_algebra.MuDualSimTest2, scalation.graph_db.pattern_matching.MGraphSim2, scalation.graph_db.graph_algebra.MuGraphTest, scalation.spatial.Matrix2DTest, scalation.columnar_db.MM_Relation, scalation.graphalytics.TightSim, scalation.graphalytics.TreeTest2, scalation.graph_db.MGraphGenTest6, scalation.graph_db.pattern_matching.MDualIsoTest2, scalation.graph_db.MinSpanningTreeTest3, scalation.spatial.Vector2DTest, scalation.columnar_db.KeyType, scalation.graph_db.pattern_matching.MDualSimXTest6, scalation.spatial.Matrix3DTest, scalation.spatial.Matrix2D, scalation.graph_db.pattern_matching.MDualSimCARTest, scalation.graph_db.graph_algebra.MuDualSim, scalation.graphalytics.GraphIsoTest, scalation.graph_db.pattern_matching.StrictSimTest4, scalation.graph_db.pattern_matching.Ball, scalation.graph_db.MGraphGen, scalation.graphalytics.GraphTest, scalation.graph_db.GraphGenTest3, scalation.graphalytics.DualIsoCAR, scalation.graphalytics.TreeLayoutTest, scalation.graphalytics.TreeNode, scalation.graph_db.pattern_matching.MDualSimCARTest2, scalation.graphalytics.GraphqlOptTest, scalation.graph_db.pattern_matching.MGraphSimTest5, scalation.graph_db.graph_algebra.MuGraphGen, scalation.spatial.Vector3D, scalation.graph_db.pattern_matching.DualSim2CARTest2, scalation.graphalytics.TopSort, scalation.graph_db.pattern_matching.GraphSimCARTest2, scalation.graphalytics.ColorDAG.Edge, scalation.graph_db.pattern_matching.MDualSimTest4, scalation.graph_db.GraphDFSTest, scalation.columnar_db.Interpolate, scalation.spatial.LatitudeLongitudeTest4, scalation.graphalytics.GraphSimTest, scalation.graph_db.pattern_matching.MGraphSimWTest7, scalation.graph_db.GraphTest4, scalation.graph_db.pattern_matching.DualSimCARTest3, scalation.graph_db.SSShortestPathTest, scalation.columnar_db.RelationSQLTest, scalation.graphalytics.DualSimTest3, scalation.columnar_db.RelationSQLTest2, scalation.graph_db.pattern_matching.MGraphSimXTest5, scalation.graph_db.pattern_matching.DualSim2CARTest, scalation.graph_db.graph_algebra.MuStrictSimTest2, scalation.graph_db.pattern_matching.GraphSim2Test, scalation.graph_db.graph_algebra.MatchAnswersTest, scalation.graphalytics.APShortestPathTest, scalation.graph_db.GraphGenTest7, scalation.graph_db.pattern_matching.MGraphSimW, scalation.scala3d.Line3Dend, scalation.graph_db.pattern_matching.GraphSim2Test3, scalation.columnar_db.MM_RelationEx, scalation.graph_db.Graph, scalation.image.ChessTrackerTest, scalation.graphalytics.DualSim2CARTest, scalation.graph_db.package, scalation.columnar_db.Table, scalation.graph_db.pattern_matching.GraphSim2Test5, scalation.graphalytics.DualSim2Test2, scalation.graph_db.pattern_matching.DualSimCAR, scalation.graphalytics.CycleTest, scalation.graph_db.graph_algebra.MuDualIsoTest2, scalation.graphalytics.GraphqlOptTest3, scalation.graph_db.MinSpanningTree.Elem, scalation.graph_db.pattern_matching.MGraphSim2Test5, scalation.graph_db.GraphMetrics, scalation.graph_db.pattern_matching.MTightSim, scalation.graph_db.pattern_matching.MDualSim2WTest4, scalation.graph_db.pattern_matching.MStrictSimTest2, scalation.graph_db.pattern_matching.MGraphSimCARTest6, scalation.graph_db.pattern_matching.MGraphSim2XTest4, scalation.graph_db.pattern_matching.MGraphSimWTest4, scalation.graphalytics.Tree, scalation.graphalytics.GraphMetrics, scalation.graph_db.pattern_matching.test.GraphPattern_STest, scalation.scala3d.Line3DTest, scalation.spatial.LatitudeLongitudeTest, scalation.graph_db.pattern_matching.test.DualPattern_STest, scalation.graph_db.pattern_matching.Answers_g2, scalation.graphalytics.StrictSim2Test, scalation.columnar_db.RelationF, scalation.graph_db.pattern_matching.MDualSim2Test6, scalation.scala3d.PhongMaterial, scalation.graph_db.pattern_matching.GraphSim2Test4, scalation.graph_db.pattern_matching.QueryTest, scalation.graph_db.pattern_matching.GraphMatcher, scalation.graph_db.pattern_matching.MDualSimXTest, scalation.columnar_db.Query, scalation.graphalytics.DualIsoTest3, scalation.columnar_db.Tabular, scalation.graph_db.graph_algebra.HashMap_NE, scalation.graph_db.pattern_matching.MStrictSimTest5, scalation.graph_db.ExampleGraphD, scalation.graph_db.pattern_matching.MDualSimTest2, scalation.graphalytics.TrafficLight, scalation.graph_db.pattern_matching.MStrictSim, scalation.graph_db.ExampleMGraphS, scalation.columnar_db.RelationTest5, scalation.graph_db.graph_algebra.MuGraphTest3, scalation.graph_db.pattern_matching.TightSim, scalation.graph_db.ExampleMGraphD, scalation.graph_db.pattern_matching.MGraphSimCARTest2, scalation.columnar_db.MakeSchemaTest2, scalation.graph_db.pattern_matching.test.GraphPattern_DTest, scalation.graph_db.pattern_matching.MGraphSim2W, scalation.graph_db.Block, scalation.graphalytics.GraphIso, scalation.graph_db.SpanningTree, scalation.graph_db.pattern_matching.MGraphSim2Test6, scalation.graph_db.graph_algebra.MuDualIsoTest, scalation.graph_db.graph_algebra.MuTightSimTest2, scalation.graph_db.pattern_matching.DualSimTest3, scalation.columnar_db.Relation, scalation.graphalytics.GraphSimIso, scalation.graph_db.pattern_matching.MDualSim2XTest3, scalation.graph_db.pattern_matching.QueryTest3, scalation.graph_db.pattern_matching.DualIsoTest3, scalation.graph_db.pattern_matching.MDualSimW, scalation.graphalytics.GraphSim2Test2, scalation.graph_db.pattern_matching.test.StrictPattern_STest, scalation.graph_db.pattern_matching.MGraphSimXTest, scalation.columnar_db.MissingValuesTest2, scalation.graph_db.GraphIOTest, scalation.graph_db.pattern_matching.MDualSimCAR, scalation.scala3d.package, scalation.graphalytics.TreeTest3, scalation.graph_db.TreeTest3, scalation.columnar_db.ImputeMean, scalation.spatial.Vector2D, scalation.graph_db.MGraphGenTest8, scalation.graph_db.MGraphGenTest5, scalation.graphalytics.GraphqlOpt, scalation.columnar_db.MM_RelationTest2, scalation.graph_db.graph_algebra.MuDualSimTest3, scalation.columnar_db.ImputeNormal, scalation.graph_db.pattern_matching.test.DualIsoPattern_DTest2, scalation.graph_db.pattern_matching.DualSim2Test5, scalation.graphalytics.GraphTest2, scalation.graph_db.graph_algebra.MuGraphSimTest3, scalation.graphalytics.GraphMatcher, scalation.graph_db.pattern_matching.MGraphSimXTest2, scalation.graph_db.pattern_matching.MDualSim2XTest6, scalation.graph_db.pattern_matching.DualSimCARTest, scalation.columnar_db.RelationTest9, scalation.graphalytics.StrictSim, scalation.graph_db.pattern_matching.GraphSimTest3, scalation.graphalytics.StrictSimTest3, scalation.spatial.LatLong2UTM, scalation.columnar_db.CatalogTest, scalation.graph_db.GraphTest5, scalation.graph_db.pattern_matching.MDualIsoTest3, scalation.graph_db.pattern_matching.MGraphSim2WTest3, scalation.graph_db.pattern_matching.MDualSimWTest2, scalation.graph_db.graph_algebra.ExampleMuGraphI, scalation.graph_db.pattern_matching.test.DualPattern_STest2, scalation.graph_db.pattern_matching.Answers, scalation.scala3d.RotateOrder, scalation.graph_db.pattern_matching.DualSim2Test2, scalation.graph_db.pattern_matching.MTightSimTest3, scalation.graph_db.pattern_matching.MStrictSimTest, scalation.graphalytics.TightSimTest, scalation.graph_db.graph_algebra.MuDualIsoTest3, scalation.graph_db.pattern_matching.LabelVer, scalation.graph_db.pattern_matching.MDualSimXTest5, scalation.graph_db.pattern_matching.MGraphSim2XTest, scalation.image.package, scalation.graph_db.pattern_matching.MGraphSimTest2, scalation.graph_db.MGraphGenTest, scalation.graphalytics.GraphGenTest, scalation.graph_db.graph_algebra.MuGraphSimTest2, scalation.graphalytics.BipartiteMatcherTest, scalation.graph_db.pattern_matching.GraphSim2, scalation.graphalytics.TightSimTest3, scalation.graph_db.pattern_matching.MDualSim2XTest4, scalation.graph_db.BiconnectedCompTest2, scalation.scala3d.Point3D_O, scalation.graphalytics.DualSim2CAR, scalation.columnar_db.RelationEx, scalation.graphalytics.ColorDAG, scalation.graph_db.pattern_matching.MDualSimCARTest5, scalation.columnar_db.RelationSQLTest3, scalation.graph_db.CycleTest, scalation.graph_db.pattern_matching.DualSim2CARTest3, scalation.graph_db.pattern_matching.MGraphSimXTest4, scalation.columnar_db.TableObj, scalation.graphalytics.GraphMatcherTest, scalation.graphalytics.DualIsoTest2, scalation.scala3d.MoleculeSampleApp, scalation.graph_db.pattern_matching.TightSimTest3, scalation.graph_db.pattern_matching.MGraphSim2WTest4, scalation.graph_db.graph_algebra.MuGraphGenTest, scalation.graphalytics.DualSimTest, scalation.graph_db.pattern_matching.StrictSimTest3, scalation.graph_db.pattern_matching.DualSimCARTest2, scalation.columnar_db.OutlierTest2, scalation.graph_db.pattern_matching.test.TightPattern_STest, scalation.graphalytics.DualSimTest2, scalation.graph_db.pattern_matching.Query, scalation.graph_db.graph_algebra.MuGraphTest2, scalation.graph_db.pattern_matching.MDualSimWTest6, scalation.spatial.Matrix3D, scalation.graph_db.pattern_matching.MGraphSim2XTest5, scalation.graph_db.pattern_matching.MGraphSim2Test2, scalation.graph_db.pattern_matching.StrictSimTest, scalation.graph_db.graph_algebra.MuGraph, scalation.graphalytics.Ball, scalation.image.ChessTracker, scalation.graph_db.pattern_matching.MGraphSimWTest2, scalation.graphalytics.ConvertTest, scalation.graph_db.graph_algebra.MuStrictSimTest3, scalation.columnar_db.QueryRunner, scalation.graph_db.pattern_matching.MDualSimWTest3, scalation.graph_db.pattern_matching.GraphSimCAR, scalation.graph_db.pattern_matching.DualSimTest, scalation.image.ChessTrackerTest2, scalation.columnar_db.MissingValues, scalation.graphalytics.Convert, scalation.graph_db.pattern_matching.MDualSim2Test3, scalation.graphalytics.StrictSim2Test3, scalation.graph_db.GraphDFS, scalation.graph_db.pattern_matching.MGraphSimCARTest3, scalation.graph_db.pattern_matching.TightSimTest2, scalation.graphalytics.TreeTest4, scalation.image.KL_TrackerTest, scalation.graph_db.GraphTest2, scalation.graph_db.pattern_matching.DualSimTest4, scalation.graph_db.pattern_matching.test.TightPattern_STest2, scalation.graph_db.pattern_matching.MDualSim2W, scalation.graphalytics.GraphPatternTest, scalation.graph_db.pattern_matching.MGraphSimWTest3, scalation.graph_db.MGraphGenTest4, scalation.graph_db.MGraphIOTest, scalation.graph_db.graph_algebra.MuGraphGenTest2, scalation.columnar_db.ImputeMovingAverage, scalation.graph_db.pattern_matching.MGraphSimXTest3, scalation.graph_db.graph_algebra.MatchAnswers, scalation.graph_db.MGraph, scalation.graphalytics.GraphDFS, scalation.graph_db.pattern_matching.MGraphSim, scalation.graph_db.pattern_matching.Answers_g3, scalation.graph_db.pattern_matching.MDualSim2XTest, scalation.graph_db.pattern_matching.DualIsoTest2, scalation.graph_db.graph_algebra.ExampleMuGraphD, scalation.graph_db.pattern_matching.MDualIso, scalation.graph_db.pattern_matching.MDualSimX, scalation.graphalytics.StrictSimTest, scalation.columnar_db.RelationTest6, scalation.graphalytics.APShortestPath, scalation.graphalytics.StrictSimTest2, scalation.graph_db.pattern_matching.GraphSimTest4, scalation.graph_db.pattern_matching.MDualSim2WTest6, scalation.graph_db.pattern_matching.test.StrictPattern_STest3, scalation.columnar_db.MM_RelationTest, scalation.graph_db.Partition, scalation.graph_db.pattern_matching.MStrictSimTest4, scalation.graph_db.pattern_matching.MGraphSimTest6, scalation.graph_db.pattern_matching.DualSim2CAR, scalation.graph_db.GraphGenTest4, scalation.graph_db.ExampleGraphI, scalation.graph_db.graph_algebra.MuDualIso, scalation.graph_db.GraphMetricsTest, scalation.graphalytics.TightSim2Test3, scalation.columnar_db.Query1, scalation.graph_db.pattern_matching.MGraphSimWTest6, scalation.graphalytics.GraphMetricsTest, scalation.columnar_db.RelationFTest, scalation.graph_db.pattern_matching.StrictSim, scalation.graph_db.pattern_matching.MDualSimTest, scalation.graphalytics.DualSim, scalation.graphalytics.DualIsoTest, scalation.graph_db.BoundedTreeWidthBNTest, scalation.graph_db.pattern_matching.MDualSimTest3, scalation.graphalytics.DualIsoCARTest, scalation.graph_db.graph_algebra.PathType, scalation.spatial.LatitudeLongitudeTest3, scalation.graph_db.pattern_matching.GraphSimCARTest4, scalation.columnar_db.MakeSchemaTest, scalation.graph_db.pattern_matching.test.StrictPattern_STest2, scalation.graph_db.pattern_matching.DualSim2Test, scalation.graph_db.pattern_matching.MDualSim2XTest5, scalation.graphalytics.TightSim2Test2, scalation.columnar_db.TableGenTest, scalation.columnar_db.package, scalation.graph_db.pattern_matching.MDualSim2WTest2, scalation.graph_db.pattern_matching.DualIso, scalation.graph_db.pattern_matching.MDualSimWTest5, scalation.graph_db.MinSpanningTree.NodeOrder2, scalation.graph_db.pattern_matching.MDualIsoTest, scalation.scala3d.PerspectiveCamera, scalation.graph_db.pattern_matching.MGraphSim2Test3, scalation.graph_db.pattern_matching.MGraphSim2WTest5, scalation.graph_db.MinSpanningTree.NodeOrder, scalation.graphalytics.TightSim2, scalation.graphalytics.DualSim2CARTest2, scalation.graph_db.pattern_matching.MDualSimXTest2, scalation.spatial.LatitudeLongitude, scalation.graph_db.pattern_matching.MGraphSimTest3, scalation.graphalytics.TopSortTest, scalation.graph_db.GraphTest, scalation.graphalytics.StrictSim2Test2, scalation.spatial.Vector2DTest2, scalation.graph_db.graph_algebra.Neo4j, scalation.graph_db.PartitionTest2, scalation.graph_db.pattern_matching.test.DualPattern_STest3, scalation.graph_db.MGraphTest2, scalation.graph_db.pattern_matching.DualSim2Test3, scalation.columnar_db.MissingValuesTest4, scalation.graphalytics.GraphSimIsoTest, scalation.graph_db.pattern_matching.MDualSim2WTest, scalation.graphalytics.StrictSim2, scalation.graph_db.pattern_matching.MDualSimWTest, scalation.image.Tracker, scalation.columnar_db.RelationTest2, scalation.graph_db.graph_algebra.MuDualSimTest, scalation.graph_db.TopSortTest, scalation.graph_db.ExampleGraphS, scalation.graphalytics.GraphSim, scalation.graph_db.graph_algebra.MuTightSim, scalation.graphalytics.GraphIO, scalation.graph_db.pattern_matching.test.DualIsoPattern_STest2, scalation.graph_db.graph_algebra.RandomGraph, scalation.scala3d.Line3D, scalation.graph_db.graph_algebra.BasicQueryTest, scalation.columnar_db.RelationTest7, scalation.graph_db.GraphGenTest, scalation.columnar_db.MM_RelationTest3, scalation.graph_db.SpanningTreeTest, scalation.graph_db.pattern_matching.DualSimCARTest5, scalation.graphalytics.GraphSimTest2, scalation.graph_db.pattern_matching.MGraphSimXTest7, scalation.graph_db.TrafficLight, scalation.graph_db.graph_algebra.MuGraphGenTest3, scalation.graph_db.pattern_matching.StrictSimTest2, scalation.graph_db.pattern_matching.MDualSimCARTest4, scalation.graph_db.graph_algebra.ExampleMuGraphS, scalation.graphalytics.BipartiteMatcher, scalation.graph_db.pattern_matching.MDualSimTest6, scalation.graph_db.pattern_matching.MTightSimTest4, scalation.graph_db.pattern_matching.TightSimTest4, scalation.graph_db.graph_algebra.MuGraphSimTest, scalation.graph_db.pattern_matching.test.package, scalation.graphalytics.Graph, scalation.graph_db.SSShortestPath.Item, scalation.graphalytics.TightSimTest2, scalation.image.KLTTest, scalation.graph_db.pattern_matching.MStrictSimTest3, scalation.graph_db.GraphIO, scalation.graph_db.pattern_matching.MGraphSim2XTest6, scalation.columnar_db.RelationTest3, scalation.graph_db.pattern_matching.test.GraphPattern_STest2, scalation.graphalytics.TreeLayout, scalation.spatial.UTM2LatLong, scalation.columnar_db.QuartileXOutlier, scalation.graphalytics.TreeTest, scalation.graph_db.pattern_matching.MGraphSimCARTest, scalation.graph_db.pattern_matching.GraphSimTest5, scalation.graph_db.pattern_matching.MGraphSimCARTest4, scalation.graph_db.pattern_matching.MGraphSimWTest, scalation.graph_db.graph_algebra.MuStrictSim, scalation.graph_db.pattern_matching.MDualSim2WTest5, scalation.graph_db.GraphGenTest8, scalation.graph_db.pattern_matching.DualSimTest5, scalation.graph_db.pattern_matching.DualSim2, scalation.graph_db.GraphTest3, scalation.graph_db.pattern_matching.test.TightPattern_DTest, scalation.graphalytics.Answers, scalation.scala3d.Line3DHelper, scalation.graphalytics.GraphGenTest2, scalation.image.KL_Tracker, scalation.graph_db.SSShortestPathTest2, scalation.columnar_db.TableGen, scalation.graphalytics.GraphSim2, scalation.graph_db.pattern_matching.MGraphSimX, scalation.image.ChessTrackerTest3, scalation.columnar_db.OutlierTest, scalation.graphalytics.LabelType, scalation.graph_db.pattern_matching.test.TightPattern_STest3, scalation.graph_db.PartitionTest, scalation.graph_db.MGraphGenTest3, scalation.graph_db.pattern_matching.GraphSimCARTest3, scalation.spatial.LatitudeLongitudeTest2, scalation.graphalytics.GraphDFSTest, scalation.columnar_db.MM_RelationTest4, scalation.graphalytics.package, scalation.graph_db.graph_algebra.TestOperator, scalation.columnar_db.Catalog, scalation.graph_db.pattern_matching.test.DualIsoPattern_STest3, scalation.graph_db.BiconnectedCompTest, scalation.graph_db.pattern_matching.test.DualPatternTest_D, scalation.graph_db.pattern_matching.GraphSim, scalation.graphalytics.IsomorphismChecker, scalation.graph_db.TreeTest4, scalation.graph_db.MGraphTest, scalation.graph_db.pattern_matching.MDualSim, scalation.graph_db.pattern_matching.MDualSim2Test, scalation.graphalytics.Cycle, scalation.image.KLT, scalation.graphalytics.DualSim2, scalation.graph_db.MinSpanningTreeTest2, scalation.graph_db.pattern_matching.MDualSim2X, scalation.graph_db.GraphGenTest5, scalation.graph_db.pattern_matching.MTightSimTest, scalation.graph_db.pattern_matching.MDualSim2Test4, scalation.graph_db.pattern_matching.MTightSimTest5, scalation.graph_db.MinSpanningTreeTest, scalation.graphalytics.DualSim2CARTest3, scalation.columnar_db.Imputation, scalation.graph_db.BiconnectedComp, scalation.graphalytics.GraphGen, scalation.graph_db.pattern_matching.MDualSimXTest3, scalation.graph_db.pattern_matching.TightSimTest5, scalation.columnar_db.CreateTable1, scalation.scala3d.Xform, scalation.graph_db.TreeNode, scalation.graph_db.MinSpanningTree, scalation.columnar_db.ImputeNormalWin, scalation.graph_db.pattern_matching.MDualSimWTest4)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mSources indirectly invalidated by:[0m
[0m[[0m[0mdebug[0m] [0m[0m	product: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0m	binary dep: Set(/home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/BoundedTreewidthBN.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graphalytics/TightSim2.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graphalytics/GraphMatcher.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/pattern_matching/StrictSim.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/pattern_matching/DualSim.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/pattern_matching/MDualSim2W.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/pattern_matching/MGraphSimW.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/pattern_matching/MDualSimX.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/pattern_matching/Query.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/columnar_db/MissingValues.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/pattern_matching/MGraphSim2X.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/Tree.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/graph_algebra/MuStrictSim.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/columnar_db/Imputation.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/pattern_matching/test/DualIsoPattern_DTest.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graphalytics/GraphPatternTest.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/columnar_db/RelationSQL.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/spatial/LatitudeLongitude.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/image/ImageCV.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/pattern_matching/test/GraphPattern_STest.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/Partition.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/image/package.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/pattern_matching/LabelFunctions.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/graph_algebra/MuDualIso.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graphalytics/StrictSim.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/graph_algebra/MuTightSim.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/pattern_matching/MDualSim2.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/graph_algebra/MuGraph.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/graph_algebra/MuGraphAlgebra.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/columnar_db/QueryRunner.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/pattern_matching/DualSim2.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graphalytics/Tree.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graphalytics/GraphMetrics.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/spatial/Matrix3D.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/columnar_db/Outliers.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graphalytics/LabelType.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/image/Tracker.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/package.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/GraphGen.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/pattern_matching/MDualSim.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/pattern_matching/MDualSimCAR.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graphalytics/GraphqlOpt.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/pattern_matching/MStrictSim.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graphalytics/DualIso.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graphalytics/DualIsoCAR.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/SpanningTree.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/pattern_matching/GraphMatcher.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/pattern_matching/GraphSimCAR.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/MinSpanningTree.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/pattern_matching/MGraphSim2.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/pattern_matching/GraphSim.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/pattern_matching/test/DualIsoPattern_STest.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/pattern_matching/TightSim.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/pattern_matching/test/TightPattern_STest.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/pattern_matching/MDualIso.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/columnar_db/package.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/columnar_db/TableGen.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/image/ChessTracker.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/GraphIO.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/pattern_matching/DualSimCAR.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/columnar_db/MM_Relation.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/columnar_db/Query.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/pattern_matching/test/DualPattern_STest.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graphalytics/Convert.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graphalytics/GraphSimIso.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/image/KL_Tracker.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graphalytics/package.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/columnar_db/Relation.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/pattern_matching/MTightSim.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/spatial/Vector2D.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/MGraphGen.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graphalytics/TightSim.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graphalytics/StrictSim2.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/columnar_db/KeyType.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/pattern_matching/MGraphSimCAR.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/graph_algebra/TestOperator.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/pattern_matching/MGraphSimX.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graphalytics/GraphMatcherTest.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/image/KLT_Tracker.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/columnar_db/Table.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/columnar_db/RelationF.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/spatial/Matrix2D.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/SSShortestPath.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/pattern_matching/MDualSimW.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/pattern_matching/MDualSim2X.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/pattern_matching/test/StrictPattern_STest.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/pattern_matching/MGraphSim2W.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graphalytics/APShortestPath.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/columnar_db/MakeSchema.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/pattern_matching/MGraphSim.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/graph_algebra/MuGraphGen.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/GraphMetrics.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/pattern_matching/GraphSim2.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/MGraphIO.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/pattern_matching/DualIso.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/graph_algebra/RandomGraph.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graphalytics/ColorDAG.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/spatial/Vector3D.scala)[0m
[0m[[0m[0mdebug[0m] [0m[0m	external source: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mAll initially invalidated classes: Set(scalation.graph_db.pattern_matching.MDualSimTest5, scalation.graph_db.pattern_matching.MGraphSim2Test4, scalation.graphalytics.GraphSim2Test3, scalation.columnar_db.MakeSchema, scalation.graph_db.pattern_matching.MGraphSimWTest5, scalation.graph_db.MGraphGenTest7, scalation.graphalytics.DualIso, scalation.graph_db.pattern_matching.MDualSim2, scalation.spatial.Earth, scalation.graph_db.pattern_matching.DualSimCARTest4, scalation.graph_db.pattern_matching.MTightSimTest6, scalation.columnar_db.Outlier, scalation.graph_db.pattern_matching.GraphSim2Test2, scalation.columnar_db.MissingValuesTest3, scalation.graph_db.pattern_matching.MGraphSim2WTest6, scalation.graph_db.pattern_matching.package, scalation.graphalytics.ExampleGraphS, scalation.graph_db.graph_algebra.MuTightSimTest, scalation.columnar_db.MissingValuesTable, scalation.graph_db.MGraphGenTest2, scalation.graph_db.pattern_matching.StrictSimTest5, scalation.graph_db.Cycle, scalation.graph_db.TreeTest2, scalation.graph_db.GraphGenTest2, scalation.graph_db.pattern_matching.MGraphSimTest4, scalation.graph_db.pattern_matching.MDualSimCARTest3, scalation.image.ImageCVTest, scalation.graph_db.PartitionTest3, scalation.graph_db.pattern_matching.MGraphSim2Test, scalation.columnar_db.MissingValuesTest, scalation.graphalytics.DualSim2Test3, scalation.graph_db.Tree, scalation.graph_db.pattern_matching.DualSim, scalation.graph_db.pattern_matching.MDualSimCARTest6, scalation.graphalytics.graph_algebra.package, scalation.graph_db.BoundedTreeWidthChains, scalation.columnar_db.DistanceOutlier, scalation.graph_db.pattern_matching.test.StrictPattern_DTest, scalation.graphalytics.ColorDAG.DagNode, scalation.graph_db.pattern_matching.MGraphSim2XTest2, scalation.graphalytics.GraphqlOptTest2, scalation.spatial.Vector3DTest, scalation.graph_db.pattern_matching.MGraphSim2WTest, scalation.graphalytics.DualSim2Test, scalation.graphalytics.GraphIOTest, scalation.columnar_db.RelationTest, scalation.columnar_db.RelationTest10, scalation.graph_db.pattern_matching.GraphSimCARTest5, scalation.columnar_db.RelationTest8, scalation.graph_db.pattern_matching.DualSim2Test4, scalation.graph_db.TreeTest, scalation.graph_db.pattern_matching.MGraphSim2WTest2, scalation.graph_db.GraphGen, scalation.graph_db.pattern_matching.TightSimTest, scalation.graph_db.pattern_matching.DualSimTest2, scalation.graph_db.graph_algebra.MuGraphAlgebra, scalation.graph_db.pattern_matching.MGraphSimCAR, scalation.graph_db.GraphGenTest6, scalation.graph_db.graph_algebra.RelationshipQuery, scalation.graph_db.pattern_matching.MDualSim2WTest3, scalation.graph_db.pattern_matching.MGraphSim2XTest3, scalation.graph_db.graph_algebra.MuGraphSimTest4, scalation.graph_db.ExampleMGraphI, scalation.graph_db.pattern_matching.MDualSimXTest4, scalation.graph_db.pattern_matching.GraphSimCARTest, scalation.graph_db.BoundedTreeWidthBN, scalation.graphalytics.ColorDAGTest, scalation.graph_db.graph_algebra.MuTightSimTest3, scalation.graph_db.pattern_matching.MDualSim2XTest2, scalation.columnar_db.RelationSQL, scalation.graphalytics.DualIsoCARTest2, scalation.graph_db.TopSort, scalation.graphalytics.GraphGenTest3, scalation.graph_db.pattern_matching.MGraphSimCARTest5, scalation.columnar_db.RelationTest4, scalation.columnar_db.QuantileOutlier, scalation.graph_db.SSShortestPath, scalation.graph_db.graph_algebra.MuGraphSim, scalation.graph_db.pattern_matching.MGraphSimXTest6, scalation.graph_db.pattern_matching.MGraphSim2X, scalation.graphalytics.TightSim2Test, scalation.graph_db.pattern_matching.DualIsoTest, scalation.graph_db.pattern_matching.MStrictSimTest6, scalation.graphalytics.GraphSim2Test, scalation.graph_db.pattern_matching.LabelFunctions, scalation.graph_db.graph_algebra.MuStrictSimTest, scalation.graph_db.MGraphIO, scalation.graph_db.pattern_matching.MDualSim2Test2, scalation.graph_db.pattern_matching.GraphSimTest2, scalation.graph_db.pattern_matching.MGraphSimTest, scalation.image.ImageCV, scalation.graph_db.pattern_matching.GraphSimTest, scalation.graphalytics.TestGraphContainer, scalation.graph_db.pattern_matching.Answers_g2Test, scalation.graph_db.pattern_matching.QueryTest2, scalation.graph_db.pattern_matching.MDualSim2Test5, scalation.graph_db.pattern_matching.test.GraphPattern_STest3, scalation.graph_db.pattern_matching.MTightSimTest2, scalation.graph_db.graph_algebra.MuDualSimTest2, scalation.graph_db.pattern_matching.MGraphSim2, scalation.graph_db.graph_algebra.MuGraphTest, scalation.spatial.Matrix2DTest, scalation.columnar_db.MM_Relation, scalation.graphalytics.TightSim, scalation.graphalytics.TreeTest2, scalation.graph_db.MGraphGenTest6, scalation.graph_db.pattern_matching.MDualIsoTest2, scalation.graph_db.MinSpanningTreeTest3, scalation.spatial.Vector2DTest, scalation.columnar_db.KeyType, scalation.graph_db.pattern_matching.MDualSimXTest6, scalation.spatial.Matrix3DTest, scalation.spatial.Matrix2D, scalation.graph_db.pattern_matching.MDualSimCARTest, scalation.graph_db.graph_algebra.MuDualSim, scalation.graphalytics.GraphIsoTest, scalation.graph_db.pattern_matching.StrictSimTest4, scalation.graph_db.pattern_matching.Ball, scalation.graph_db.MGraphGen, scalation.graphalytics.GraphTest, scalation.graph_db.GraphGenTest3, scalation.graphalytics.DualIsoCAR, scalation.graphalytics.TreeLayoutTest, scalation.graphalytics.TreeNode, scalation.graph_db.pattern_matching.MDualSimCARTest2, scalation.graphalytics.GraphqlOptTest, scalation.graph_db.pattern_matching.MGraphSimTest5, scalation.graph_db.graph_algebra.MuGraphGen, scalation.spatial.Vector3D, scalation.graph_db.pattern_matching.DualSim2CARTest2, scalation.graphalytics.TopSort, scalation.graph_db.pattern_matching.GraphSimCARTest2, scalation.graphalytics.ColorDAG.Edge, scalation.graph_db.pattern_matching.MDualSimTest4, scalation.graph_db.GraphDFSTest, scalation.columnar_db.Interpolate, scalation.spatial.LatitudeLongitudeTest4, scalation.graphalytics.GraphSimTest, scalation.graph_db.pattern_matching.MGraphSimWTest7, scalation.graph_db.GraphTest4, scalation.graph_db.pattern_matching.DualSimCARTest3, scalation.graph_db.SSShortestPathTest, scalation.columnar_db.RelationSQLTest, scalation.graphalytics.DualSimTest3, scalation.columnar_db.RelationSQLTest2, scalation.graph_db.pattern_matching.MGraphSimXTest5, scalation.graph_db.pattern_matching.DualSim2CARTest, scalation.graph_db.graph_algebra.MuStrictSimTest2, scalation.graph_db.pattern_matching.GraphSim2Test, scalation.graph_db.graph_algebra.MatchAnswersTest, scalation.graphalytics.APShortestPathTest, scalation.graph_db.GraphGenTest7, scalation.graph_db.pattern_matching.MGraphSimW, scalation.scala3d.Line3Dend, scalation.graph_db.pattern_matching.GraphSim2Test3, scalation.columnar_db.MM_RelationEx, scalation.graph_db.Graph, scalation.image.ChessTrackerTest, scalation.graphalytics.DualSim2CARTest, scalation.graph_db.package, scalation.columnar_db.Table, scalation.graph_db.pattern_matching.GraphSim2Test5, scalation.graphalytics.DualSim2Test2, scalation.graph_db.pattern_matching.DualSimCAR, scalation.graphalytics.CycleTest, scalation.graph_db.graph_algebra.MuDualIsoTest2, scalation.graphalytics.GraphqlOptTest3, scalation.graph_db.MinSpanningTree.Elem, scalation.graph_db.pattern_matching.MGraphSim2Test5, scalation.graph_db.GraphMetrics, scalation.graph_db.pattern_matching.MTightSim, scalation.graph_db.pattern_matching.MDualSim2WTest4, scalation.graph_db.pattern_matching.MStrictSimTest2, scalation.graph_db.pattern_matching.MGraphSimCARTest6, scalation.graph_db.pattern_matching.MGraphSim2XTest4, scalation.graph_db.pattern_matching.MGraphSimWTest4, scalation.graphalytics.Tree, scalation.graphalytics.GraphMetrics, scalation.graph_db.pattern_matching.test.GraphPattern_STest, scalation.scala3d.Line3DTest, scalation.spatial.LatitudeLongitudeTest, scalation.graph_db.pattern_matching.test.DualPattern_STest, scalation.graph_db.pattern_matching.Answers_g2, scalation.graphalytics.StrictSim2Test, scalation.columnar_db.RelationF, scalation.graph_db.pattern_matching.MDualSim2Test6, scalation.scala3d.PhongMaterial, scalation.graph_db.pattern_matching.GraphSim2Test4, scalation.graph_db.pattern_matching.QueryTest, scalation.graph_db.pattern_matching.GraphMatcher, scalation.graph_db.pattern_matching.MDualSimXTest, scalation.columnar_db.Query, scalation.graphalytics.DualIsoTest3, scalation.columnar_db.Tabular, scalation.graph_db.graph_algebra.HashMap_NE, scalation.graph_db.pattern_matching.MStrictSimTest5, scalation.graph_db.ExampleGraphD, scalation.graph_db.pattern_matching.MDualSimTest2, scalation.graphalytics.TrafficLight, scalation.graph_db.pattern_matching.MStrictSim, scalation.graph_db.ExampleMGraphS, scalation.columnar_db.RelationTest5, scalation.graph_db.graph_algebra.MuGraphTest3, scalation.graph_db.pattern_matching.TightSim, scalation.graph_db.ExampleMGraphD, scalation.graph_db.pattern_matching.MGraphSimCARTest2, scalation.columnar_db.MakeSchemaTest2, scalation.graph_db.pattern_matching.test.GraphPattern_DTest, scalation.graph_db.pattern_matching.MGraphSim2W, scalation.graph_db.Block, scalation.graphalytics.GraphIso, scalation.graph_db.SpanningTree, scalation.graph_db.pattern_matching.MGraphSim2Test6, scalation.graph_db.graph_algebra.MuDualIsoTest, scalation.graph_db.graph_algebra.MuTightSimTest2, scalation.graph_db.pattern_matching.DualSimTest3, scalation.columnar_db.Relation, scalation.graphalytics.GraphSimIso, scalation.graph_db.pattern_matching.MDualSim2XTest3, scalation.graph_db.pattern_matching.QueryTest3, scalation.graph_db.pattern_matching.DualIsoTest3, scalation.graph_db.pattern_matching.MDualSimW, scalation.graphalytics.GraphSim2Test2, scalation.graph_db.pattern_matching.test.StrictPattern_STest, scalation.graph_db.pattern_matching.MGraphSimXTest, scalation.columnar_db.MissingValuesTest2, scalation.graph_db.GraphIOTest, scalation.graph_db.pattern_matching.MDualSimCAR, scalation.scala3d.package, scalation.graphalytics.TreeTest3, scalation.graph_db.TreeTest3, scalation.columnar_db.ImputeMean, scalation.spatial.Vector2D, scalation.graph_db.MGraphGenTest8, scalation.graph_db.MGraphGenTest5, scalation.graphalytics.GraphqlOpt, scalation.columnar_db.MM_RelationTest2, scalation.graph_db.graph_algebra.MuDualSimTest3, scalation.columnar_db.ImputeNormal, scalation.graph_db.pattern_matching.test.DualIsoPattern_DTest2, scalation.graph_db.pattern_matching.DualSim2Test5, scalation.graphalytics.GraphTest2, scalation.graph_db.graph_algebra.MuGraphSimTest3, scalation.graphalytics.GraphMatcher, scalation.graph_db.pattern_matching.MGraphSimXTest2, scalation.graph_db.pattern_matching.MDualSim2XTest6, scalation.graph_db.pattern_matching.DualSimCARTest, scalation.columnar_db.RelationTest9, scalation.graphalytics.StrictSim, scalation.graph_db.pattern_matching.GraphSimTest3, scalation.graphalytics.StrictSimTest3, scalation.spatial.LatLong2UTM, scalation.columnar_db.CatalogTest, scalation.graph_db.GraphTest5, scalation.graph_db.pattern_matching.MDualIsoTest3, scalation.graph_db.pattern_matching.MGraphSim2WTest3, scalation.graph_db.pattern_matching.MDualSimWTest2, scalation.graph_db.graph_algebra.ExampleMuGraphI, scalation.graph_db.pattern_matching.test.DualPattern_STest2, scalation.graph_db.pattern_matching.Answers, scalation.scala3d.RotateOrder, scalation.graph_db.pattern_matching.DualSim2Test2, scalation.graph_db.pattern_matching.MTightSimTest3, scalation.graph_db.pattern_matching.MStrictSimTest, scalation.graphalytics.TightSimTest, scalation.graph_db.graph_algebra.MuDualIsoTest3, scalation.graph_db.pattern_matching.LabelVer, scalation.graph_db.pattern_matching.MDualSimXTest5, scalation.graph_db.pattern_matching.MGraphSim2XTest, scalation.image.package, scalation.graph_db.pattern_matching.MGraphSimTest2, scalation.graph_db.MGraphGenTest, scalation.graphalytics.GraphGenTest, scalation.graph_db.graph_algebra.MuGraphSimTest2, scalation.graphalytics.BipartiteMatcherTest, scalation.graph_db.pattern_matching.GraphSim2, scalation.graphalytics.TightSimTest3, scalation.graph_db.pattern_matching.MDualSim2XTest4, scalation.graph_db.BiconnectedCompTest2, scalation.scala3d.Point3D_O, scalation.graphalytics.DualSim2CAR, scalation.columnar_db.RelationEx, scalation.graphalytics.ColorDAG, scalation.graph_db.pattern_matching.MDualSimCARTest5, scalation.columnar_db.RelationSQLTest3, scalation.graph_db.CycleTest, scalation.graph_db.pattern_matching.DualSim2CARTest3, scalation.graph_db.pattern_matching.MGraphSimXTest4, scalation.columnar_db.TableObj, scalation.graphalytics.GraphMatcherTest, scalation.graphalytics.DualIsoTest2, scalation.scala3d.MoleculeSampleApp, scalation.graph_db.pattern_matching.TightSimTest3, scalation.graph_db.pattern_matching.MGraphSim2WTest4, scalation.graph_db.graph_algebra.MuGraphGenTest, scalation.graphalytics.DualSimTest, scalation.graph_db.pattern_matching.StrictSimTest3, scalation.graph_db.pattern_matching.DualSimCARTest2, scalation.columnar_db.OutlierTest2, scalation.graph_db.pattern_matching.test.TightPattern_STest, scalation.graphalytics.DualSimTest2, scalation.graph_db.pattern_matching.Query, scalation.graph_db.graph_algebra.MuGraphTest2, scalation.graph_db.pattern_matching.MDualSimWTest6, scalation.spatial.Matrix3D, scalation.graph_db.pattern_matching.MGraphSim2XTest5, scalation.graph_db.pattern_matching.MGraphSim2Test2, scalation.graph_db.pattern_matching.StrictSimTest, scalation.graph_db.graph_algebra.MuGraph, scalation.graphalytics.Ball, scalation.image.ChessTracker, scalation.graph_db.pattern_matching.MGraphSimWTest2, scalation.graphalytics.ConvertTest, scalation.graph_db.graph_algebra.MuStrictSimTest3, scalation.columnar_db.QueryRunner, scalation.graph_db.pattern_matching.MDualSimWTest3, scalation.graph_db.pattern_matching.GraphSimCAR, scalation.graph_db.pattern_matching.DualSimTest, scalation.image.ChessTrackerTest2, scalation.columnar_db.MissingValues, scalation.graphalytics.Convert, scalation.graph_db.pattern_matching.MDualSim2Test3, scalation.graphalytics.StrictSim2Test3, scalation.graph_db.GraphDFS, scalation.graph_db.pattern_matching.MGraphSimCARTest3, scalation.graph_db.pattern_matching.TightSimTest2, scalation.graphalytics.TreeTest4, scalation.image.KL_TrackerTest, scalation.graph_db.GraphTest2, scalation.graph_db.pattern_matching.DualSimTest4, scalation.graph_db.pattern_matching.test.TightPattern_STest2, scalation.graph_db.pattern_matching.MDualSim2W, scalation.graphalytics.GraphPatternTest, scalation.graph_db.pattern_matching.MGraphSimWTest3, scalation.graph_db.MGraphGenTest4, scalation.graph_db.MGraphIOTest, scalation.graph_db.graph_algebra.MuGraphGenTest2, scalation.columnar_db.ImputeMovingAverage, scalation.graph_db.pattern_matching.MGraphSimXTest3, scalation.graph_db.graph_algebra.MatchAnswers, scalation.graph_db.MGraph, scalation.graphalytics.GraphDFS, scalation.graph_db.pattern_matching.MGraphSim, scalation.graph_db.pattern_matching.Answers_g3, scalation.graph_db.pattern_matching.MDualSim2XTest, scalation.graph_db.pattern_matching.DualIsoTest2, scalation.graph_db.graph_algebra.ExampleMuGraphD, scalation.graph_db.pattern_matching.MDualIso, scalation.graph_db.pattern_matching.MDualSimX, scalation.graphalytics.StrictSimTest, scalation.columnar_db.RelationTest6, scalation.graphalytics.APShortestPath, scalation.graphalytics.StrictSimTest2, scalation.graph_db.pattern_matching.GraphSimTest4, scalation.graph_db.pattern_matching.MDualSim2WTest6, scalation.graph_db.pattern_matching.test.StrictPattern_STest3, scalation.columnar_db.MM_RelationTest, scalation.graph_db.Partition, scalation.graph_db.pattern_matching.MStrictSimTest4, scalation.graph_db.pattern_matching.MGraphSimTest6, scalation.graph_db.pattern_matching.DualSim2CAR, scalation.graph_db.GraphGenTest4, scalation.graph_db.ExampleGraphI, scalation.graph_db.graph_algebra.MuDualIso, scalation.graph_db.GraphMetricsTest, scalation.graphalytics.TightSim2Test3, scalation.columnar_db.Query1, scalation.graph_db.pattern_matching.MGraphSimWTest6, scalation.graphalytics.GraphMetricsTest, scalation.columnar_db.RelationFTest, scalation.graph_db.pattern_matching.StrictSim, scalation.graph_db.pattern_matching.MDualSimTest, scalation.graphalytics.DualSim, scalation.graphalytics.DualIsoTest, scalation.graph_db.BoundedTreeWidthBNTest, scalation.graph_db.pattern_matching.MDualSimTest3, scalation.graphalytics.DualIsoCARTest, scalation.graph_db.graph_algebra.PathType, scalation.spatial.LatitudeLongitudeTest3, scalation.graph_db.pattern_matching.GraphSimCARTest4, scalation.columnar_db.MakeSchemaTest, scalation.graph_db.pattern_matching.test.StrictPattern_STest2, scalation.graph_db.pattern_matching.DualSim2Test, scalation.graph_db.pattern_matching.MDualSim2XTest5, scalation.graphalytics.TightSim2Test2, scalation.columnar_db.TableGenTest, scalation.columnar_db.package, scalation.graph_db.pattern_matching.MDualSim2WTest2, scalation.graph_db.pattern_matching.DualIso, scalation.graph_db.pattern_matching.MDualSimWTest5, scalation.graph_db.MinSpanningTree.NodeOrder2, scalation.graph_db.pattern_matching.MDualIsoTest, scalation.scala3d.PerspectiveCamera, scalation.graph_db.pattern_matching.MGraphSim2Test3, scalation.graph_db.pattern_matching.MGraphSim2WTest5, scalation.graph_db.MinSpanningTree.NodeOrder, scalation.graphalytics.TightSim2, scalation.graphalytics.DualSim2CARTest2, scalation.graph_db.pattern_matching.MDualSimXTest2, scalation.spatial.LatitudeLongitude, scalation.graph_db.pattern_matching.MGraphSimTest3, scalation.graphalytics.TopSortTest, scalation.graph_db.GraphTest, scalation.graphalytics.StrictSim2Test2, scalation.spatial.Vector2DTest2, scalation.graph_db.graph_algebra.Neo4j, scalation.graph_db.PartitionTest2, scalation.graph_db.pattern_matching.test.DualPattern_STest3, scalation.graph_db.MGraphTest2, scalation.graph_db.pattern_matching.DualSim2Test3, scalation.columnar_db.MissingValuesTest4, scalation.graphalytics.GraphSimIsoTest, scalation.graph_db.pattern_matching.MDualSim2WTest, scalation.graphalytics.StrictSim2, scalation.graph_db.pattern_matching.MDualSimWTest, scalation.image.Tracker, scalation.columnar_db.RelationTest2, scalation.graph_db.graph_algebra.MuDualSimTest, scalation.graph_db.TopSortTest, scalation.graph_db.ExampleGraphS, scalation.graphalytics.GraphSim, scalation.graph_db.graph_algebra.MuTightSim, scalation.graphalytics.GraphIO, scalation.graph_db.pattern_matching.test.DualIsoPattern_STest2, scalation.graph_db.graph_algebra.RandomGraph, scalation.scala3d.Line3D, scalation.graph_db.graph_algebra.BasicQueryTest, scalation.columnar_db.RelationTest7, scalation.graph_db.GraphGenTest, scalation.columnar_db.MM_RelationTest3, scalation.graph_db.SpanningTreeTest, scalation.graph_db.pattern_matching.DualSimCARTest5, scalation.graphalytics.GraphSimTest2, scalation.graph_db.pattern_matching.MGraphSimXTest7, scalation.graph_db.TrafficLight, scalation.graph_db.graph_algebra.MuGraphGenTest3, scalation.graph_db.pattern_matching.StrictSimTest2, scalation.graph_db.pattern_matching.MDualSimCARTest4, scalation.graph_db.graph_algebra.ExampleMuGraphS, scalation.graphalytics.BipartiteMatcher, scalation.graph_db.pattern_matching.MDualSimTest6, scalation.graph_db.pattern_matching.MTightSimTest4, scalation.graph_db.pattern_matching.TightSimTest4, scalation.graph_db.graph_algebra.MuGraphSimTest, scalation.graph_db.pattern_matching.test.package, scalation.graphalytics.Graph, scalation.graph_db.SSShortestPath.Item, scalation.graphalytics.TightSimTest2, scalation.image.KLTTest, scalation.graph_db.pattern_matching.MStrictSimTest3, scalation.graph_db.GraphIO, scalation.graph_db.pattern_matching.MGraphSim2XTest6, scalation.columnar_db.RelationTest3, scalation.graph_db.pattern_matching.test.GraphPattern_STest2, scalation.graphalytics.TreeLayout, scalation.spatial.UTM2LatLong, scalation.columnar_db.QuartileXOutlier, scalation.graphalytics.TreeTest, scalation.graph_db.pattern_matching.MGraphSimCARTest, scalation.graph_db.pattern_matching.GraphSimTest5, scalation.graph_db.pattern_matching.MGraphSimCARTest4, scalation.graph_db.pattern_matching.MGraphSimWTest, scalation.graph_db.graph_algebra.MuStrictSim, scalation.graph_db.pattern_matching.MDualSim2WTest5, scalation.graph_db.GraphGenTest8, scalation.graph_db.pattern_matching.DualSimTest5, scalation.graph_db.pattern_matching.DualSim2, scalation.graph_db.GraphTest3, scalation.graph_db.pattern_matching.test.TightPattern_DTest, scalation.graphalytics.Answers, scalation.scala3d.Line3DHelper, scalation.graphalytics.GraphGenTest2, scalation.image.KL_Tracker, scalation.graph_db.SSShortestPathTest2, scalation.columnar_db.TableGen, scalation.graphalytics.GraphSim2, scalation.graph_db.pattern_matching.MGraphSimX, scalation.image.ChessTrackerTest3, scalation.columnar_db.OutlierTest, scalation.graphalytics.LabelType, scalation.graph_db.pattern_matching.test.TightPattern_STest3, scalation.graph_db.PartitionTest, scalation.graph_db.MGraphGenTest3, scalation.graph_db.pattern_matching.GraphSimCARTest3, scalation.spatial.LatitudeLongitudeTest2, scalation.graphalytics.GraphDFSTest, scalation.columnar_db.MM_RelationTest4, scalation.graphalytics.package, scalation.graph_db.graph_algebra.TestOperator, scalation.columnar_db.Catalog, scalation.graph_db.pattern_matching.test.DualIsoPattern_STest3, scalation.graph_db.BiconnectedCompTest, scalation.graph_db.pattern_matching.test.DualPatternTest_D, scalation.graph_db.pattern_matching.GraphSim, scalation.graphalytics.IsomorphismChecker, scalation.graph_db.TreeTest4, scalation.graph_db.MGraphTest, scalation.graph_db.pattern_matching.MDualSim, scalation.graph_db.pattern_matching.MDualSim2Test, scalation.graphalytics.Cycle, scalation.image.KLT, scalation.graphalytics.DualSim2, scalation.graph_db.MinSpanningTreeTest2, scalation.graph_db.pattern_matching.MDualSim2X, scalation.graph_db.GraphGenTest5, scalation.graph_db.pattern_matching.MTightSimTest, scalation.graph_db.pattern_matching.MDualSim2Test4, scalation.graph_db.pattern_matching.MTightSimTest5, scalation.graph_db.MinSpanningTreeTest, scalation.graphalytics.DualSim2CARTest3, scalation.columnar_db.Imputation, scalation.graph_db.BiconnectedComp, scalation.graphalytics.GraphGen, scalation.graph_db.pattern_matching.MDualSimXTest3, scalation.graph_db.pattern_matching.TightSimTest5, scalation.columnar_db.CreateTable1, scalation.scala3d.Xform, scalation.graph_db.TreeNode, scalation.graph_db.MinSpanningTree, scalation.columnar_db.ImputeNormalWin, scalation.graph_db.pattern_matching.MDualSimWTest4)[0m
[0m[[0m[0mdebug[0m] [0m[0mAll initially invalidated sources:Set(/home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/distributed_db_old/package.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/dist_db/DistUtil.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/BoundedTreewidthBN.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graphalytics/TightSim2.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graphalytics/GraphMatcher.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/pattern_matching/StrictSim.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/pattern_matching/DualSim.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/pattern_matching/MDualSim2W.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/pattern_matching/MGraphSimW.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/pattern_matching/MDualSimX.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/pattern_matching/Query.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/columnar_db/MissingValues.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/pattern_matching/MGraphSim2X.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/preprocessing/package.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/Tree.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/graph_algebra/MuStrictSim.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/columnar_db/Imputation.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/pattern_matching/test/DualIsoPattern_DTest.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graphalytics/GraphPatternTest.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/columnar_db/RelationSQL.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/spatial/LatitudeLongitude.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/image/ImageCV.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/pattern_matching/test/GraphPattern_STest.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/Partition.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/analytics/package.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/image/package.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/pattern_matching/LabelFunctions.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/graph_algebra/MuDualIso.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graphalytics/StrictSim.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/graph_algebra/MuTightSim.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/pattern_matching/MDualSim2.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/distributed_db_old/DistUtil.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/graph_algebra/MuGraph.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/distributed_db_old/RelationDBMaster.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/graph_algebra/MuGraphAlgebra.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/columnar_db/QueryRunner.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/pattern_matching/DualSim2.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graphalytics/Tree.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graphalytics/GraphMetrics.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/spatial/Matrix3D.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/columnar_db/Outliers.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graphalytics/LabelType.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/image/Tracker.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/distributed_db_old/RelationDBWorker.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/package.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/GraphGen.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/pattern_matching/MDualSim.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/pattern_matching/MDualSimCAR.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graphalytics/GraphqlOpt.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/pattern_matching/MStrictSim.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graphalytics/DualIso.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graphalytics/DualIsoCAR.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/SpanningTree.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/pattern_matching/GraphMatcher.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/pattern_matching/GraphSimCAR.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/MinSpanningTree.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/pattern_matching/MGraphSim2.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/pattern_matching/GraphSim.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/pattern_matching/test/DualIsoPattern_STest.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/pattern_matching/TightSim.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/pattern_matching/test/TightPattern_STest.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/pattern_matching/MDualIso.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/columnar_db/package.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/columnar_db/TableGen.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/image/ChessTracker.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/GraphIO.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/pattern_matching/DualSimCAR.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/columnar_db/MM_Relation.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/columnar_db/Query.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/pattern_matching/test/DualPattern_STest.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graphalytics/Convert.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graphalytics/GraphSimIso.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/image/KL_Tracker.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graphalytics/package.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/columnar_db/Relation.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/pattern_matching/MTightSim.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/spatial/Vector2D.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/MGraphGen.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graphalytics/TightSim.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/dist_db/RelDBWorker.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graphalytics/StrictSim2.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/columnar_db/KeyType.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/pattern_matching/MGraphSimCAR.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/graph_algebra/TestOperator.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/pattern_matching/MGraphSimX.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graphalytics/GraphMatcherTest.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/image/KLT_Tracker.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/columnar_db/Table.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/columnar_db/RelationF.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/spatial/Matrix2D.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/SSShortestPath.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/pattern_matching/MDualSimW.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/pattern_matching/MDualSim2X.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/preprocessing/PreProcessingMaster.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/pattern_matching/test/StrictPattern_STest.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/pattern_matching/MGraphSim2W.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graphalytics/APShortestPath.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/columnar_db/MakeSchema.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/pattern_matching/MGraphSim.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/graph_algebra/MuGraphGen.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/dist_db/package.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/GraphMetrics.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/pattern_matching/GraphSim2.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/MGraphIO.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/pattern_matching/DualIso.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graph_db/graph_algebra/RandomGraph.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/dist_db/RelDBMaster.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/graphalytics/ColorDAG.scala, /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/src/main/scala/scalation/spatial/Vector3D.scala)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated package objects: Set(scalation.graph_db.pattern_matching.package, scalation.graphalytics.graph_algebra.package, scalation.graph_db.package, scalation.scala3d.package, scalation.image.package, scalation.columnar_db.package, scalation.graph_db.pattern_matching.test.package, scalation.graphalytics.package)[0m
[0m[[0m[0mdebug[0m] [0m[0mRecompiling all 11 sources: invalidated sources (173) exceeded 50.0% of all sources[0m
[0m[[0m[0minfo[0m] [0m[0mCompiling 11 Scala sources to /home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/target/scala-2.12/classes ...[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting org.scala-sbt:compiler-bridge_2.12:1.1.7:compile for Scala 2.12.4[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting org.scala-sbt:compiler-bridge_2.12:1.1.7:compile for Scala 2.12.4[0m
[0m[[0m[0mdebug[0m] [0m[0m[zinc] Running cached compiler 4acce4a7 for Scala compiler version 2.12.4[0m
[0m[[0m[0mdebug[0m] [0m[0m[zinc] The Scala compiler is invoked with:[0m
[0m[[0m[0mdebug[0m] [0m[0m	-deprecation[0m
[0m[[0m[0mdebug[0m] [0m[0m	-feature[0m
[0m[[0m[0mdebug[0m] [0m[0m	-Xfatal-warnings[0m
[0m[[0m[0mdebug[0m] [0m[0m	-opt:l:method[0m
[0m[[0m[0mdebug[0m] [0m[0m	-opt:l:inline[0m
[0m[[0m[0mdebug[0m] [0m[0m	-opt-inline-from:**[0m
[0m[[0m[0mdebug[0m] [0m[0m	-opt-warnings[0m
[0m[[0m[0mdebug[0m] [0m[0m	-Xlint:-adapted-args[0m
[0m[[0m[0mdebug[0m] [0m[0m	-bootclasspath[0m
[0m[[0m[0mdebug[0m] [0m[0m	/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/resources.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/rt.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/sunrsasign.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/jsse.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/jce.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/charsets.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/jfr.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/classes:/home/vinay/.ivy2/cache/org.scala-lang/scala-library/jars/scala-library-2.12.4.jar[0m
[0m[[0m[0mdebug[0m] [0m[0m	-classpath[0m
[0m[[0m[0mdebug[0m] [0m[0m	/home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/target/scala-2.12/classes:/home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/lib/scalation_mathstat_2.12-1.5.jar:/home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/lib/scalation_database_2.12-1.5.jar:/home/vinay/UGA/Acad/Fall18/Directed Study/november/github/scalation_ms/scalation_ms/lib/scalation_modeling_2.12-1.5.jar:/home/vinay/.ivy2/cache/org.scala-lang/scala-compiler/jars/scala-compiler-2.12.4.jar:/home/vinay/.ivy2/cache/org.scala-lang/scala-reflect/jars/scala-reflect-2.12.4.jar:/home/vinay/.ivy2/cache/org.scala-lang.modules/scala-xml_2.12/bundles/scala-xml_2.12-1.0.6.jar:/home/vinay/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.5.14.jar:/home/vinay/.ivy2/cache/com.typesafe/config/bundles/config-1.3.3.jar:/home/vinay/.ivy2/cache/org.scala-lang.modules/scala-java8-compat_2.12/bundles/scala-java8-compat_2.12-0.8.0.jar:/home/vinay/.ivy2/cache/com.typesafe.akka/akka-cluster_2.12/jars/akka-cluster_2.12-2.5.14.jar:/home/vinay/.ivy2/cache/com.typesafe.akka/akka-remote_2.12/jars/akka-remote_2.12-2.5.14.jar:/home/vinay/.ivy2/cache/com.typesafe.akka/akka-stream_2.12/jars/akka-stream_2.12-2.5.14.jar:/home/vinay/.ivy2/cache/com.typesafe.akka/akka-protobuf_2.12/jars/akka-protobuf_2.12-2.5.14.jar:/home/vinay/.ivy2/cache/org.reactivestreams/reactive-streams/jars/reactive-streams-1.0.2.jar:/home/vinay/.ivy2/cache/com.typesafe/ssl-config-core_2.12/bundles/ssl-config-core_2.12-0.2.3.jar:/home/vinay/.ivy2/cache/org.scala-lang.modules/scala-parser-combinators_2.12/bundles/scala-parser-combinators_2.12-1.1.0.jar:/home/vinay/.ivy2/cache/io.netty/netty/bundles/netty-3.10.6.Final.jar:/home/vinay/.ivy2/cache/io.aeron/aeron-driver/jars/aeron-driver-1.9.1.jar:/home/vinay/.ivy2/cache/io.aeron/aeron-client/jars/aeron-client-1.9.1.jar:/home/vinay/.ivy2/cache/org.agrona/agrona/jars/agrona-0.9.17.jar:/home/vinay/.ivy2/cache/com.typesafe.akka/akka-cluster-tools_2.12/jars/akka-cluster-tools_2.12-2.5.14.jar:/home/vinay/.ivy2/cache/com.typesafe.akka/akka-distributed-data_2.12/jars/akka-distributed-data_2.12-2.5.14.jar:/home/vinay/.ivy2/cache/org.lmdbjava/lmdbjava/jars/lmdbjava-0.6.0.jar:/home/vinay/.ivy2/cache/com.github.jnr/jnr-ffi/jars/jnr-ffi-2.1.6.jar:/home/vinay/.ivy2/cache/com.github.jnr/jffi/jars/jffi-1.2.16.jar:/home/vinay/.ivy2/cache/com.github.jnr/jffi/jars/jffi-1.2.16-native.jar:/home/vinay/.ivy2/cache/org.ow2.asm/asm/jars/asm-5.0.3.jar:/home/vinay/.ivy2/cache/org.ow2.asm/asm-commons/jars/asm-commons-5.0.3.jar:/home/vinay/.ivy2/cache/org.ow2.asm/asm-tree/jars/asm-tree-5.0.3.jar:/home/vinay/.ivy2/cache/org.ow2.asm/asm-analysis/jars/asm-analysis-5.0.3.jar:/home/vinay/.ivy2/cache/org.ow2.asm/asm-util/jars/asm-util-5.0.3.jar:/home/vinay/.ivy2/cache/com.github.jnr/jnr-x86asm/jars/jnr-x86asm-1.0.2.jar:/home/vinay/.ivy2/cache/com.github.jnr/jnr-constants/jars/jnr-constants-0.9.9.jar:/home/vinay/.ivy2/cache/org.neo4j.driver/neo4j-java-driver/jars/neo4j-java-driver-1.4.4.jar[0m
[0m[[0m[0mdebug[0m] [0m[0mScala compilation took 11.86897056 s[0m
[0m[[0m[0minfo[0m] [0m[0mDone compiling.[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.DualSimCARTest2...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.DualSimCARTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.DualSimCARTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.DualSimCARTest2,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(DualSimCARTest2,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.DualSimCARTest2 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(DualSimCARTest2,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.DualSimCARTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.MDualSimXTest6...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.MDualSimXTest6)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.MDualSimXTest6)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.MDualSimXTest6,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(MDualSimXTest6,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.MDualSimXTest6 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(MDualSimXTest6,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.MDualSimXTest6)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.MGraphSimXTest6...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.MGraphSimXTest6)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.MGraphSimXTest6)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.MGraphSimXTest6,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(MGraphSimXTest6,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.MGraphSimXTest6 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(MGraphSimXTest6,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.MGraphSimXTest6)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.graph_algebra.MuGraphTest2...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.graph_algebra.MuGraphTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.graph_algebra.MuGraphTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.graph_algebra.MuGraphTest2,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(MuGraphTest2,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.graph_algebra.MuGraphTest2 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(MuGraphTest2,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.graph_algebra.MuGraphTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.columnar_db.Tabular...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.columnar_db.Tabular)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.columnar_db.Tabular)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.columnar_db.Tabular,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(Tabular,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(show,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(show$default$1,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.columnar_db.Tabular has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(Tabular,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(show,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(show$default$1,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.columnar_db.Tabular)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.columnar_db.RelationTest10...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.columnar_db.RelationTest10)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.columnar_db.RelationTest10)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.columnar_db.RelationTest10,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(RelationTest10,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.columnar_db.RelationTest10 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(RelationTest10,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.columnar_db.RelationTest10)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.spatial.LatitudeLongitude...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.spatial.LatitudeLongitude)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.spatial.LatitudeLongitude)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.spatial.LatitudeLongitude,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(copy$default$1,[Default]), UsedName(long,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(canEqual,[Default]), UsedName(LatitudeLongitude,[Default]), UsedName(productPrefix,[Default]), UsedName(scalation;spatial;LatitudeLongitude;init;,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(lat,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(copy$default$2,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(distance$default$2,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(invalid,[Default]), UsedName(kNearest$default$2,[Default]), UsedName(distance,[Default]), UsedName(kNearest,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.spatial.LatitudeLongitude has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(copy$default$1,[Default]), UsedName(long,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(canEqual,[Default]), UsedName(LatitudeLongitude,[Default]), UsedName(productPrefix,[Default]), UsedName(scalation;spatial;LatitudeLongitude;init;,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(lat,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(copy$default$2,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(distance$default$2,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(invalid,[Default]), UsedName(kNearest$default$2,[Default]), UsedName(distance,[Default]), UsedName(kNearest,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.spatial.LatitudeLongitude)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.spatial.Vector3DTest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.spatial.Vector3DTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.spatial.Vector3DTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.spatial.Vector3DTest,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(v,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(w,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(u,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(Vector3DTest,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.spatial.Vector3DTest has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(v,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(w,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(u,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(Vector3DTest,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.spatial.Vector3DTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graphalytics.StrictSim2Test3...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graphalytics.StrictSim2Test3)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graphalytics.StrictSim2Test3)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graphalytics.StrictSim2Test3,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(StrictSim2Test3,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graphalytics.StrictSim2Test3 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(StrictSim2Test3,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graphalytics.StrictSim2Test3)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.MGraphGenTest2...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.MGraphGenTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.MGraphGenTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.MGraphGenTest2,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(gGen,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(g1,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(MGraphGenTest2,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.MGraphGenTest2 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(gGen,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(g1,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(MGraphGenTest2,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.MGraphGenTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.MDualSim2W...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.MDualSim2W)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.MDualSim2W)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.MDualSim2W,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(test$default$2,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(feasibleMatesW,[Default]), UsedName(isInstanceOf,[Default]), UsedName(bijections,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(disjoint,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(qRange,[Default]), UsedName(notifyAll,[Default]), UsedName(SELF_LOOPS,[Default]), UsedName(getClass,[Default]), UsedName(LIMIT,[Default]), UsedName(gRange,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(feasibleMates,[Default]), UsedName(CHECK,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(MDualSim2W,[Default]), UsedName(##,[Default]), UsedName(test,[Default]), UsedName(showMappings,[Default]), UsedName(scalation;graph_db;pattern_matching;MDualSim2W;init;,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(countMappings,[Default]), UsedName(filterGraph,[Default]), UsedName(prune,[Default]), UsedName(mappings,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.MDualSim2W has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(test$default$2,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(feasibleMatesW,[Default]), UsedName(isInstanceOf,[Default]), UsedName(bijections,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(disjoint,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(qRange,[Default]), UsedName(notifyAll,[Default]), UsedName(SELF_LOOPS,[Default]), UsedName(getClass,[Default]), UsedName(LIMIT,[Default]), UsedName(gRange,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(feasibleMates,[Default]), UsedName(CHECK,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(MDualSim2W,[Default]), UsedName(##,[Default]), UsedName(test,[Default]), UsedName(showMappings,[Default]), UsedName(scalation;graph_db;pattern_matching;MDualSim2W;init;,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(countMappings,[Default]), UsedName(filterGraph,[Default]), UsedName(prune,[Default]), UsedName(mappings,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.MDualSim2W)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.MDualSimTest2...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.MDualSimTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.MDualSimTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.MDualSimTest2,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(MDualSimTest2,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.MDualSimTest2 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(MDualSimTest2,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.MDualSimTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.SSShortestPathTest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.SSShortestPathTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.SSShortestPathTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.SSShortestPathTest,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(c,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(b,[Default]), UsedName(SSShortestPathTest,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(sp2,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(sp,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.SSShortestPathTest has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(c,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(b,[Default]), UsedName(SSShortestPathTest,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(sp2,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(sp,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.SSShortestPathTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graphalytics.GraphPatternTest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graphalytics.GraphPatternTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graphalytics.GraphPatternTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graphalytics.GraphPatternTest,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(q2,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(g1,[Default]), UsedName(notifyAll,[Default]), UsedName(GraphPatternTest,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(q3,[Default]), UsedName(synchronized,[Default]), UsedName(g2,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(q1,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName(g3,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graphalytics.GraphPatternTest has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(q2,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(g1,[Default]), UsedName(notifyAll,[Default]), UsedName(GraphPatternTest,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(q3,[Default]), UsedName(synchronized,[Default]), UsedName(g2,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(q1,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName(g3,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graphalytics.GraphPatternTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.dist_db.add...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.dist_db.add)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.dist_db.add)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.dist_db.RelDBMasterTest4: Set(UsedName(apply,[Default]), UsedName(add,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.dist_db.RelDBMasterTest: Set(UsedName(apply,[Default]), UsedName(add,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.dist_db.RelDBMaster: Set(UsedName(t,[Default]), UsedName(isInstanceOf,[Default]), UsedName(name,[Default]), UsedName(asInstanceOf,[Default]), UsedName(==,[Default]), UsedName(apply,[Default]), UsedName(ne,[Default]), UsedName(add,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.dist_db.add,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(copy$default$1,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(canEqual,[Default]), UsedName(scalation;dist_db;add;init;,[Default]), UsedName(curried,[Default]), UsedName(productPrefix,[Default]), UsedName(tupled,[Default]), UsedName(t,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(name,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(copy$default$2,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(unapply,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(apply,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(add,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 4 classes due to The scalation.dist_db.add has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(copy$default$1,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(canEqual,[Default]), UsedName(scalation;dist_db;add;init;,[Default]), UsedName(curried,[Default]), UsedName(productPrefix,[Default]), UsedName(tupled,[Default]), UsedName(t,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(name,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(copy$default$2,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(unapply,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(apply,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(add,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.dist_db.add)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> by member reference: Set(scalation.dist_db.RelDBMasterTest4, scalation.dist_db.RelDBMasterTest, scalation.dist_db.RelDBMaster)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.MGraphSimXTest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.MGraphSimXTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.MGraphSimXTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.MGraphSimXTest,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(MGraphSimXTest,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.MGraphSimXTest has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(MGraphSimXTest,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.MGraphSimXTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.scala3d.PhongMaterial...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.scala3d.PhongMaterial)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.scala3d.PhongMaterial)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.scala3d.PhongMaterial,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(PhongMaterial,[Default]), UsedName(apply,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.scala3d.PhongMaterial has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(PhongMaterial,[Default]), UsedName(apply,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.scala3d.PhongMaterial)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.columnar_db.RelationEx...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.columnar_db.RelationEx)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.columnar_db.RelationEx)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.columnar_db.RelationEx,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(RelationEx,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(productSales,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.columnar_db.RelationEx has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(RelationEx,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(productSales,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.columnar_db.RelationEx)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.columnar_db.CreateTable1...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.columnar_db.CreateTable1)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.columnar_db.CreateTable1)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.columnar_db.CreateTable1,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(CreateTable1,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.columnar_db.CreateTable1 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(CreateTable1,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.columnar_db.CreateTable1)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.QueryTest2...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.QueryTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.QueryTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.QueryTest2,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(triples,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(QueryTest2,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.QueryTest2 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(triples,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(QueryTest2,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.QueryTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.TightSim...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.TightSim)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.TightSim)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.TightSim,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(test$default$2,[Default]), UsedName(TightSim,[Default]), UsedName(hashCode,[Default]), UsedName(selectivityCriteria,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(feasibleMatesW,[Default]), UsedName(isInstanceOf,[Default]), UsedName(bijections,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(disjoint,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(qRange,[Default]), UsedName(notifyAll,[Default]), UsedName(SELF_LOOPS,[Default]), UsedName(getClass,[Default]), UsedName(LIMIT,[Default]), UsedName(scalation;graph_db;pattern_matching;TightSim;init;,[Default]), UsedName(gRange,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(feasibleMates,[Default]), UsedName(refine,[Default]), UsedName(CHECK,[Default]), UsedName(mappings2,[Default]), UsedName(synchronized,[Default]), UsedName(dualFilter,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(test,[Default]), UsedName(showMappings,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(countMappings,[Default]), UsedName(filterGraph,[Default]), UsedName(prune,[Default]), UsedName(mappings,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.TightSim has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(test$default$2,[Default]), UsedName(TightSim,[Default]), UsedName(hashCode,[Default]), UsedName(selectivityCriteria,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(feasibleMatesW,[Default]), UsedName(isInstanceOf,[Default]), UsedName(bijections,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(disjoint,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(qRange,[Default]), UsedName(notifyAll,[Default]), UsedName(SELF_LOOPS,[Default]), UsedName(getClass,[Default]), UsedName(LIMIT,[Default]), UsedName(scalation;graph_db;pattern_matching;TightSim;init;,[Default]), UsedName(gRange,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(feasibleMates,[Default]), UsedName(refine,[Default]), UsedName(CHECK,[Default]), UsedName(mappings2,[Default]), UsedName(synchronized,[Default]), UsedName(dualFilter,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(test,[Default]), UsedName(showMappings,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(countMappings,[Default]), UsedName(filterGraph,[Default]), UsedName(prune,[Default]), UsedName(mappings,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.TightSim)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.test.DualIsoPattern_STest2...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.test.DualIsoPattern_STest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.test.DualIsoPattern_STest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.test.DualIsoPattern_STest2,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(gLabels,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(gDegree,[Default]), UsedName(inverse,[Default]), UsedName(UNIFORM,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(qSize,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(qDegree,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(DualIsoPattern_STest2,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.test.DualIsoPattern_STest2 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(gLabels,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(gDegree,[Default]), UsedName(inverse,[Default]), UsedName(UNIFORM,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(qSize,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(qDegree,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(DualIsoPattern_STest2,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.test.DualIsoPattern_STest2)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.MGraphSimWTest4...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.MGraphSimWTest4)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.MGraphSimWTest4)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.MGraphSimWTest4,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(MGraphSimWTest4,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.MGraphSimWTest4 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(MGraphSimWTest4,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.MGraphSimWTest4)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.image.KL_TrackerTest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.image.KL_TrackerTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.image.KL_TrackerTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.image.KL_TrackerTest,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(w,[Default]), UsedName(tr,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(u,[Default]), UsedName(toString,[Default]), UsedName(KL_TrackerTest,[Default]), UsedName(d,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(e,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.image.KL_TrackerTest has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(w,[Default]), UsedName(tr,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(u,[Default]), UsedName(toString,[Default]), UsedName(KL_TrackerTest,[Default]), UsedName(d,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(e,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.image.KL_TrackerTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.DualSimTest5...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.DualSimTest5)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.DualSimTest5)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.DualSimTest5,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(DualSimTest5,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.DualSimTest5 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(DualSimTest5,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.DualSimTest5)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.dist_db.projectIn...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.dist_db.projectIn)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.dist_db.projectIn)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.dist_db.projectIn,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(copy$default$1,[Default]), UsedName(hashCode,[Default]), UsedName(cNames,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(canEqual,[Default]), UsedName(curried,[Default]), UsedName(productPrefix,[Default]), UsedName(tupled,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(name,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(copy$default$2,[Default]), UsedName(uc,[Default]), UsedName(scalation;dist_db;projectIn;init;,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(unapply,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(apply,[Default]), UsedName(projectIn,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(copy$default$3,[Default]), UsedName(ne,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.dist_db.projectIn has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(copy$default$1,[Default]), UsedName(hashCode,[Default]), UsedName(cNames,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(canEqual,[Default]), UsedName(curried,[Default]), UsedName(productPrefix,[Default]), UsedName(tupled,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(name,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(copy$default$2,[Default]), UsedName(uc,[Default]), UsedName(scalation;dist_db;projectIn;init;,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(unapply,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(apply,[Default]), UsedName(projectIn,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(copy$default$3,[Default]), UsedName(ne,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.dist_db.projectIn)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.graph_algebra.MuGraphGenTest2...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.graph_algebra.MuGraphGenTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.graph_algebra.MuGraphGenTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.graph_algebra.MuGraphGenTest2,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(MuGraphGenTest2,[Default]), UsedName(mgGen,[Default]), UsedName(synchronized,[Default]), UsedName(g2,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName(g3,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.graph_algebra.MuGraphGenTest2 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(MuGraphGenTest2,[Default]), UsedName(mgGen,[Default]), UsedName(synchronized,[Default]), UsedName(g2,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName(g3,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.graph_algebra.MuGraphGenTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.PartitionTest3...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.PartitionTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.PartitionTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.PartitionTest3,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(dp,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(edgeSum,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(PartitionTest3,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.PartitionTest3 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(dp,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(edgeSum,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(PartitionTest3,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.PartitionTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.graph_algebra.MuStrictSim...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.graph_algebra.MuStrictSim)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.graph_algebra.MuStrictSim)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.graph_algebra.MuStrictSim,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(test$default$2,[Default]), UsedName(calculateTotalEdges,[Default]), UsedName(hashCode,[Default]), UsedName(selectivityCriteria,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(feasibleMatesW,[Default]), UsedName(calculateBallDiameterMetrics,[Default]), UsedName(isInstanceOf,[Default]), UsedName(bijections,[Default]), UsedName(finalize,[Default]), UsedName(strictSim,[Default]), UsedName(asInstanceOf,[Default]), UsedName(disjoint,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(qRange,[Default]), UsedName(notifyAll,[Default]), UsedName(SELF_LOOPS,[Default]), UsedName(getClass,[Default]), UsedName(LIMIT,[Default]), UsedName(MuStrictSim,[Default]), UsedName(scalation;graph_db;graph_algebra;MuStrictSim;init;,[Default]), UsedName(gRange,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(feasibleMates,[Default]), UsedName(calculateTotalVertices,[Default]), UsedName(CHECK,[Default]), UsedName(mappings2,[Default]), UsedName(synchronized,[Default]), UsedName(dualFilter,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(test,[Default]), UsedName(merge,[Default]), UsedName(showMappings,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(countMappings,[Default]), UsedName(filterGraph,[Default]), UsedName(prune,[Default]), UsedName(mappings,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.graph_db.graph_algebra.MuStrictSim has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(test$default$2,[Default]), UsedName(calculateTotalEdges,[Default]), UsedName(hashCode,[Default]), UsedName(selectivityCriteria,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(feasibleMatesW,[Default]), UsedName(calculateBallDiameterMetrics,[Default]), UsedName(isInstanceOf,[Default]), UsedName(bijections,[Default]), UsedName(finalize,[Default]), UsedName(strictSim,[Default]), UsedName(asInstanceOf,[Default]), UsedName(disjoint,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(qRange,[Default]), UsedName(notifyAll,[Default]), UsedName(SELF_LOOPS,[Default]), UsedName(getClass,[Default]), UsedName(LIMIT,[Default]), UsedName(MuStrictSim,[Default]), UsedName(scalation;graph_db;graph_algebra;MuStrictSim;init;,[Default]), UsedName(gRange,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(feasibleMates,[Default]), UsedName(calculateTotalVertices,[Default]), UsedName(CHECK,[Default]), UsedName(mappings2,[Default]), UsedName(synchronized,[Default]), UsedName(dualFilter,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(test,[Default]), UsedName(merge,[Default]), UsedName(showMappings,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(countMappings,[Default]), UsedName(filterGraph,[Default]), UsedName(prune,[Default]), UsedName(mappings,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.graph_algebra.MuStrictSim)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.MGraphSimTest5...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.MGraphSimTest5)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.MGraphSimTest5)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.MGraphSimTest5,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(MGraphSimTest5,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.MGraphSimTest5 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(MGraphSimTest5,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.MGraphSimTest5)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.MinSpanningTree.Elem...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.MinSpanningTree.Elem)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.MinSpanningTree.Elem)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.MinSpanningTree.Elem,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(copy$default$1,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(Elem,[Default]), UsedName(canEqual,[Default]), UsedName(scalation;graph_db;MinSpanningTree;Elem;init;,[Default]), UsedName(curried,[Default]), UsedName(productPrefix,[Default]), UsedName(tupled,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(key,[Default]), UsedName(copy$default$2,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(unapply,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(apply,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(idx,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.MinSpanningTree.Elem has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(copy$default$1,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(Elem,[Default]), UsedName(canEqual,[Default]), UsedName(scalation;graph_db;MinSpanningTree;Elem;init;,[Default]), UsedName(curried,[Default]), UsedName(productPrefix,[Default]), UsedName(tupled,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(key,[Default]), UsedName(copy$default$2,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(unapply,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(apply,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(idx,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.MinSpanningTree.Elem)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.GraphGen...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.GraphGen)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.GraphGen)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.GraphGen,ModifiedNames(changes = UsedName(genRandomGraph_PowLabels$default$4,[Default]), UsedName(equals,[Default]), UsedName(genGraphs$default$6,[Default]), UsedName(genPowerGraphs,[Default]), UsedName(genPowerLawGraph_PowLabels$default$6,[Default]), UsedName(genGraph$default$5,[Default]), UsedName(hashCode,[Default]), UsedName(genGraph$default$6,[Default]), UsedName(genPowerGraphs$default$4,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(genPowerGraphs$default$2,[Default]), UsedName(genPowerGraphs$default$6,[Default]), UsedName(genRandomGraph,[Default]), UsedName(genGraphs$default$2,[Default]), UsedName(isInstanceOf,[Default]), UsedName(genPowerGraphs$default$8,[Default]), UsedName(genRandomGraph_PowLabels$default$6,[Default]), UsedName(finalize,[Default]), UsedName(extractSubgraph,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(genRandomGraph_PowLabels,[Default]), UsedName(!=,[Default]), UsedName(genPowerLawGraph_PowLabels$default$4,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(genBFSQuery$default$5,[Default]), UsedName(buildQGraph,[Default]), UsedName(genGraphs$default$7,[Default]), UsedName(genGraphs,[Default]), UsedName(genPowerGraphs$default$5,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(genPowerLawGraph$default$5,[Default]), UsedName(extractSubgraph$default$4,[Default]), UsedName(scalation;graph_db;GraphGen;init;,[Default]), UsedName(genGraph$default$2,[Default]), UsedName(genPowerGraphs$default$3,[Default]), UsedName(extractSubgraph$default$3,[Default]), UsedName(synchronized,[Default]), UsedName(genGraphs$default$4,[Default]), UsedName(genPowerLawGraph$default$6,[Default]), UsedName(genGraphs$default$3,[Default]), UsedName(extractSubgraph$default$5,[Default]), UsedName(toString,[Default]), UsedName(genGraphs$default$8,[Default]), UsedName(##,[Default]), UsedName(genRandomConnectedGraph,[Default]), UsedName(genPowerLawGraph_PowLabels,[Default]), UsedName(flaw,[Default]), UsedName(genRandomConnectedGraph$default$4,[Default]), UsedName(genGraph$default$4,[Default]), UsedName(wait,[Default]), UsedName(genRandomGraph$default$5,[Default]), UsedName(genGraph,[Default]), UsedName(genRandomGraph_PowLabels$default$5,[Default]), UsedName(genPowerLawGraph,[Default]), UsedName(genGraphs$default$5,[Default]), UsedName(setVariate,[Default]), UsedName(genBFSQuery$default$4,[Default]), UsedName(ne,[Default]), UsedName(genPowerLawGraph_PowLabels$default$5,[Default]), UsedName(genGraph$default$3,[Default]), UsedName(genRandomGraph$default$6,[Default]), UsedName(genRandomGraph$default$4,[Default]), UsedName(genRandomConnectedGraph$default$5,[Default]), UsedName(genBFSQuery,[Default]), UsedName(GraphGen,[Default]), UsedName(<init>$default$2,[Default]), UsedName(genPowerGraphs$default$7,[Default]), UsedName(genPowerLawGraph$default$4,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.GraphGen has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(genRandomGraph_PowLabels$default$4,[Default]), UsedName(equals,[Default]), UsedName(genGraphs$default$6,[Default]), UsedName(genPowerGraphs,[Default]), UsedName(genPowerLawGraph_PowLabels$default$6,[Default]), UsedName(genGraph$default$5,[Default]), UsedName(hashCode,[Default]), UsedName(genGraph$default$6,[Default]), UsedName(genPowerGraphs$default$4,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(genPowerGraphs$default$2,[Default]), UsedName(genPowerGraphs$default$6,[Default]), UsedName(genRandomGraph,[Default]), UsedName(genGraphs$default$2,[Default]), UsedName(isInstanceOf,[Default]), UsedName(genPowerGraphs$default$8,[Default]), UsedName(genRandomGraph_PowLabels$default$6,[Default]), UsedName(finalize,[Default]), UsedName(extractSubgraph,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(genRandomGraph_PowLabels,[Default]), UsedName(!=,[Default]), UsedName(genPowerLawGraph_PowLabels$default$4,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(genBFSQuery$default$5,[Default]), UsedName(buildQGraph,[Default]), UsedName(genGraphs$default$7,[Default]), UsedName(genGraphs,[Default]), UsedName(genPowerGraphs$default$5,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(genPowerLawGraph$default$5,[Default]), UsedName(extractSubgraph$default$4,[Default]), UsedName(scalation;graph_db;GraphGen;init;,[Default]), UsedName(genGraph$default$2,[Default]), UsedName(genPowerGraphs$default$3,[Default]), UsedName(extractSubgraph$default$3,[Default]), UsedName(synchronized,[Default]), UsedName(genGraphs$default$4,[Default]), UsedName(genPowerLawGraph$default$6,[Default]), UsedName(genGraphs$default$3,[Default]), UsedName(extractSubgraph$default$5,[Default]), UsedName(toString,[Default]), UsedName(genGraphs$default$8,[Default]), UsedName(##,[Default]), UsedName(genRandomConnectedGraph,[Default]), UsedName(genPowerLawGraph_PowLabels,[Default]), UsedName(flaw,[Default]), UsedName(genRandomConnectedGraph$default$4,[Default]), UsedName(genGraph$default$4,[Default]), UsedName(wait,[Default]), UsedName(genRandomGraph$default$5,[Default]), UsedName(genGraph,[Default]), UsedName(genRandomGraph_PowLabels$default$5,[Default]), UsedName(genPowerLawGraph,[Default]), UsedName(genGraphs$default$5,[Default]), UsedName(setVariate,[Default]), UsedName(genBFSQuery$default$4,[Default]), UsedName(ne,[Default]), UsedName(genPowerLawGraph_PowLabels$default$5,[Default]), UsedName(genGraph$default$3,[Default]), UsedName(genRandomGraph$default$6,[Default]), UsedName(genRandomGraph$default$4,[Default]), UsedName(genRandomConnectedGraph$default$5,[Default]), UsedName(genBFSQuery,[Default]), UsedName(GraphGen,[Default]), UsedName(<init>$default$2,[Default]), UsedName(genPowerGraphs$default$7,[Default]), UsedName(genPowerLawGraph$default$4,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.GraphGen)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.columnar_db.MM_RelationTest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.columnar_db.MM_RelationTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.columnar_db.MM_RelationTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.columnar_db.MM_RelationTest,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(weekend,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(MM_RelationTest,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(week,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(weekdays,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.columnar_db.MM_RelationTest has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(weekend,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(MM_RelationTest,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(week,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(weekdays,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.columnar_db.MM_RelationTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.graph_algebra.MuDualSim...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.graph_algebra.MuDualSim)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.graph_algebra.MuDualSim)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.graph_algebra.MuDualSim,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(test$default$2,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(feasibleMatesW,[Default]), UsedName(isInstanceOf,[Default]), UsedName(bijections,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(disjoint,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(qRange,[Default]), UsedName(notifyAll,[Default]), UsedName(SELF_LOOPS,[Default]), UsedName(getClass,[Default]), UsedName(LIMIT,[Default]), UsedName(MuDualSim,[Default]), UsedName(gRange,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(feasibleMates,[Default]), UsedName(CHECK,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(test,[Default]), UsedName(showMappings,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(countMappings,[Default]), UsedName(filterGraph,[Default]), UsedName(prune,[Default]), UsedName(mappings,[Default]), UsedName(scalation;graph_db;graph_algebra;MuDualSim;init;,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.graph_db.graph_algebra.MuDualSim has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(test$default$2,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(feasibleMatesW,[Default]), UsedName(isInstanceOf,[Default]), UsedName(bijections,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(disjoint,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(qRange,[Default]), UsedName(notifyAll,[Default]), UsedName(SELF_LOOPS,[Default]), UsedName(getClass,[Default]), UsedName(LIMIT,[Default]), UsedName(MuDualSim,[Default]), UsedName(gRange,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(feasibleMates,[Default]), UsedName(CHECK,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(test,[Default]), UsedName(showMappings,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(countMappings,[Default]), UsedName(filterGraph,[Default]), UsedName(prune,[Default]), UsedName(mappings,[Default]), UsedName(scalation;graph_db;graph_algebra;MuDualSim;init;,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.graph_algebra.MuDualSim)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.distributed_db.projectIn...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.distributed_db.projectIn)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.distributed_db.projectIn)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.distributed_db.RelationDBMaster: Set(UsedName(cNames,[Default]), UsedName(isInstanceOf,[Default]), UsedName(name,[Default]), UsedName(asInstanceOf,[Default]), UsedName(==,[Default]), UsedName(apply,[Default]), UsedName(projectIn,[Default]), UsedName(ne,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.distributed_db.RelationDBWorker: Set(UsedName(cNames,[Default]), UsedName(isInstanceOf,[Default]), UsedName(name,[Default]), UsedName(asInstanceOf,[Default]), UsedName(uc,[Default]), UsedName(==,[Default]), UsedName(apply,[Default]), UsedName(projectIn,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.distributed_db.projectIn,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(copy$default$1,[Default]), UsedName(hashCode,[Default]), UsedName(cNames,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(canEqual,[Default]), UsedName(curried,[Default]), UsedName(productPrefix,[Default]), UsedName(tupled,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(name,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(scalation;distributed_db;projectIn;init;,[Default]), UsedName(copy$default$2,[Default]), UsedName(uc,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(unapply,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(apply,[Default]), UsedName(projectIn,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(copy$default$3,[Default]), UsedName(ne,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 3 classes due to The scalation.distributed_db.projectIn has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(copy$default$1,[Default]), UsedName(hashCode,[Default]), UsedName(cNames,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(canEqual,[Default]), UsedName(curried,[Default]), UsedName(productPrefix,[Default]), UsedName(tupled,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(name,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(scalation;distributed_db;projectIn;init;,[Default]), UsedName(copy$default$2,[Default]), UsedName(uc,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(unapply,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(apply,[Default]), UsedName(projectIn,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(copy$default$3,[Default]), UsedName(ne,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.distributed_db.projectIn)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> by member reference: Set(scalation.distributed_db.RelationDBMaster, scalation.distributed_db.RelationDBWorker)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.MDualSimWTest3...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.MDualSimWTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.MDualSimWTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.MDualSimWTest3,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(MDualSimWTest3,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.MDualSimWTest3 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(MDualSimWTest3,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.MDualSimWTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.GraphGenTest5...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.GraphGenTest5)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.GraphGenTest5)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.GraphGenTest5,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(avDegree,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(gGen,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(nLabels,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(GraphGenTest5,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(nVertices,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.GraphGenTest5 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(avDegree,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(gGen,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(nLabels,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(GraphGenTest5,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(nVertices,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.GraphGenTest5)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.columnar_db.package...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.columnar_db.package)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.columnar_db.package)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.columnar_db.package,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(Predicate2,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(AggColumn,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(package,[Default]), UsedName(ne,[Default]), UsedName(Predicate,[Default]), UsedName(AggFunction,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.columnar_db.package has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(Predicate2,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(AggColumn,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(package,[Default]), UsedName(ne,[Default]), UsedName(Predicate,[Default]), UsedName(AggFunction,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.columnar_db.package)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.spatial.Matrix2D...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.spatial.Matrix2D)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.spatial.Matrix2D)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.spatial.Matrix2D,ModifiedNames(changes = UsedName(col$default$2,[Default]), UsedName(meanRNZ,[Default]), UsedName(setDiag$default$2,[Default]), UsedName(sumLower,[Default]), UsedName(:+,[Default]), UsedName(equals,[Default]), UsedName(+:,[Default]), UsedName(++^,[Default]), UsedName(trace,[Default]), UsedName(solve,[Default]), UsedName(set$default$3,[Default]), UsedName(hashCode,[Default]), UsedName(getDiag,[Default]), UsedName(min$default$1,[Default]), UsedName($isInstanceOf,[Default]), UsedName(reduce_ip,[Default]), UsedName(clone,[Default]), UsedName(isTridiagonal,[Default]), UsedName(inverse_ip,[Default]), UsedName(max$default$1,[Default]), UsedName(det,[Default]), UsedName(+^:,[Default]), UsedName(fString,[Default]), UsedName(times_ip_pre$default$2,[Default]), UsedName(-,[Default]), UsedName(**=,[Default]), UsedName(bsolve,[Default]), UsedName(t,[Default]), UsedName(**:,[Default]), UsedName(selectRowsEx,[Default]), UsedName(isInstanceOf,[Default]), UsedName(max,[Default]), UsedName(mean,[Default]), UsedName(finalize,[Default]), UsedName(sliceCol,[Default]), UsedName(inverse,[Default]), UsedName(*=,[Default]), UsedName(range2,[Default]), UsedName(asInstanceOf,[Default]), UsedName(update,[Default]), UsedName(setCol,[Default]), UsedName(map,[Default]), UsedName(v,[Default]), UsedName($asInstanceOf,[Default]), UsedName(*,[Default]), UsedName(++,[Default]), UsedName(setDiag,[Default]), UsedName(meanR,[Default]), UsedName(swap,[Default]), UsedName(toDouble,[Default]), UsedName(mag,[Default]), UsedName(!=,[Default]), UsedName(zero,[Default]), UsedName(zero$default$1,[Default]), UsedName(write,[Default]), UsedName(+,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(dot,[Default]), UsedName(normINF,[Default]), UsedName(selectRows,[Default]), UsedName(copy,[Default]), UsedName(dim2,[Default]), UsedName(lud_npp,[Default]), UsedName(clean$default$1,[Default]), UsedName(setFormat,[Default]), UsedName(swapCol$default$3,[Default]), UsedName(toDense,[Default]), UsedName(times_s,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(tip,[Default]), UsedName(upperT,[Default]), UsedName(*:,[Default]), UsedName(y,[Default]), UsedName(selectCols,[Default]), UsedName(swap$default$3,[Default]), UsedName(inverse_npp,[Default]), UsedName(toInt,[Default]), UsedName(clean$default$2,[Default]), UsedName(isBidiagonal,[Default]), UsedName(apply,[Default]), UsedName(times_d,[Default]), UsedName(v2,[Default]), UsedName(times_ip,[Default]), UsedName(foreach,[Default]), UsedName(meanNZ,[Default]), UsedName(**,[Default]), UsedName(reduce,[Default]), UsedName(Matrix2D,[Default]), UsedName(synchronized,[Default]), UsedName(~^,[Default]), UsedName(sameCrossDimensions,[Default]), UsedName(isSquare,[Default]), UsedName(times_ip_pre,[Default]), UsedName(set,[Default]), UsedName(toString,[Default]), UsedName(nullspace,[Default]), UsedName(/,[Default]), UsedName(lud_ip,[Default]), UsedName(##,[Default]), UsedName(isRectangular,[Default]), UsedName(-=,[Default]), UsedName(flaw,[Default]), UsedName(times,[Default]), UsedName(nullspace_ip,[Default]), UsedName(dim1,[Default]), UsedName(sumAbs,[Default]), UsedName(wait,[Default]), UsedName(/=,[Default]), UsedName(mdot,[Default]), UsedName(normalizeU,[Default]), UsedName(swapCol,[Default]), UsedName(diag$default$2,[Default]), UsedName(ne,[Default]), UsedName(normF,[Default]), UsedName(getDiag$default$1,[Default]), UsedName(sum,[Default]), UsedName(min,[Default]), UsedName(isSymmetric,[Default]), UsedName(+=,[Default]), UsedName(norm1,[Default]), UsedName(clean,[Default]), UsedName(lowerT,[Default]), UsedName(sameDimensions,[Default]), UsedName(scalation;spatial;Matrix2D;init;,[Default]), UsedName(col,[Default]), UsedName(leDimensions,[Default]), UsedName(:^+,[Default]), UsedName(sliceEx,[Default]), UsedName(x,[Default]), UsedName(diag,[Default]), UsedName(slice,[Default]), UsedName(range1,[Default]), UsedName(<init>$default$2,[Default]), UsedName(zero$default$2,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]), UsedName(isNonnegative,[Default]))) invalidates 1 classes due to The scalation.spatial.Matrix2D has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(col$default$2,[Default]), UsedName(meanRNZ,[Default]), UsedName(setDiag$default$2,[Default]), UsedName(sumLower,[Default]), UsedName(:+,[Default]), UsedName(equals,[Default]), UsedName(+:,[Default]), UsedName(++^,[Default]), UsedName(trace,[Default]), UsedName(solve,[Default]), UsedName(set$default$3,[Default]), UsedName(hashCode,[Default]), UsedName(getDiag,[Default]), UsedName(min$default$1,[Default]), UsedName($isInstanceOf,[Default]), UsedName(reduce_ip,[Default]), UsedName(clone,[Default]), UsedName(isTridiagonal,[Default]), UsedName(inverse_ip,[Default]), UsedName(max$default$1,[Default]), UsedName(det,[Default]), UsedName(+^:,[Default]), UsedName(fString,[Default]), UsedName(times_ip_pre$default$2,[Default]), UsedName(-,[Default]), UsedName(**=,[Default]), UsedName(bsolve,[Default]), UsedName(t,[Default]), UsedName(**:,[Default]), UsedName(selectRowsEx,[Default]), UsedName(isInstanceOf,[Default]), UsedName(max,[Default]), UsedName(mean,[Default]), UsedName(finalize,[Default]), UsedName(sliceCol,[Default]), UsedName(inverse,[Default]), UsedName(*=,[Default]), UsedName(range2,[Default]), UsedName(asInstanceOf,[Default]), UsedName(update,[Default]), UsedName(setCol,[Default]), UsedName(map,[Default]), UsedName(v,[Default]), UsedName($asInstanceOf,[Default]), UsedName(*,[Default]), UsedName(++,[Default]), UsedName(setDiag,[Default]), UsedName(meanR,[Default]), UsedName(swap,[Default]), UsedName(toDouble,[Default]), UsedName(mag,[Default]), UsedName(!=,[Default]), UsedName(zero,[Default]), UsedName(zero$default$1,[Default]), UsedName(write,[Default]), UsedName(+,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(dot,[Default]), UsedName(normINF,[Default]), UsedName(selectRows,[Default]), UsedName(copy,[Default]), UsedName(dim2,[Default]), UsedName(lud_npp,[Default]), UsedName(clean$default$1,[Default]), UsedName(setFormat,[Default]), UsedName(swapCol$default$3,[Default]), UsedName(toDense,[Default]), UsedName(times_s,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(tip,[Default]), UsedName(upperT,[Default]), UsedName(*:,[Default]), UsedName(y,[Default]), UsedName(selectCols,[Default]), UsedName(swap$default$3,[Default]), UsedName(inverse_npp,[Default]), UsedName(toInt,[Default]), UsedName(clean$default$2,[Default]), UsedName(isBidiagonal,[Default]), UsedName(apply,[Default]), UsedName(times_d,[Default]), UsedName(v2,[Default]), UsedName(times_ip,[Default]), UsedName(foreach,[Default]), UsedName(meanNZ,[Default]), UsedName(**,[Default]), UsedName(reduce,[Default]), UsedName(Matrix2D,[Default]), UsedName(synchronized,[Default]), UsedName(~^,[Default]), UsedName(sameCrossDimensions,[Default]), UsedName(isSquare,[Default]), UsedName(times_ip_pre,[Default]), UsedName(set,[Default]), UsedName(toString,[Default]), UsedName(nullspace,[Default]), UsedName(/,[Default]), UsedName(lud_ip,[Default]), UsedName(##,[Default]), UsedName(isRectangular,[Default]), UsedName(-=,[Default]), UsedName(flaw,[Default]), UsedName(times,[Default]), UsedName(nullspace_ip,[Default]), UsedName(dim1,[Default]), UsedName(sumAbs,[Default]), UsedName(wait,[Default]), UsedName(/=,[Default]), UsedName(mdot,[Default]), UsedName(normalizeU,[Default]), UsedName(swapCol,[Default]), UsedName(diag$default$2,[Default]), UsedName(ne,[Default]), UsedName(normF,[Default]), UsedName(getDiag$default$1,[Default]), UsedName(sum,[Default]), UsedName(min,[Default]), UsedName(isSymmetric,[Default]), UsedName(+=,[Default]), UsedName(norm1,[Default]), UsedName(clean,[Default]), UsedName(lowerT,[Default]), UsedName(sameDimensions,[Default]), UsedName(scalation;spatial;Matrix2D;init;,[Default]), UsedName(col,[Default]), UsedName(leDimensions,[Default]), UsedName(:^+,[Default]), UsedName(sliceEx,[Default]), UsedName(x,[Default]), UsedName(diag,[Default]), UsedName(slice,[Default]), UsedName(range1,[Default]), UsedName(<init>$default$2,[Default]), UsedName(zero$default$2,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]), UsedName(isNonnegative,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.spatial.Matrix2D)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.ExampleGraphS...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.ExampleGraphS)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.ExampleGraphS)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.ExampleGraphS,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(ExampleGraphS,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(g4p,[Default]), UsedName(q4p,[Default]), UsedName(q3p,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(g4,[Default]), UsedName(q2,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(g1,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g2p,[Default]), UsedName(g3p,[Default]), UsedName(q3,[Default]), UsedName(synchronized,[Default]), UsedName(g2,[Default]), UsedName(q4,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(q1,[Default]), UsedName(q1p,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(g1p,[Default]), UsedName(q2p,[Default]), UsedName(g3,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.graph_db.ExampleGraphS has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(ExampleGraphS,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(g4p,[Default]), UsedName(q4p,[Default]), UsedName(q3p,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(g4,[Default]), UsedName(q2,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(g1,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g2p,[Default]), UsedName(g3p,[Default]), UsedName(q3,[Default]), UsedName(synchronized,[Default]), UsedName(g2,[Default]), UsedName(q4,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(q1,[Default]), UsedName(q1p,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(g1p,[Default]), UsedName(q2p,[Default]), UsedName(g3,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.ExampleGraphS)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.graph_algebra.Neo4j...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.graph_algebra.Neo4j)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.graph_algebra.Neo4j)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.graph_algebra.Neo4j,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(deleteAll,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(createGraph,[Default]), UsedName(close,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(Neo4j,[Default]), UsedName(ne,[Default]), UsedName(runQuery,[Default]), UsedName(scalation;graph_db;graph_algebra;Neo4j;init;,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.graph_db.graph_algebra.Neo4j has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(deleteAll,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(createGraph,[Default]), UsedName(close,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(Neo4j,[Default]), UsedName(ne,[Default]), UsedName(runQuery,[Default]), UsedName(scalation;graph_db;graph_algebra;Neo4j;init;,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.graph_algebra.Neo4j)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.DualSim2Test2...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.DualSim2Test2)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.DualSim2Test2)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.DualSim2Test2,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(DualSim2Test2,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.DualSim2Test2 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(DualSim2Test2,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.DualSim2Test2)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.MDualSimCARTest4...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.MDualSimCARTest4)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.MDualSimCARTest4)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.MDualSimCARTest4,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(MDualSimCARTest4,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.MDualSimCARTest4 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(MDualSimCARTest4,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.MDualSimCARTest4)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.image.Tracker...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.image.Tracker)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.image.Tracker)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.image.Tracker,ModifiedNames(changes = UsedName(outside,[Default]), UsedName(equals,[Default]), UsedName(a1,[Default]), UsedName(hashCode,[Default]), UsedName(err,[Default]), UsedName(d_dy,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(d_dx,[Default]), UsedName(Tracker,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(limit,[Default]), UsedName(asInstanceOf,[Default]), UsedName(grad,[Default]), UsedName($asInstanceOf,[Default]), UsedName(shift,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(a3,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(optimize,[Default]), UsedName(flaw,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(shift$default$4,[Default]), UsedName(r_directions,[Default]), UsedName(q_directions,[Default]), UsedName(a4,[Default]), UsedName(eq,[Default]), UsedName(a2,[Default]), UsedName($init$,[Default]), UsedName(scalation;image;Tracker;init;,[Default]))) invalidates 1 classes due to The scalation.image.Tracker has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(outside,[Default]), UsedName(equals,[Default]), UsedName(a1,[Default]), UsedName(hashCode,[Default]), UsedName(err,[Default]), UsedName(d_dy,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(d_dx,[Default]), UsedName(Tracker,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(limit,[Default]), UsedName(asInstanceOf,[Default]), UsedName(grad,[Default]), UsedName($asInstanceOf,[Default]), UsedName(shift,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(a3,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(optimize,[Default]), UsedName(flaw,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(shift$default$4,[Default]), UsedName(r_directions,[Default]), UsedName(q_directions,[Default]), UsedName(a4,[Default]), UsedName(eq,[Default]), UsedName(a2,[Default]), UsedName($init$,[Default]), UsedName(scalation;image;Tracker;init;,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.image.Tracker)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graphalytics.APShortestPath...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graphalytics.APShortestPath)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graphalytics.APShortestPath)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graphalytics.APShortestPath,ModifiedNames(changes = UsedName(diam,[Default]), UsedName(equals,[Default]), UsedName(scalation;graphalytics;APShortestPath;init;,[Default]), UsedName(hashCode,[Default]), UsedName(rad,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(rang,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(ecc,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(apply,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(spath,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(APShortestPath,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.graphalytics.APShortestPath has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(diam,[Default]), UsedName(equals,[Default]), UsedName(scalation;graphalytics;APShortestPath;init;,[Default]), UsedName(hashCode,[Default]), UsedName(rad,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(rang,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(ecc,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(apply,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(spath,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(APShortestPath,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graphalytics.APShortestPath)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.columnar_db.ImputeNormal...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.columnar_db.ImputeNormal)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.columnar_db.ImputeNormal)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.columnar_db.ImputeNormal,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(impute,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(ImputeNormal,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.columnar_db.ImputeNormal has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(impute,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(ImputeNormal,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.columnar_db.ImputeNormal)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.MGraphTest2...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.MGraphTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.MGraphTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.MGraphTest2,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(MGraphTest2,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.MGraphTest2 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(MGraphTest2,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.MGraphTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.MGraphTest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.MGraphTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.MGraphTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.MGraphTest,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(MGraphTest,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.MGraphTest has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(MGraphTest,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.MGraphTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.MDualSim2WTest4...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.MDualSim2WTest4)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.MDualSim2WTest4)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.MDualSim2WTest4,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(MDualSim2WTest4,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.MDualSim2WTest4 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(MDualSim2WTest4,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.MDualSim2WTest4)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.MGraphGenTest6...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.MGraphGenTest6)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.MGraphGenTest6)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.MGraphGenTest6,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(MGraphGenTest6,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.MGraphGenTest6 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(MGraphGenTest6,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.MGraphGenTest6)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.test.StrictPattern_STest3...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.test.StrictPattern_STest3)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.test.StrictPattern_STest3)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.test.StrictPattern_STest3,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(gLabels,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(gDegree,[Default]), UsedName(inverse,[Default]), UsedName(UNIFORM,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(qSize,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(qDegree,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(StrictPattern_STest3,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.test.StrictPattern_STest3 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(gLabels,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(gDegree,[Default]), UsedName(inverse,[Default]), UsedName(UNIFORM,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(qSize,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(qDegree,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(StrictPattern_STest3,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.test.StrictPattern_STest3)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.BoundedTreeWidthBNTest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.BoundedTreeWidthBNTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.BoundedTreeWidthBNTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.BoundedTreeWidthBNTest,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(BoundedTreeWidthBNTest,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(bbn,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(g_out,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(g_in,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.BoundedTreeWidthBNTest has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(BoundedTreeWidthBNTest,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(bbn,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(g_out,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(g_in,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.BoundedTreeWidthBNTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.dist_db.RelDBMasterTest5...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.dist_db.RelDBMasterTest5)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.dist_db.RelDBMasterTest5)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.dist_db.RelDBMasterTest5,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(actorSystem,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(RelDBMasterTest5,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(actor,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.dist_db.RelDBMasterTest5 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(actorSystem,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(RelDBMasterTest5,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(actor,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.dist_db.RelDBMasterTest5)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.dist_db.intersect...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.dist_db.intersect)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.dist_db.intersect)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.dist_db.RelDBMaster: Set(UsedName(intersect,[Default]), UsedName(isInstanceOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(rName,[Default]), UsedName(==,[Default]), UsedName(apply,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(r,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.dist_db.intersect,ModifiedNames(changes = UsedName(scalation;dist_db;intersect;init;,[Default]), UsedName(equals,[Default]), UsedName(copy$default$1,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(intersect,[Default]), UsedName(canEqual,[Default]), UsedName(curried,[Default]), UsedName(productPrefix,[Default]), UsedName(tupled,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(copy$default$2,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(rName,[Default]), UsedName(getClass,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(unapply,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(apply,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(copy$default$3,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(r,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 2 classes due to The scalation.dist_db.intersect has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(scalation;dist_db;intersect;init;,[Default]), UsedName(equals,[Default]), UsedName(copy$default$1,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(intersect,[Default]), UsedName(canEqual,[Default]), UsedName(curried,[Default]), UsedName(productPrefix,[Default]), UsedName(tupled,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(copy$default$2,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(rName,[Default]), UsedName(getClass,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(unapply,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(apply,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(copy$default$3,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(r,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.dist_db.intersect)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> by member reference: Set(scalation.dist_db.RelDBMaster)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.image.KLT...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.image.KLT)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.image.KLT)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.image.KLT,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName(scalation;image;KLT;init;,[Default]), UsedName(err,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(KLT,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(optimize,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.image.KLT has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName(scalation;image;KLT;init;,[Default]), UsedName(err,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(KLT,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(optimize,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.image.KLT)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.columnar_db.OutlierTest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.columnar_db.OutlierTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.columnar_db.OutlierTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.columnar_db.OutlierTest,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(ps,[Default]), UsedName(OutlierTest,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(p,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.columnar_db.OutlierTest has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(ps,[Default]), UsedName(OutlierTest,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(p,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.columnar_db.OutlierTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.scala3d.Xform...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.scala3d.Xform)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.scala3d.Xform)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.scala3d.Xform,ModifiedNames(changes = UsedName(autosize,[Default]), UsedName(impl_traversalEngineProperty,[Default]), UsedName(onKeyTypedProperty,[Default]), UsedName(blendModeProperty,[Default]), UsedName(impl_toBack,[Default]), UsedName(getId,[Default]), UsedName(getTranslateZ,[Default]), UsedName(getOnZoom,[Default]), UsedName(getOnSwipeUp,[Default]), UsedName(equals,[Default]), UsedName(getOnDragDone,[Default]), UsedName(ip,[Default]), UsedName(impl_getPivotY,[Default]), UsedName(minWidth,[Default]), UsedName(setAccessibleText,[Default]), UsedName(setFocused,[Default]), UsedName(isNeedsLayout,[Default]), UsedName(getOnMouseReleased,[Default]), UsedName(getOnZoomFinished,[Default]), UsedName(setStyle,[Default]), UsedName(getOnMouseExited,[Default]), UsedName(getLocalToSceneTransform,[Default]), UsedName(onScrollFinishedProperty,[Default]), UsedName(rx,[Default]), UsedName(setOnMouseMoved,[Default]), UsedName(computeMinHeight,[Default]), UsedName(maxWidth,[Default]), UsedName(setScale,[Default]), UsedName(removeEventFilter,[Default]), UsedName(impl_setStyleMap,[Default]), UsedName(maxHeight,[Default]), UsedName(isPressed,[Default]), UsedName(hashCode,[Default]), UsedName(getTransforms,[Default]), UsedName(setOnScrollStarted,[Default]), UsedName(setOnMouseExited,[Default]), UsedName(setRotate,[Default]), UsedName(isFocused,[Default]), UsedName(inputMethodRequestsProperty,[Default]), UsedName(setTx,[Default]), UsedName(setTranslate,[Default]), UsedName(prefWidth,[Default]), UsedName(impl_pickNodeLocal,[Default]), UsedName(setInputMethodRequests,[Default]), UsedName(setOnRotationFinished,[Default]), UsedName(onScrollStartedProperty,[Default]), UsedName(accessibilityProperties,[Default]), UsedName(setAutoSizeChildren,[Default]), UsedName(styleProperty,[Default]), UsedName(setOnContextMenuRequested,[Default]), UsedName(translateXProperty,[Default]), UsedName(getGeomBounds,[Default]), UsedName(rotationAxisProperty,[Default]), UsedName(effectiveNodeOrientationProperty,[Default]), UsedName(onZoomStartedProperty,[Default]), UsedName(setDerivedDepthTest,[Default]), UsedName($isInstanceOf,[Default]), UsedName(resizeRelocate,[Default]), UsedName(layoutChildren,[Default]), UsedName(setRx,[Default]), UsedName(containsBounds,[Default]), UsedName(getOnRotationStarted,[Default]), UsedName(getOnDragOver,[Default]), UsedName(validatePG,[Default]), UsedName(clone,[Default]), UsedName(getBaselineOffset,[Default]), UsedName(cacheHintProperty,[Default]), UsedName(getOnZoomStarted,[Default]), UsedName(impl_toFront,[Default]), UsedName(onMouseReleasedProperty,[Default]), UsedName(impl_geomChanged,[Default]), UsedName(childVisibilityChanged,[Default]), UsedName(notifyAccessibleAttributeChanged,[Default]), UsedName(requestFocus,[Default]), UsedName(effectProperty,[Default]), UsedName(onMousePressedProperty,[Default]), UsedName(setOnKeyTyped,[Default]), UsedName(pickOnBoundsProperty,[Default]), UsedName(impl_createPeer,[Default]), UsedName(isVisible,[Default]), UsedName(setOnSwipeDown,[Default]), UsedName(boundsInLocalProperty,[Default]), UsedName(impl_hasTransforms,[Default]), UsedName(onSwipeDownProperty,[Default]), UsedName(setOnKeyReleased,[Default]), UsedName(isDisable,[Default]), UsedName(setOnMouseDragEntered,[Default]), UsedName(getOnTouchPressed,[Default]), UsedName(onMouseDragExitedProperty,[Default]), UsedName(addEventHandler,[Default]), UsedName(pseudoClassStateChanged,[Default]), UsedName(onDragDoneProperty,[Default]), UsedName(disableProperty,[Default]), UsedName(updateGeomBounds,[Default]), UsedName(toFront,[Default]), UsedName(setOnTouchReleased,[Default]), UsedName(impl_processMXNode,[Default]), UsedName(setOnMouseDragged,[Default]), UsedName(layoutYProperty,[Default]), UsedName(setTy,[Default]), UsedName(t,[Default]), UsedName(setOnMouseReleased,[Default]), UsedName(setNeedsLayout,[Default]), UsedName(boundsInParentProperty,[Default]), UsedName(getLocalToParentTransform,[Default]), UsedName(getSubScene,[Default]), UsedName(impl_isDirty,[Default]), UsedName(impl_notifyLayoutBoundsChanged,[Default]), UsedName(onDragDroppedProperty,[Default]), UsedName(getOnContextMenuRequested,[Default]), UsedName(impl_traverse,[Default]), UsedName(isInstanceOf,[Default]), UsedName(isResizable,[Default]), UsedName(impl_getLeafTransform,[Default]), UsedName(setLayoutX,[Default]), UsedName(setOnMousePressed,[Default]), UsedName(hoverProperty,[Default]), UsedName(getOnScroll,[Default]), UsedName(setCacheHint,[Default]), UsedName(getOnTouchReleased,[Default]), UsedName(setUserData,[Default]), UsedName(boundedSize,[Default]), UsedName(sceneToLocal,[Default]), UsedName(getManagedChildren,[Default]), UsedName(updateBounds,[Default]), UsedName(getCursor,[Default]), UsedName(scaleYProperty,[Default]), UsedName(mouseTransparentProperty,[Default]), UsedName(onMouseClickedProperty,[Default]), UsedName(finalize,[Default]), UsedName(getTransformedBounds,[Default]), UsedName(setScaleX,[Default]), UsedName(localToParent,[Default]), UsedName(getParent,[Default]), UsedName(onContextMenuRequestedProperty,[Default]), UsedName(updateLocalToParentTransform,[Default]), UsedName(setOnScrollFinished,[Default]), UsedName(setOnDragOver,[Default]), UsedName(asInstanceOf,[Default]), UsedName(layoutFlag,[Default]), UsedName(needsLayoutProperty,[Default]), UsedName(setDisabled,[Default]), UsedName(FocusedProperty,[Default]), UsedName(getStyle,[Default]), UsedName($asInstanceOf,[Default]), UsedName(prefHeight,[Default]), UsedName(impl_cssGetFocusTraversableInitialValue,[Default]), UsedName(setOnZoom,[Default]), UsedName(getOnKeyReleased,[Default]), UsedName(impl_computeIntersects,[Default]), UsedName(eventDispatcherProperty,[Default]), UsedName(ry,[Default]), UsedName(getTranslateY,[Default]), UsedName(sceneProperty,[Default]), UsedName(setOnSwipeLeft,[Default]), UsedName(getAccessible,[Default]), UsedName(pseudoClassStates,[Default]), UsedName(onDragDetectedProperty,[Default]), UsedName(lookup,[Default]), UsedName(setOnSwipeRight,[Default]), UsedName(cacheProperty,[Default]), UsedName(impl_computeGeomBounds,[Default]), UsedName(getStylesheets,[Default]), UsedName(!=,[Default]), UsedName(notifyParentOfBoundsChange,[Default]), UsedName(parentResolvedOrientationInvalidated,[Default]), UsedName(computePrefWidth,[Default]), UsedName(impl_treeVisibleProperty,[Default]), UsedName(executeAccessibleAction,[Default]), UsedName(onInputMethodTextChangedProperty,[Default]), UsedName(impl_computeContains,[Default]), UsedName(getCssMetaData,[Default]), UsedName(getLocalBounds,[Default]), UsedName(notifyAll,[Default]), UsedName(translateZProperty,[Default]), UsedName(getOnMousePressed,[Default]), UsedName(setSy,[Default]), UsedName(setOnMouseDragOver,[Default]), UsedName(getStyleClass,[Default]), UsedName(onDragOverProperty,[Default]), UsedName(getOnInputMethodTextChanged,[Default]), UsedName(resize,[Default]), UsedName(setSx,[Default]), UsedName(setFocusTraversable,[Default]), UsedName(setOnMouseDragExited,[Default]), UsedName(onDragExitedProperty,[Default]), UsedName(getClass,[Default]), UsedName(notifyParentsOfInvalidatedCSS,[Default]), UsedName(s,[Default]), UsedName(getOnMouseDragExited,[Default]), UsedName(getEffect,[Default]), UsedName(setVisible,[Default]), UsedName(impl_layoutBoundsChanged,[Default]), UsedName(setOnTouchMoved,[Default]), UsedName(setOnDragDone,[Default]), UsedName(onSwipeLeftProperty,[Default]), UsedName(markDirtyLayoutBranch,[Default]), UsedName(setOnMouseClicked,[Default]), UsedName(setAccessibleRoleDescription,[Default]), UsedName(setOnDragDropped,[Default]), UsedName(test_getRemoved,[Default]), UsedName(requestLayout,[Default]), UsedName(contains,[Default]), UsedName(getClipParent,[Default]), UsedName(styleHelper,[Default]), UsedName(nodeResolvedOrientationChanged,[Default]), UsedName(localToScreen,[Default]), UsedName(startDragAndDrop,[Default]), UsedName(getOnDragDropped,[Default]), UsedName(disabledProperty,[Default]), UsedName(getBoundsInParent,[Default]), UsedName(getBlendMode,[Default]), UsedName(nodeResolvedOrientationInvalidated,[Default]), UsedName(TreeVisiblePropertyReadOnly,[Default]), UsedName(getOnKeyTyped,[Default]), UsedName(onMouseDraggedProperty,[Default]), UsedName(onKeyPressedProperty,[Default]), UsedName(getCSSFlags,[Default]), UsedName(managedChildChanged,[Default]), UsedName(localToScene,[Default]), UsedName(setRotationAxis,[Default]), UsedName(translateYProperty,[Default]), UsedName(snapshot,[Default]), UsedName(accessibleRoleDescriptionProperty,[Default]), UsedName(reset,[Default]), UsedName(getOnDragExited,[Default]), UsedName(isCanReceiveFocus,[Default]), UsedName(opacityProperty,[Default]), UsedName(==,[Default]), UsedName(isDisabled,[Default]), UsedName(notify,[Default]), UsedName(isManaged,[Default]), UsedName(minHeight,[Default]), UsedName(idProperty,[Default]), UsedName(setSz,[Default]), UsedName(getLayoutBounds,[Default]), UsedName(isSceneRoot,[Default]), UsedName(setLayoutFlag,[Default]), UsedName(isDerivedDepthTest,[Default]), UsedName(getScene,[Default]), UsedName(setOnTouchPressed,[Default]), UsedName(getNodeOrientation,[Default]), UsedName(getPseudoClassStates,[Default]), UsedName(accessibleHelpProperty,[Default]), UsedName(setParent,[Default]), UsedName(parentProperty,[Default]), UsedName(getLayoutX,[Default]), UsedName(getOpacity,[Default]), UsedName(onMouseDragEnteredProperty,[Default]), UsedName(setDepthTest,[Default]), UsedName(setScaleZ,[Default]), UsedName(impl_updatePeer,[Default]), UsedName(setOnDragExited,[Default]), UsedName(setScaleY,[Default]), UsedName(getOnDragEntered,[Default]), UsedName(focusTraversableProperty,[Default]), UsedName(impl_getPivotZ,[Default]), UsedName(scalation;scala3d;Xform;init;,[Default]), UsedName(getContentBias,[Default]), UsedName(fireEvent,[Default]), UsedName(accessibleTextProperty,[Default]), UsedName(getOnMouseEntered,[Default]), UsedName(buildEventDispatchChain,[Default]), UsedName(impl_isTreeVisible,[Default]), UsedName(impl_getAllParentStylesheets,[Default]), UsedName(setCursor,[Default]), UsedName(usesMirroring,[Default]), UsedName(hasProperties,[Default]), UsedName(getAccessibleHelp,[Default]), UsedName(impl_intersectsBounds,[Default]), UsedName(rotateOrder,[Default]), UsedName(layoutRoot,[Default]), UsedName(focusedProperty,[Default]), UsedName(synchronized,[Default]), UsedName(Xform,[Default]), UsedName(setScenes,[Default]), UsedName(accessible,[Default]), UsedName(hasMirroring,[Default]), UsedName(onMouseDragOverProperty,[Default]), UsedName(queryAccessibleAttribute,[Default]), UsedName(onMouseMovedProperty,[Default]), UsedName(getDepthTest,[Default]), UsedName(setOnRotate,[Default]), UsedName(impl_markDirty,[Default]), UsedName(getCacheHint,[Default]), UsedName(getOnMouseDragEntered,[Default]), UsedName(getOnDragDetected,[Default]), UsedName(nodeOrientationProperty,[Default]), UsedName(getOnSwipeDown,[Default]), UsedName(setOnKeyPressed,[Default]), UsedName(toString,[Default]), UsedName(getRx,[Default]), UsedName(getScaleX,[Default]), UsedName(getOnRotationFinished,[Default]), UsedName(getOnTouchStationary,[Default]), UsedName(resetTSP,[Default]), UsedName(isHover,[Default]), UsedName(localBoundsChanged,[Default]), UsedName(getInputMethodRequests,[Default]), UsedName(##,[Default]), UsedName(setPickOnBounds,[Default]), UsedName(getChildren,[Default]), UsedName(getBoundsInLocal,[Default]), UsedName(getProperties,[Default]), UsedName(intersects,[Default]), UsedName(getOnScrollFinished,[Default]), UsedName(releaseAccessible,[Default]), UsedName(computeAreaInScreen,[Default]), UsedName(setImpl_traversalEngine,[Default]), UsedName(parentToLocal,[Default]), UsedName(getOnRotate,[Default]), UsedName(setPivot,[Default]), UsedName(setTreeVisible,[Default]), UsedName(impl_isDirtyEmpty,[Default]), UsedName(setRy,[Default]), UsedName(isMouseTransparent,[Default]), UsedName(processCSS,[Default]), UsedName(setClip,[Default]), UsedName(getAccessibleRoleDescription,[Default]), UsedName(getStyleableParent,[Default]), UsedName(getRy,[Default]), UsedName(getScaleY,[Default]), UsedName(requestParentLayout,[Default]), UsedName(wait,[Default]), UsedName(setDisable,[Default]), UsedName(impl_syncPeer,[Default]), UsedName(visibleProperty,[Default]), UsedName(getCurrentLocalToSceneTransformState,[Default]), UsedName(printSeq,[Default]), UsedName(setOnSwipeUp,[Default]), UsedName(setId,[Default]), UsedName(startFullDrag,[Default]), UsedName(getScaleZ,[Default]), UsedName(impl_computeLayoutBounds,[Default]), UsedName(onSwipeUpProperty,[Default]), UsedName(scenesChanged,[Default]), UsedName(getImpl_traversalEngine,[Default]), UsedName(getRotate,[Default]), UsedName(setMouseTransparent,[Default]), UsedName(isCache,[Default]), UsedName(setAccessibleHelp,[Default]), UsedName(notifyManagedChanged,[Default]), UsedName(getChildrenUnmodifiable,[Default]), UsedName(onKeyReleasedProperty,[Default]), UsedName(impl_showMnemonicsProperty,[Default]), UsedName(setOnInputMethodTextChanged,[Default]), UsedName(layoutBoundsProperty,[Default]), UsedName(getTypeSelector,[Default]), UsedName(getEffectiveNodeOrientation,[Default]), UsedName(getUserData,[Default]), UsedName(isPickOnBounds,[Default]), UsedName(setOnScroll,[Default]), UsedName(onRotationStartedProperty,[Default]), UsedName(impl_getPivotX,[Default]), UsedName(getAccessibleRole,[Default]), UsedName(ne,[Default]), UsedName(getRotationAxis,[Default]), UsedName(autoSizeChildrenProperty,[Default]), UsedName(managedProperty,[Default]), UsedName(childBoundsChanged,[Default]), UsedName(getOnTouchMoved,[Default]), UsedName(localToSceneTransformProperty,[Default]), UsedName(onRotateProperty,[Default]), UsedName(screenToLocal,[Default]), UsedName(setTz,[Default]), UsedName(onScrollProperty,[Default]), UsedName(indent,[Default]), UsedName(getClip,[Default]), UsedName(relocate,[Default]), UsedName(impl_getPeer,[Default]), UsedName(getOnSwipeLeft,[Default]), UsedName(updateTxBounds,[Default]), UsedName(setManaged,[Default]), UsedName(setOnDragDetected,[Default]), UsedName(setNodeOrientation,[Default]), UsedName(setOnMouseEntered,[Default]), UsedName(getOnMouseClicked,[Default]), UsedName(setOnZoomStarted,[Default]), UsedName(impl_findStyles,[Default]), UsedName(onTouchStationaryProperty,[Default]), UsedName(setTranslateZ,[Default]), UsedName(impl_reapplyCSS,[Default]), UsedName(impl_clearDirty,[Default]), UsedName(getOnMouseDragged,[Default]), UsedName(layoutXProperty,[Default]), UsedName(getOnMouseDragReleased,[Default]), UsedName(onMouseDragReleasedProperty,[Default]), UsedName(impl_transformsChanged,[Default]), UsedName(setOnRotationStarted,[Default]), UsedName(setEventHandler,[Default]), UsedName(getEventDispatcher,[Default]), UsedName(getRz,[Default]), UsedName(accessibleRoleProperty,[Default]), UsedName(depthTestProperty,[Default]), UsedName(applyCss,[Default]), UsedName(getOnSwipeRight,[Default]), UsedName(computeDerivedDepthTest,[Default]), UsedName(computePrefHeight,[Default]), UsedName(setRz,[Default]), UsedName(onSwipeRightProperty,[Default]), UsedName(setEventDispatcher,[Default]), UsedName(setOnDragEntered,[Default]), UsedName(removeEventHandler,[Default]), UsedName(impl_setShowMnemonics,[Default]), UsedName(onRotationFinishedProperty,[Default]), UsedName(impl_cssGetCursorInitialValue,[Default]), UsedName(setOnTouchStationary,[Default]), UsedName(impl_pickNode,[Default]), UsedName(setLayoutY,[Default]), UsedName(lookupAll,[Default]), UsedName(scaleZProperty,[Default]), UsedName(rotateProperty,[Default]), UsedName(onTouchReleasedProperty,[Default]), UsedName(pressedProperty,[Default]), UsedName(setCache,[Default]), UsedName(onZoomProperty,[Default]), UsedName(boundsChanged,[Default]), UsedName(impl_processCSS,[Default]), UsedName(setAccessibleRole,[Default]), UsedName(computeMinWidth,[Default]), UsedName(clearSizeCache,[Default]), UsedName(setPressed,[Default]), UsedName(getAccessibleText,[Default]), UsedName(isConnected,[Default]), UsedName(onTouchMovedProperty,[Default]), UsedName(setOpacity,[Default]), UsedName(impl_isShowMnemonics,[Default]), UsedName(onDragEnteredProperty,[Default]), UsedName(clipProperty,[Default]), UsedName(scaleXProperty,[Default]), UsedName(cursorProperty,[Default]), UsedName(toBack,[Default]), UsedName(setEffect,[Default]), UsedName(setOnMouseDragReleased,[Default]), UsedName(getOnMouseMoved,[Default]), UsedName(onMouseExitedProperty,[Default]), UsedName(rz,[Default]), UsedName(layout,[Default]), UsedName(wouldCreateCycle,[Default]), UsedName(setTranslateX,[Default]), UsedName(getLayoutY,[Default]), UsedName(setTranslateY,[Default]), UsedName(setOnZoomFinished,[Default]), UsedName(onMouseEnteredProperty,[Default]), UsedName(cssFlag,[Default]), UsedName(impl_intersects,[Default]), UsedName(getOnKeyPressed,[Default]), UsedName(p,[Default]), UsedName(getOnMouseDragOver,[Default]), UsedName(onTouchPressedProperty,[Default]), UsedName(getOnScrollStarted,[Default]), UsedName(setHover,[Default]), UsedName(getTranslateX,[Default]), UsedName(onZoomFinishedProperty,[Default]), UsedName(setBlendMode,[Default]), UsedName(addEventFilter,[Default]), UsedName(transformedBoundsChanged,[Default]), UsedName(performingLayout,[Default]), UsedName(eq,[Default]), UsedName(isAutoSizeChildren,[Default]), UsedName(impl_getStyleMap,[Default]), UsedName(localToParentTransformProperty,[Default]), UsedName(isFocusTraversable,[Default]))) invalidates 1 classes due to The scalation.scala3d.Xform has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(autosize,[Default]), UsedName(impl_traversalEngineProperty,[Default]), UsedName(onKeyTypedProperty,[Default]), UsedName(blendModeProperty,[Default]), UsedName(impl_toBack,[Default]), UsedName(getId,[Default]), UsedName(getTranslateZ,[Default]), UsedName(getOnZoom,[Default]), UsedName(getOnSwipeUp,[Default]), UsedName(equals,[Default]), UsedName(getOnDragDone,[Default]), UsedName(ip,[Default]), UsedName(impl_getPivotY,[Default]), UsedName(minWidth,[Default]), UsedName(setAccessibleText,[Default]), UsedName(setFocused,[Default]), UsedName(isNeedsLayout,[Default]), UsedName(getOnMouseReleased,[Default]), UsedName(getOnZoomFinished,[Default]), UsedName(setStyle,[Default]), UsedName(getOnMouseExited,[Default]), UsedName(getLocalToSceneTransform,[Default]), UsedName(onScrollFinishedProperty,[Default]), UsedName(rx,[Default]), UsedName(setOnMouseMoved,[Default]), UsedName(computeMinHeight,[Default]), UsedName(maxWidth,[Default]), UsedName(setScale,[Default]), UsedName(removeEventFilter,[Default]), UsedName(impl_setStyleMap,[Default]), UsedName(maxHeight,[Default]), UsedName(isPressed,[Default]), UsedName(hashCode,[Default]), UsedName(getTransforms,[Default]), UsedName(setOnScrollStarted,[Default]), UsedName(setOnMouseExited,[Default]), UsedName(setRotate,[Default]), UsedName(isFocused,[Default]), UsedName(inputMethodRequestsProperty,[Default]), UsedName(setTx,[Default]), UsedName(setTranslate,[Default]), UsedName(prefWidth,[Default]), UsedName(impl_pickNodeLocal,[Default]), UsedName(setInputMethodRequests,[Default]), UsedName(setOnRotationFinished,[Default]), UsedName(onScrollStartedProperty,[Default]), UsedName(accessibilityProperties,[Default]), UsedName(setAutoSizeChildren,[Default]), UsedName(styleProperty,[Default]), UsedName(setOnContextMenuRequested,[Default]), UsedName(translateXProperty,[Default]), UsedName(getGeomBounds,[Default]), UsedName(rotationAxisProperty,[Default]), UsedName(effectiveNodeOrientationProperty,[Default]), UsedName(onZoomStartedProperty,[Default]), UsedName(setDerivedDepthTest,[Default]), UsedName($isInstanceOf,[Default]), UsedName(resizeRelocate,[Default]), UsedName(layoutChildren,[Default]), UsedName(setRx,[Default]), UsedName(containsBounds,[Default]), UsedName(getOnRotationStarted,[Default]), UsedName(getOnDragOver,[Default]), UsedName(validatePG,[Default]), UsedName(clone,[Default]), UsedName(getBaselineOffset,[Default]), UsedName(cacheHintProperty,[Default]), UsedName(getOnZoomStarted,[Default]), UsedName(impl_toFront,[Default]), UsedName(onMouseReleasedProperty,[Default]), UsedName(impl_geomChanged,[Default]), UsedName(childVisibilityChanged,[Default]), UsedName(notifyAccessibleAttributeChanged,[Default]), UsedName(requestFocus,[Default]), UsedName(effectProperty,[Default]), UsedName(onMousePressedProperty,[Default]), UsedName(setOnKeyTyped,[Default]), UsedName(pickOnBoundsProperty,[Default]), UsedName(impl_createPeer,[Default]), UsedName(isVisible,[Default]), UsedName(setOnSwipeDown,[Default]), UsedName(boundsInLocalProperty,[Default]), UsedName(impl_hasTransforms,[Default]), UsedName(onSwipeDownProperty,[Default]), UsedName(setOnKeyReleased,[Default]), UsedName(isDisable,[Default]), UsedName(setOnMouseDragEntered,[Default]), UsedName(getOnTouchPressed,[Default]), UsedName(onMouseDragExitedProperty,[Default]), UsedName(addEventHandler,[Default]), UsedName(pseudoClassStateChanged,[Default]), UsedName(onDragDoneProperty,[Default]), UsedName(disableProperty,[Default]), UsedName(updateGeomBounds,[Default]), UsedName(toFront,[Default]), UsedName(setOnTouchReleased,[Default]), UsedName(impl_processMXNode,[Default]), UsedName(setOnMouseDragged,[Default]), UsedName(layoutYProperty,[Default]), UsedName(setTy,[Default]), UsedName(t,[Default]), UsedName(setOnMouseReleased,[Default]), UsedName(setNeedsLayout,[Default]), UsedName(boundsInParentProperty,[Default]), UsedName(getLocalToParentTransform,[Default]), UsedName(getSubScene,[Default]), UsedName(impl_isDirty,[Default]), UsedName(impl_notifyLayoutBoundsChanged,[Default]), UsedName(onDragDroppedProperty,[Default]), UsedName(getOnContextMenuRequested,[Default]), UsedName(impl_traverse,[Default]), UsedName(isInstanceOf,[Default]), UsedName(isResizable,[Default]), UsedName(impl_getLeafTransform,[Default]), UsedName(setLayoutX,[Default]), UsedName(setOnMousePressed,[Default]), UsedName(hoverProperty,[Default]), UsedName(getOnScroll,[Default]), UsedName(setCacheHint,[Default]), UsedName(getOnTouchReleased,[Default]), UsedName(setUserData,[Default]), UsedName(boundedSize,[Default]), UsedName(sceneToLocal,[Default]), UsedName(getManagedChildren,[Default]), UsedName(updateBounds,[Default]), UsedName(getCursor,[Default]), UsedName(scaleYProperty,[Default]), UsedName(mouseTransparentProperty,[Default]), UsedName(onMouseClickedProperty,[Default]), UsedName(finalize,[Default]), UsedName(getTransformedBounds,[Default]), UsedName(setScaleX,[Default]), UsedName(localToParent,[Default]), UsedName(getParent,[Default]), UsedName(onContextMenuRequestedProperty,[Default]), UsedName(updateLocalToParentTransform,[Default]), UsedName(setOnScrollFinished,[Default]), UsedName(setOnDragOver,[Default]), UsedName(asInstanceOf,[Default]), UsedName(layoutFlag,[Default]), UsedName(needsLayoutProperty,[Default]), UsedName(setDisabled,[Default]), UsedName(FocusedProperty,[Default]), UsedName(getStyle,[Default]), UsedName($asInstanceOf,[Default]), UsedName(prefHeight,[Default]), UsedName(impl_cssGetFocusTraversableInitialValue,[Default]), UsedName(setOnZoom,[Default]), UsedName(getOnKeyReleased,[Default]), UsedName(impl_computeIntersects,[Default]), UsedName(eventDispatcherProperty,[Default]), UsedName(ry,[Default]), UsedName(getTranslateY,[Default]), UsedName(sceneProperty,[Default]), UsedName(setOnSwipeLeft,[Default]), UsedName(getAccessible,[Default]), UsedName(pseudoClassStates,[Default]), UsedName(onDragDetectedProperty,[Default]), UsedName(lookup,[Default]), UsedName(setOnSwipeRight,[Default]), UsedName(cacheProperty,[Default]), UsedName(impl_computeGeomBounds,[Default]), UsedName(getStylesheets,[Default]), UsedName(!=,[Default]), UsedName(notifyParentOfBoundsChange,[Default]), UsedName(parentResolvedOrientationInvalidated,[Default]), UsedName(computePrefWidth,[Default]), UsedName(impl_treeVisibleProperty,[Default]), UsedName(executeAccessibleAction,[Default]), UsedName(onInputMethodTextChangedProperty,[Default]), UsedName(impl_computeContains,[Default]), UsedName(getCssMetaData,[Default]), UsedName(getLocalBounds,[Default]), UsedName(notifyAll,[Default]), UsedName(translateZProperty,[Default]), UsedName(getOnMousePressed,[Default]), UsedName(setSy,[Default]), UsedName(setOnMouseDragOver,[Default]), UsedName(getStyleClass,[Default]), UsedName(onDragOverProperty,[Default]), UsedName(getOnInputMethodTextChanged,[Default]), UsedName(resize,[Default]), UsedName(setSx,[Default]), UsedName(setFocusTraversable,[Default]), UsedName(setOnMouseDragExited,[Default]), UsedName(onDragExitedProperty,[Default]), UsedName(getClass,[Default]), UsedName(notifyParentsOfInvalidatedCSS,[Default]), UsedName(s,[Default]), UsedName(getOnMouseDragExited,[Default]), UsedName(getEffect,[Default]), UsedName(setVisible,[Default]), UsedName(impl_layoutBoundsChanged,[Default]), UsedName(setOnTouchMoved,[Default]), UsedName(setOnDragDone,[Default]), UsedName(onSwipeLeftProperty,[Default]), UsedName(markDirtyLayoutBranch,[Default]), UsedName(setOnMouseClicked,[Default]), UsedName(setAccessibleRoleDescription,[Default]), UsedName(setOnDragDropped,[Default]), UsedName(test_getRemoved,[Default]), UsedName(requestLayout,[Default]), UsedName(contains,[Default]), UsedName(getClipParent,[Default]), UsedName(styleHelper,[Default]), UsedName(nodeResolvedOrientationChanged,[Default]), UsedName(localToScreen,[Default]), UsedName(startDragAndDrop,[Default]), UsedName(getOnDragDropped,[Default]), UsedName(disabledProperty,[Default]), UsedName(getBoundsInParent,[Default]), UsedName(getBlendMode,[Default]), UsedName(nodeResolvedOrientationInvalidated,[Default]), UsedName(TreeVisiblePropertyReadOnly,[Default]), UsedName(getOnKeyTyped,[Default]), UsedName(onMouseDraggedProperty,[Default]), UsedName(onKeyPressedProperty,[Default]), UsedName(getCSSFlags,[Default]), UsedName(managedChildChanged,[Default]), UsedName(localToScene,[Default]), UsedName(setRotationAxis,[Default]), UsedName(translateYProperty,[Default]), UsedName(snapshot,[Default]), UsedName(accessibleRoleDescriptionProperty,[Default]), UsedName(reset,[Default]), UsedName(getOnDragExited,[Default]), UsedName(isCanReceiveFocus,[Default]), UsedName(opacityProperty,[Default]), UsedName(==,[Default]), UsedName(isDisabled,[Default]), UsedName(notify,[Default]), UsedName(isManaged,[Default]), UsedName(minHeight,[Default]), UsedName(idProperty,[Default]), UsedName(setSz,[Default]), UsedName(getLayoutBounds,[Default]), UsedName(isSceneRoot,[Default]), UsedName(setLayoutFlag,[Default]), UsedName(isDerivedDepthTest,[Default]), UsedName(getScene,[Default]), UsedName(setOnTouchPressed,[Default]), UsedName(getNodeOrientation,[Default]), UsedName(getPseudoClassStates,[Default]), UsedName(accessibleHelpProperty,[Default]), UsedName(setParent,[Default]), UsedName(parentProperty,[Default]), UsedName(getLayoutX,[Default]), UsedName(getOpacity,[Default]), UsedName(onMouseDragEnteredProperty,[Default]), UsedName(setDepthTest,[Default]), UsedName(setScaleZ,[Default]), UsedName(impl_updatePeer,[Default]), UsedName(setOnDragExited,[Default]), UsedName(setScaleY,[Default]), UsedName(getOnDragEntered,[Default]), UsedName(focusTraversableProperty,[Default]), UsedName(impl_getPivotZ,[Default]), UsedName(scalation;scala3d;Xform;init;,[Default]), UsedName(getContentBias,[Default]), UsedName(fireEvent,[Default]), UsedName(accessibleTextProperty,[Default]), UsedName(getOnMouseEntered,[Default]), UsedName(buildEventDispatchChain,[Default]), UsedName(impl_isTreeVisible,[Default]), UsedName(impl_getAllParentStylesheets,[Default]), UsedName(setCursor,[Default]), UsedName(usesMirroring,[Default]), UsedName(hasProperties,[Default]), UsedName(getAccessibleHelp,[Default]), UsedName(impl_intersectsBounds,[Default]), UsedName(rotateOrder,[Default]), UsedName(layoutRoot,[Default]), UsedName(focusedProperty,[Default]), UsedName(synchronized,[Default]), UsedName(Xform,[Default]), UsedName(setScenes,[Default]), UsedName(accessible,[Default]), UsedName(hasMirroring,[Default]), UsedName(onMouseDragOverProperty,[Default]), UsedName(queryAccessibleAttribute,[Default]), UsedName(onMouseMovedProperty,[Default]), UsedName(getDepthTest,[Default]), UsedName(setOnRotate,[Default]), UsedName(impl_markDirty,[Default]), UsedName(getCacheHint,[Default]), UsedName(getOnMouseDragEntered,[Default]), UsedName(getOnDragDetected,[Default]), UsedName(nodeOrientationProperty,[Default]), UsedName(getOnSwipeDown,[Default]), UsedName(setOnKeyPressed,[Default]), UsedName(toString,[Default]), UsedName(getRx,[Default]), UsedName(getScaleX,[Default]), UsedName(getOnRotationFinished,[Default]), UsedName(getOnTouchStationary,[Default]), UsedName(resetTSP,[Default]), UsedName(isHover,[Default]), UsedName(localBoundsChanged,[Default]), UsedName(getInputMethodRequests,[Default]), UsedName(##,[Default]), UsedName(setPickOnBounds,[Default]), UsedName(getChildren,[Default]), UsedName(getBoundsInLocal,[Default]), UsedName(getProperties,[Default]), UsedName(intersects,[Default]), UsedName(getOnScrollFinished,[Default]), UsedName(releaseAccessible,[Default]), UsedName(computeAreaInScreen,[Default]), UsedName(setImpl_traversalEngine,[Default]), UsedName(parentToLocal,[Default]), UsedName(getOnRotate,[Default]), UsedName(setPivot,[Default]), UsedName(setTreeVisible,[Default]), UsedName(impl_isDirtyEmpty,[Default]), UsedName(setRy,[Default]), UsedName(isMouseTransparent,[Default]), UsedName(processCSS,[Default]), UsedName(setClip,[Default]), UsedName(getAccessibleRoleDescription,[Default]), UsedName(getStyleableParent,[Default]), UsedName(getRy,[Default]), UsedName(getScaleY,[Default]), UsedName(requestParentLayout,[Default]), UsedName(wait,[Default]), UsedName(setDisable,[Default]), UsedName(impl_syncPeer,[Default]), UsedName(visibleProperty,[Default]), UsedName(getCurrentLocalToSceneTransformState,[Default]), UsedName(printSeq,[Default]), UsedName(setOnSwipeUp,[Default]), UsedName(setId,[Default]), UsedName(startFullDrag,[Default]), UsedName(getScaleZ,[Default]), UsedName(impl_computeLayoutBounds,[Default]), UsedName(onSwipeUpProperty,[Default]), UsedName(scenesChanged,[Default]), UsedName(getImpl_traversalEngine,[Default]), UsedName(getRotate,[Default]), UsedName(setMouseTransparent,[Default]), UsedName(isCache,[Default]), UsedName(setAccessibleHelp,[Default]), UsedName(notifyManagedChanged,[Default]), UsedName(getChildrenUnmodifiable,[Default]), UsedName(onKeyReleasedProperty,[Default]), UsedName(impl_showMnemonicsProperty,[Default]), UsedName(setOnInputMethodTextChanged,[Default]), UsedName(layoutBoundsProperty,[Default]), UsedName(getTypeSelector,[Default]), UsedName(getEffectiveNodeOrientation,[Default]), UsedName(getUserData,[Default]), UsedName(isPickOnBounds,[Default]), UsedName(setOnScroll,[Default]), UsedName(onRotationStartedProperty,[Default]), UsedName(impl_getPivotX,[Default]), UsedName(getAccessibleRole,[Default]), UsedName(ne,[Default]), UsedName(getRotationAxis,[Default]), UsedName(autoSizeChildrenProperty,[Default]), UsedName(managedProperty,[Default]), UsedName(childBoundsChanged,[Default]), UsedName(getOnTouchMoved,[Default]), UsedName(localToSceneTransformProperty,[Default]), UsedName(onRotateProperty,[Default]), UsedName(screenToLocal,[Default]), UsedName(setTz,[Default]), UsedName(onScrollProperty,[Default]), UsedName(indent,[Default]), UsedName(getClip,[Default]), UsedName(relocate,[Default]), UsedName(impl_getPeer,[Default]), UsedName(getOnSwipeLeft,[Default]), UsedName(updateTxBounds,[Default]), UsedName(setManaged,[Default]), UsedName(setOnDragDetected,[Default]), UsedName(setNodeOrientation,[Default]), UsedName(setOnMouseEntered,[Default]), UsedName(getOnMouseClicked,[Default]), UsedName(setOnZoomStarted,[Default]), UsedName(impl_findStyles,[Default]), UsedName(onTouchStationaryProperty,[Default]), UsedName(setTranslateZ,[Default]), UsedName(impl_reapplyCSS,[Default]), UsedName(impl_clearDirty,[Default]), UsedName(getOnMouseDragged,[Default]), UsedName(layoutXProperty,[Default]), UsedName(getOnMouseDragReleased,[Default]), UsedName(onMouseDragReleasedProperty,[Default]), UsedName(impl_transformsChanged,[Default]), UsedName(setOnRotationStarted,[Default]), UsedName(setEventHandler,[Default]), UsedName(getEventDispatcher,[Default]), UsedName(getRz,[Default]), UsedName(accessibleRoleProperty,[Default]), UsedName(depthTestProperty,[Default]), UsedName(applyCss,[Default]), UsedName(getOnSwipeRight,[Default]), UsedName(computeDerivedDepthTest,[Default]), UsedName(computePrefHeight,[Default]), UsedName(setRz,[Default]), UsedName(onSwipeRightProperty,[Default]), UsedName(setEventDispatcher,[Default]), UsedName(setOnDragEntered,[Default]), UsedName(removeEventHandler,[Default]), UsedName(impl_setShowMnemonics,[Default]), UsedName(onRotationFinishedProperty,[Default]), UsedName(impl_cssGetCursorInitialValue,[Default]), UsedName(setOnTouchStationary,[Default]), UsedName(impl_pickNode,[Default]), UsedName(setLayoutY,[Default]), UsedName(lookupAll,[Default]), UsedName(scaleZProperty,[Default]), UsedName(rotateProperty,[Default]), UsedName(onTouchReleasedProperty,[Default]), UsedName(pressedProperty,[Default]), UsedName(setCache,[Default]), UsedName(onZoomProperty,[Default]), UsedName(boundsChanged,[Default]), UsedName(impl_processCSS,[Default]), UsedName(setAccessibleRole,[Default]), UsedName(computeMinWidth,[Default]), UsedName(clearSizeCache,[Default]), UsedName(setPressed,[Default]), UsedName(getAccessibleText,[Default]), UsedName(isConnected,[Default]), UsedName(onTouchMovedProperty,[Default]), UsedName(setOpacity,[Default]), UsedName(impl_isShowMnemonics,[Default]), UsedName(onDragEnteredProperty,[Default]), UsedName(clipProperty,[Default]), UsedName(scaleXProperty,[Default]), UsedName(cursorProperty,[Default]), UsedName(toBack,[Default]), UsedName(setEffect,[Default]), UsedName(setOnMouseDragReleased,[Default]), UsedName(getOnMouseMoved,[Default]), UsedName(onMouseExitedProperty,[Default]), UsedName(rz,[Default]), UsedName(layout,[Default]), UsedName(wouldCreateCycle,[Default]), UsedName(setTranslateX,[Default]), UsedName(getLayoutY,[Default]), UsedName(setTranslateY,[Default]), UsedName(setOnZoomFinished,[Default]), UsedName(onMouseEnteredProperty,[Default]), UsedName(cssFlag,[Default]), UsedName(impl_intersects,[Default]), UsedName(getOnKeyPressed,[Default]), UsedName(p,[Default]), UsedName(getOnMouseDragOver,[Default]), UsedName(onTouchPressedProperty,[Default]), UsedName(getOnScrollStarted,[Default]), UsedName(setHover,[Default]), UsedName(getTranslateX,[Default]), UsedName(onZoomFinishedProperty,[Default]), UsedName(setBlendMode,[Default]), UsedName(addEventFilter,[Default]), UsedName(transformedBoundsChanged,[Default]), UsedName(performingLayout,[Default]), UsedName(eq,[Default]), UsedName(isAutoSizeChildren,[Default]), UsedName(impl_getStyleMap,[Default]), UsedName(localToParentTransformProperty,[Default]), UsedName(isFocusTraversable,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.scala3d.Xform)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.preprocessing.mapToInt...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.preprocessing.mapToInt)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.preprocessing.mapToInt)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.preprocessing.PreProcessingMaster: Set(UsedName(isInstanceOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(v,[Default]), UsedName(==,[Default]), UsedName(apply,[Default]), UsedName(mapToInt,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.preprocessing.mapToInt,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(copy$default$1,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(canEqual,[Default]), UsedName(productPrefix,[Default]), UsedName(compose,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(v,[Default]), UsedName($asInstanceOf,[Default]), UsedName(andThen,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(unapply,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(apply,[Default]), UsedName(scalation;preprocessing;mapToInt;init;,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(mapToInt,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 2 classes due to The scalation.preprocessing.mapToInt has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(copy$default$1,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(canEqual,[Default]), UsedName(productPrefix,[Default]), UsedName(compose,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(v,[Default]), UsedName($asInstanceOf,[Default]), UsedName(andThen,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(unapply,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(apply,[Default]), UsedName(scalation;preprocessing;mapToInt;init;,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(mapToInt,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.preprocessing.mapToInt)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> by member reference: Set(scalation.preprocessing.PreProcessingMaster)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.scala3d.Line3D...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.scala3d.Line3D)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.scala3d.Line3D)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.scala3d.Line3D,ModifiedNames(changes = UsedName(autosize,[Default]), UsedName(onKeyTypedProperty,[Default]), UsedName(blendModeProperty,[Default]), UsedName(getId,[Default]), UsedName(getTranslateZ,[Default]), UsedName(materialProperty,[Default]), UsedName(getOnZoom,[Default]), UsedName(getOnSwipeUp,[Default]), UsedName(equals,[Default]), UsedName(getOnDragDone,[Default]), UsedName(impl_getPivotY,[Default]), UsedName(minWidth,[Default]), UsedName(setAccessibleText,[Default]), UsedName(setFocused,[Default]), UsedName(getOnMouseReleased,[Default]), UsedName(getOnZoomFinished,[Default]), UsedName(setStyle,[Default]), UsedName(getOnMouseExited,[Default]), UsedName(getLocalToSceneTransform,[Default]), UsedName(onScrollFinishedProperty,[Default]), UsedName(setOnMouseMoved,[Default]), UsedName(maxWidth,[Default]), UsedName(removeEventFilter,[Default]), UsedName(impl_setStyleMap,[Default]), UsedName(maxHeight,[Default]), UsedName(isPressed,[Default]), UsedName(hashCode,[Default]), UsedName(getTransforms,[Default]), UsedName(setOnScrollStarted,[Default]), UsedName(setOnMouseExited,[Default]), UsedName(setRotate,[Default]), UsedName(isFocused,[Default]), UsedName(inputMethodRequestsProperty,[Default]), UsedName(prefWidth,[Default]), UsedName(impl_pickNodeLocal,[Default]), UsedName(setInputMethodRequests,[Default]), UsedName(setOnRotationFinished,[Default]), UsedName(onScrollStartedProperty,[Default]), UsedName(accessibilityProperties,[Default]), UsedName(styleProperty,[Default]), UsedName(setOnContextMenuRequested,[Default]), UsedName(translateXProperty,[Default]), UsedName(getGeomBounds,[Default]), UsedName(rotationAxisProperty,[Default]), UsedName(effectiveNodeOrientationProperty,[Default]), UsedName(onZoomStartedProperty,[Default]), UsedName(setDerivedDepthTest,[Default]), UsedName($isInstanceOf,[Default]), UsedName(resizeRelocate,[Default]), UsedName(manager,[Default]), UsedName(containsBounds,[Default]), UsedName(getOnRotationStarted,[Default]), UsedName(getOnDragOver,[Default]), UsedName(clone,[Default]), UsedName(getBaselineOffset,[Default]), UsedName(cacheHintProperty,[Default]), UsedName(getOnZoomStarted,[Default]), UsedName(onMouseReleasedProperty,[Default]), UsedName(impl_geomChanged,[Default]), UsedName(notifyAccessibleAttributeChanged,[Default]), UsedName(requestFocus,[Default]), UsedName(effectProperty,[Default]), UsedName(onMousePressedProperty,[Default]), UsedName(setOnKeyTyped,[Default]), UsedName(pickOnBoundsProperty,[Default]), UsedName(impl_createPeer,[Default]), UsedName(isVisible,[Default]), UsedName(setOnSwipeDown,[Default]), UsedName(boundsInLocalProperty,[Default]), UsedName(setHeight,[Default]), UsedName(impl_hasTransforms,[Default]), UsedName(onSwipeDownProperty,[Default]), UsedName(setOnKeyReleased,[Default]), UsedName(isDisable,[Default]), UsedName(setOnMouseDragEntered,[Default]), UsedName(getOnTouchPressed,[Default]), UsedName(onMouseDragExitedProperty,[Default]), UsedName(addEventHandler,[Default]), UsedName(pseudoClassStateChanged,[Default]), UsedName(onDragDoneProperty,[Default]), UsedName(disableProperty,[Default]), UsedName(updateGeomBounds,[Default]), UsedName(toFront,[Default]), UsedName(setOnTouchReleased,[Default]), UsedName(impl_processMXNode,[Default]), UsedName(setOnMouseDragged,[Default]), UsedName(angle,[Default]), UsedName(layoutYProperty,[Default]), UsedName(setOnMouseReleased,[Default]), UsedName(boundsInParentProperty,[Default]), UsedName(getLocalToParentTransform,[Default]), UsedName(getSubScene,[Default]), UsedName(impl_isDirty,[Default]), UsedName(impl_notifyLayoutBoundsChanged,[Default]), UsedName(onDragDroppedProperty,[Default]), UsedName(getOnContextMenuRequested,[Default]), UsedName(impl_traverse,[Default]), UsedName(isInstanceOf,[Default]), UsedName(isResizable,[Default]), UsedName(impl_getLeafTransform,[Default]), UsedName(setLayoutX,[Default]), UsedName(setOnMousePressed,[Default]), UsedName(hoverProperty,[Default]), UsedName(getOnScroll,[Default]), UsedName(setCacheHint,[Default]), UsedName(getOnTouchReleased,[Default]), UsedName(setUserData,[Default]), UsedName(boundedSize,[Default]), UsedName(sceneToLocal,[Default]), UsedName(updateBounds,[Default]), UsedName(getCursor,[Default]), UsedName(scaleYProperty,[Default]), UsedName(mouseTransparentProperty,[Default]), UsedName(onMouseClickedProperty,[Default]), UsedName(finalize,[Default]), UsedName(getTransformedBounds,[Default]), UsedName(setScaleX,[Default]), UsedName(localToParent,[Default]), UsedName(getParent,[Default]), UsedName(onContextMenuRequestedProperty,[Default]), UsedName(updateLocalToParentTransform,[Default]), UsedName(setOnScrollFinished,[Default]), UsedName(setOnDragOver,[Default]), UsedName(asInstanceOf,[Default]), UsedName(setDisabled,[Default]), UsedName(FocusedProperty,[Default]), UsedName(getStyle,[Default]), UsedName($asInstanceOf,[Default]), UsedName(prefHeight,[Default]), UsedName(impl_cssGetFocusTraversableInitialValue,[Default]), UsedName(setOnZoom,[Default]), UsedName(getOnKeyReleased,[Default]), UsedName(impl_computeIntersects,[Default]), UsedName(eventDispatcherProperty,[Default]), UsedName(key,[Default]), UsedName(getTranslateY,[Default]), UsedName(sceneProperty,[Default]), UsedName(setOnSwipeLeft,[Default]), UsedName(getAccessible,[Default]), UsedName(pseudoClassStates,[Default]), UsedName(onDragDetectedProperty,[Default]), UsedName(lookup,[Default]), UsedName(setOnSwipeRight,[Default]), UsedName(drawModeProperty,[Default]), UsedName(cacheProperty,[Default]), UsedName(impl_computeGeomBounds,[Default]), UsedName(!=,[Default]), UsedName(notifyParentOfBoundsChange,[Default]), UsedName(parentResolvedOrientationInvalidated,[Default]), UsedName(impl_treeVisibleProperty,[Default]), UsedName(setCullFace,[Default]), UsedName(executeAccessibleAction,[Default]), UsedName(onInputMethodTextChangedProperty,[Default]), UsedName(impl_computeContains,[Default]), UsedName(getCssMetaData,[Default]), UsedName(getLocalBounds,[Default]), UsedName(notifyAll,[Default]), UsedName(translateZProperty,[Default]), UsedName(getOnMousePressed,[Default]), UsedName(setOnMouseDragOver,[Default]), UsedName(getStyleClass,[Default]), UsedName(cullFaceProperty,[Default]), UsedName(onDragOverProperty,[Default]), UsedName(getOnInputMethodTextChanged,[Default]), UsedName(radiusProperty,[Default]), UsedName(resize,[Default]), UsedName(setFocusTraversable,[Default]), UsedName(setOnMouseDragExited,[Default]), UsedName(onDragExitedProperty,[Default]), UsedName(getClass,[Default]), UsedName(notifyParentsOfInvalidatedCSS,[Default]), UsedName(heightProperty,[Default]), UsedName(getOnMouseDragExited,[Default]), UsedName(getEffect,[Default]), UsedName(setVisible,[Default]), UsedName(impl_layoutBoundsChanged,[Default]), UsedName(setOnTouchMoved,[Default]), UsedName(setOnDragDone,[Default]), UsedName(onSwipeLeftProperty,[Default]), UsedName(markDirtyLayoutBranch,[Default]), UsedName(setOnMouseClicked,[Default]), UsedName(setAccessibleRoleDescription,[Default]), UsedName(setOnDragDropped,[Default]), UsedName(contains,[Default]), UsedName(getClipParent,[Default]), UsedName(styleHelper,[Default]), UsedName(nodeResolvedOrientationChanged,[Default]), UsedName(localToScreen,[Default]), UsedName(startDragAndDrop,[Default]), UsedName(getOnDragDropped,[Default]), UsedName(scalation;scala3d;Line3D;init;,[Default]), UsedName(disabledProperty,[Default]), UsedName(getBoundsInParent,[Default]), UsedName(getBlendMode,[Default]), UsedName(nodeResolvedOrientationInvalidated,[Default]), UsedName(TreeVisiblePropertyReadOnly,[Default]), UsedName(getOnKeyTyped,[Default]), UsedName(onMouseDraggedProperty,[Default]), UsedName(onKeyPressedProperty,[Default]), UsedName(rotation,[Default]), UsedName(getCSSFlags,[Default]), UsedName(localToScene,[Default]), UsedName(setRotationAxis,[Default]), UsedName(translateYProperty,[Default]), UsedName(axis,[Default]), UsedName(snapshot,[Default]), UsedName(accessibleRoleDescriptionProperty,[Default]), UsedName(getOnDragExited,[Default]), UsedName(isCanReceiveFocus,[Default]), UsedName(opacityProperty,[Default]), UsedName(==,[Default]), UsedName(isDisabled,[Default]), UsedName(notify,[Default]), UsedName(isManaged,[Default]), UsedName(minHeight,[Default]), UsedName(idProperty,[Default]), UsedName(getLayoutBounds,[Default]), UsedName(setRadius,[Default]), UsedName(isDerivedDepthTest,[Default]), UsedName(getScene,[Default]), UsedName(setOnTouchPressed,[Default]), UsedName(getNodeOrientation,[Default]), UsedName(getPseudoClassStates,[Default]), UsedName(getRadius,[Default]), UsedName(accessibleHelpProperty,[Default]), UsedName(setParent,[Default]), UsedName(parentProperty,[Default]), UsedName(getLayoutX,[Default]), UsedName(getOpacity,[Default]), UsedName(onMouseDragEnteredProperty,[Default]), UsedName(setDepthTest,[Default]), UsedName(setScaleZ,[Default]), UsedName(impl_updatePeer,[Default]), UsedName(setOnDragExited,[Default]), UsedName(setScaleY,[Default]), UsedName(getOnDragEntered,[Default]), UsedName(focusTraversableProperty,[Default]), UsedName(impl_getPivotZ,[Default]), UsedName(getContentBias,[Default]), UsedName(fireEvent,[Default]), UsedName(accessibleTextProperty,[Default]), UsedName(getOnMouseEntered,[Default]), UsedName(buildEventDispatchChain,[Default]), UsedName(impl_isTreeVisible,[Default]), UsedName(setCursor,[Default]), UsedName(usesMirroring,[Default]), UsedName(hasProperties,[Default]), UsedName(getMaterial,[Default]), UsedName(getAccessibleHelp,[Default]), UsedName(impl_intersectsBounds,[Default]), UsedName(focusedProperty,[Default]), UsedName(synchronized,[Default]), UsedName(setScenes,[Default]), UsedName(accessible,[Default]), UsedName(hasMirroring,[Default]), UsedName(onMouseDragOverProperty,[Default]), UsedName(queryAccessibleAttribute,[Default]), UsedName(onMouseMovedProperty,[Default]), UsedName(getDepthTest,[Default]), UsedName(setOnRotate,[Default]), UsedName(impl_markDirty,[Default]), UsedName(getCacheHint,[Default]), UsedName(getOnMouseDragEntered,[Default]), UsedName(getOnDragDetected,[Default]), UsedName(nodeOrientationProperty,[Default]), UsedName(getOnSwipeDown,[Default]), UsedName(setOnKeyPressed,[Default]), UsedName(toString,[Default]), UsedName(getScaleX,[Default]), UsedName(getOnRotationFinished,[Default]), UsedName(getOnTouchStationary,[Default]), UsedName(isHover,[Default]), UsedName(localBoundsChanged,[Default]), UsedName(getInputMethodRequests,[Default]), UsedName(##,[Default]), UsedName(setPickOnBounds,[Default]), UsedName(midPt,[Default]), UsedName(getBoundsInLocal,[Default]), UsedName(getProperties,[Default]), UsedName(intersects,[Default]), UsedName(getOnScrollFinished,[Default]), UsedName(releaseAccessible,[Default]), UsedName(setDrawMode,[Default]), UsedName(computeAreaInScreen,[Default]), UsedName(parentToLocal,[Default]), UsedName(translateMidpoint,[Default]), UsedName(getOnRotate,[Default]), UsedName(setTreeVisible,[Default]), UsedName(impl_isDirtyEmpty,[Default]), UsedName(isMouseTransparent,[Default]), UsedName(processCSS,[Default]), UsedName(setClip,[Default]), UsedName(getAccessibleRoleDescription,[Default]), UsedName(getStyleableParent,[Default]), UsedName(getScaleY,[Default]), UsedName(wait,[Default]), UsedName(setDisable,[Default]), UsedName(impl_syncPeer,[Default]), UsedName(visibleProperty,[Default]), UsedName(getCurrentLocalToSceneTransformState,[Default]), UsedName(getHeight,[Default]), UsedName(setOnSwipeUp,[Default]), UsedName(setId,[Default]), UsedName(startFullDrag,[Default]), UsedName(getScaleZ,[Default]), UsedName(impl_computeLayoutBounds,[Default]), UsedName(onSwipeUpProperty,[Default]), UsedName(scenesChanged,[Default]), UsedName(getRotate,[Default]), UsedName(setMouseTransparent,[Default]), UsedName(isCache,[Default]), UsedName(setAccessibleHelp,[Default]), UsedName(notifyManagedChanged,[Default]), UsedName(onKeyReleasedProperty,[Default]), UsedName(impl_showMnemonicsProperty,[Default]), UsedName(setOnInputMethodTextChanged,[Default]), UsedName(layoutBoundsProperty,[Default]), UsedName(getTypeSelector,[Default]), UsedName(getEffectiveNodeOrientation,[Default]), UsedName(getUserData,[Default]), UsedName(isPickOnBounds,[Default]), UsedName(setOnScroll,[Default]), UsedName(onRotationStartedProperty,[Default]), UsedName(impl_getPivotX,[Default]), UsedName(getAccessibleRole,[Default]), UsedName(ne,[Default]), UsedName(getRotationAxis,[Default]), UsedName(managedProperty,[Default]), UsedName(getOnTouchMoved,[Default]), UsedName(localToSceneTransformProperty,[Default]), UsedName(onRotateProperty,[Default]), UsedName(screenToLocal,[Default]), UsedName(onScrollProperty,[Default]), UsedName(indent,[Default]), UsedName(getClip,[Default]), UsedName(relocate,[Default]), UsedName(impl_getPeer,[Default]), UsedName(getOnSwipeLeft,[Default]), UsedName(updateTxBounds,[Default]), UsedName(setManaged,[Default]), UsedName(setOnDragDetected,[Default]), UsedName(setNodeOrientation,[Default]), UsedName(setOnMouseEntered,[Default]), UsedName(getOnMouseClicked,[Default]), UsedName(setOnZoomStarted,[Default]), UsedName(impl_findStyles,[Default]), UsedName(onTouchStationaryProperty,[Default]), UsedName(setTranslateZ,[Default]), UsedName(impl_reapplyCSS,[Default]), UsedName(impl_clearDirty,[Default]), UsedName(getOnMouseDragged,[Default]), UsedName(layoutXProperty,[Default]), UsedName(getOnMouseDragReleased,[Default]), UsedName(onMouseDragReleasedProperty,[Default]), UsedName(impl_transformsChanged,[Default]), UsedName(setOnRotationStarted,[Default]), UsedName(setEventHandler,[Default]), UsedName(getCullFace,[Default]), UsedName(getEventDispatcher,[Default]), UsedName(accessibleRoleProperty,[Default]), UsedName(depthTestProperty,[Default]), UsedName(applyCss,[Default]), UsedName(getOnSwipeRight,[Default]), UsedName(computeDerivedDepthTest,[Default]), UsedName(onSwipeRightProperty,[Default]), UsedName(setEventDispatcher,[Default]), UsedName(setOnDragEntered,[Default]), UsedName(removeEventHandler,[Default]), UsedName(Line3D,[Default]), UsedName(impl_setShowMnemonics,[Default]), UsedName(onRotationFinishedProperty,[Default]), UsedName(impl_cssGetCursorInitialValue,[Default]), UsedName(setOnTouchStationary,[Default]), UsedName(impl_pickNode,[Default]), UsedName(setLayoutY,[Default]), UsedName(lookupAll,[Default]), UsedName(scaleZProperty,[Default]), UsedName(rotateProperty,[Default]), UsedName(onTouchReleasedProperty,[Default]), UsedName(pressedProperty,[Default]), UsedName(setCache,[Default]), UsedName(onZoomProperty,[Default]), UsedName(setMaterial,[Default]), UsedName(boundsChanged,[Default]), UsedName(impl_processCSS,[Default]), UsedName(setAccessibleRole,[Default]), UsedName(setPressed,[Default]), UsedName(getAccessibleText,[Default]), UsedName(isConnected,[Default]), UsedName(onTouchMovedProperty,[Default]), UsedName(setOpacity,[Default]), UsedName(impl_isShowMnemonics,[Default]), UsedName(onDragEnteredProperty,[Default]), UsedName(clipProperty,[Default]), UsedName(scaleXProperty,[Default]), UsedName(cursorProperty,[Default]), UsedName(toBack,[Default]), UsedName(setEffect,[Default]), UsedName(setOnMouseDragReleased,[Default]), UsedName(getOnMouseMoved,[Default]), UsedName(onMouseExitedProperty,[Default]), UsedName(getDrawMode,[Default]), UsedName(wouldCreateCycle,[Default]), UsedName(setTranslateX,[Default]), UsedName(getLayoutY,[Default]), UsedName(getDivisions,[Default]), UsedName(setTranslateY,[Default]), UsedName(setOnZoomFinished,[Default]), UsedName(onMouseEnteredProperty,[Default]), UsedName(cssFlag,[Default]), UsedName(impl_intersects,[Default]), UsedName(getOnKeyPressed,[Default]), UsedName(getOnMouseDragOver,[Default]), UsedName(onTouchPressedProperty,[Default]), UsedName(getOnScrollStarted,[Default]), UsedName(setHover,[Default]), UsedName(getTranslateX,[Default]), UsedName(onZoomFinishedProperty,[Default]), UsedName(setBlendMode,[Default]), UsedName(addEventFilter,[Default]), UsedName(transformedBoundsChanged,[Default]), UsedName(eq,[Default]), UsedName(impl_getStyleMap,[Default]), UsedName(localToParentTransformProperty,[Default]), UsedName(isFocusTraversable,[Default]))) invalidates 1 classes due to The scalation.scala3d.Line3D has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(autosize,[Default]), UsedName(onKeyTypedProperty,[Default]), UsedName(blendModeProperty,[Default]), UsedName(getId,[Default]), UsedName(getTranslateZ,[Default]), UsedName(materialProperty,[Default]), UsedName(getOnZoom,[Default]), UsedName(getOnSwipeUp,[Default]), UsedName(equals,[Default]), UsedName(getOnDragDone,[Default]), UsedName(impl_getPivotY,[Default]), UsedName(minWidth,[Default]), UsedName(setAccessibleText,[Default]), UsedName(setFocused,[Default]), UsedName(getOnMouseReleased,[Default]), UsedName(getOnZoomFinished,[Default]), UsedName(setStyle,[Default]), UsedName(getOnMouseExited,[Default]), UsedName(getLocalToSceneTransform,[Default]), UsedName(onScrollFinishedProperty,[Default]), UsedName(setOnMouseMoved,[Default]), UsedName(maxWidth,[Default]), UsedName(removeEventFilter,[Default]), UsedName(impl_setStyleMap,[Default]), UsedName(maxHeight,[Default]), UsedName(isPressed,[Default]), UsedName(hashCode,[Default]), UsedName(getTransforms,[Default]), UsedName(setOnScrollStarted,[Default]), UsedName(setOnMouseExited,[Default]), UsedName(setRotate,[Default]), UsedName(isFocused,[Default]), UsedName(inputMethodRequestsProperty,[Default]), UsedName(prefWidth,[Default]), UsedName(impl_pickNodeLocal,[Default]), UsedName(setInputMethodRequests,[Default]), UsedName(setOnRotationFinished,[Default]), UsedName(onScrollStartedProperty,[Default]), UsedName(accessibilityProperties,[Default]), UsedName(styleProperty,[Default]), UsedName(setOnContextMenuRequested,[Default]), UsedName(translateXProperty,[Default]), UsedName(getGeomBounds,[Default]), UsedName(rotationAxisProperty,[Default]), UsedName(effectiveNodeOrientationProperty,[Default]), UsedName(onZoomStartedProperty,[Default]), UsedName(setDerivedDepthTest,[Default]), UsedName($isInstanceOf,[Default]), UsedName(resizeRelocate,[Default]), UsedName(manager,[Default]), UsedName(containsBounds,[Default]), UsedName(getOnRotationStarted,[Default]), UsedName(getOnDragOver,[Default]), UsedName(clone,[Default]), UsedName(getBaselineOffset,[Default]), UsedName(cacheHintProperty,[Default]), UsedName(getOnZoomStarted,[Default]), UsedName(onMouseReleasedProperty,[Default]), UsedName(impl_geomChanged,[Default]), UsedName(notifyAccessibleAttributeChanged,[Default]), UsedName(requestFocus,[Default]), UsedName(effectProperty,[Default]), UsedName(onMousePressedProperty,[Default]), UsedName(setOnKeyTyped,[Default]), UsedName(pickOnBoundsProperty,[Default]), UsedName(impl_createPeer,[Default]), UsedName(isVisible,[Default]), UsedName(setOnSwipeDown,[Default]), UsedName(boundsInLocalProperty,[Default]), UsedName(setHeight,[Default]), UsedName(impl_hasTransforms,[Default]), UsedName(onSwipeDownProperty,[Default]), UsedName(setOnKeyReleased,[Default]), UsedName(isDisable,[Default]), UsedName(setOnMouseDragEntered,[Default]), UsedName(getOnTouchPressed,[Default]), UsedName(onMouseDragExitedProperty,[Default]), UsedName(addEventHandler,[Default]), UsedName(pseudoClassStateChanged,[Default]), UsedName(onDragDoneProperty,[Default]), UsedName(disableProperty,[Default]), UsedName(updateGeomBounds,[Default]), UsedName(toFront,[Default]), UsedName(setOnTouchReleased,[Default]), UsedName(impl_processMXNode,[Default]), UsedName(setOnMouseDragged,[Default]), UsedName(angle,[Default]), UsedName(layoutYProperty,[Default]), UsedName(setOnMouseReleased,[Default]), UsedName(boundsInParentProperty,[Default]), UsedName(getLocalToParentTransform,[Default]), UsedName(getSubScene,[Default]), UsedName(impl_isDirty,[Default]), UsedName(impl_notifyLayoutBoundsChanged,[Default]), UsedName(onDragDroppedProperty,[Default]), UsedName(getOnContextMenuRequested,[Default]), UsedName(impl_traverse,[Default]), UsedName(isInstanceOf,[Default]), UsedName(isResizable,[Default]), UsedName(impl_getLeafTransform,[Default]), UsedName(setLayoutX,[Default]), UsedName(setOnMousePressed,[Default]), UsedName(hoverProperty,[Default]), UsedName(getOnScroll,[Default]), UsedName(setCacheHint,[Default]), UsedName(getOnTouchReleased,[Default]), UsedName(setUserData,[Default]), UsedName(boundedSize,[Default]), UsedName(sceneToLocal,[Default]), UsedName(updateBounds,[Default]), UsedName(getCursor,[Default]), UsedName(scaleYProperty,[Default]), UsedName(mouseTransparentProperty,[Default]), UsedName(onMouseClickedProperty,[Default]), UsedName(finalize,[Default]), UsedName(getTransformedBounds,[Default]), UsedName(setScaleX,[Default]), UsedName(localToParent,[Default]), UsedName(getParent,[Default]), UsedName(onContextMenuRequestedProperty,[Default]), UsedName(updateLocalToParentTransform,[Default]), UsedName(setOnScrollFinished,[Default]), UsedName(setOnDragOver,[Default]), UsedName(asInstanceOf,[Default]), UsedName(setDisabled,[Default]), UsedName(FocusedProperty,[Default]), UsedName(getStyle,[Default]), UsedName($asInstanceOf,[Default]), UsedName(prefHeight,[Default]), UsedName(impl_cssGetFocusTraversableInitialValue,[Default]), UsedName(setOnZoom,[Default]), UsedName(getOnKeyReleased,[Default]), UsedName(impl_computeIntersects,[Default]), UsedName(eventDispatcherProperty,[Default]), UsedName(key,[Default]), UsedName(getTranslateY,[Default]), UsedName(sceneProperty,[Default]), UsedName(setOnSwipeLeft,[Default]), UsedName(getAccessible,[Default]), UsedName(pseudoClassStates,[Default]), UsedName(onDragDetectedProperty,[Default]), UsedName(lookup,[Default]), UsedName(setOnSwipeRight,[Default]), UsedName(drawModeProperty,[Default]), UsedName(cacheProperty,[Default]), UsedName(impl_computeGeomBounds,[Default]), UsedName(!=,[Default]), UsedName(notifyParentOfBoundsChange,[Default]), UsedName(parentResolvedOrientationInvalidated,[Default]), UsedName(impl_treeVisibleProperty,[Default]), UsedName(setCullFace,[Default]), UsedName(executeAccessibleAction,[Default]), UsedName(onInputMethodTextChangedProperty,[Default]), UsedName(impl_computeContains,[Default]), UsedName(getCssMetaData,[Default]), UsedName(getLocalBounds,[Default]), UsedName(notifyAll,[Default]), UsedName(translateZProperty,[Default]), UsedName(getOnMousePressed,[Default]), UsedName(setOnMouseDragOver,[Default]), UsedName(getStyleClass,[Default]), UsedName(cullFaceProperty,[Default]), UsedName(onDragOverProperty,[Default]), UsedName(getOnInputMethodTextChanged,[Default]), UsedName(radiusProperty,[Default]), UsedName(resize,[Default]), UsedName(setFocusTraversable,[Default]), UsedName(setOnMouseDragExited,[Default]), UsedName(onDragExitedProperty,[Default]), UsedName(getClass,[Default]), UsedName(notifyParentsOfInvalidatedCSS,[Default]), UsedName(heightProperty,[Default]), UsedName(getOnMouseDragExited,[Default]), UsedName(getEffect,[Default]), UsedName(setVisible,[Default]), UsedName(impl_layoutBoundsChanged,[Default]), UsedName(setOnTouchMoved,[Default]), UsedName(setOnDragDone,[Default]), UsedName(onSwipeLeftProperty,[Default]), UsedName(markDirtyLayoutBranch,[Default]), UsedName(setOnMouseClicked,[Default]), UsedName(setAccessibleRoleDescription,[Default]), UsedName(setOnDragDropped,[Default]), UsedName(contains,[Default]), UsedName(getClipParent,[Default]), UsedName(styleHelper,[Default]), UsedName(nodeResolvedOrientationChanged,[Default]), UsedName(localToScreen,[Default]), UsedName(startDragAndDrop,[Default]), UsedName(getOnDragDropped,[Default]), UsedName(scalation;scala3d;Line3D;init;,[Default]), UsedName(disabledProperty,[Default]), UsedName(getBoundsInParent,[Default]), UsedName(getBlendMode,[Default]), UsedName(nodeResolvedOrientationInvalidated,[Default]), UsedName(TreeVisiblePropertyReadOnly,[Default]), UsedName(getOnKeyTyped,[Default]), UsedName(onMouseDraggedProperty,[Default]), UsedName(onKeyPressedProperty,[Default]), UsedName(rotation,[Default]), UsedName(getCSSFlags,[Default]), UsedName(localToScene,[Default]), UsedName(setRotationAxis,[Default]), UsedName(translateYProperty,[Default]), UsedName(axis,[Default]), UsedName(snapshot,[Default]), UsedName(accessibleRoleDescriptionProperty,[Default]), UsedName(getOnDragExited,[Default]), UsedName(isCanReceiveFocus,[Default]), UsedName(opacityProperty,[Default]), UsedName(==,[Default]), UsedName(isDisabled,[Default]), UsedName(notify,[Default]), UsedName(isManaged,[Default]), UsedName(minHeight,[Default]), UsedName(idProperty,[Default]), UsedName(getLayoutBounds,[Default]), UsedName(setRadius,[Default]), UsedName(isDerivedDepthTest,[Default]), UsedName(getScene,[Default]), UsedName(setOnTouchPressed,[Default]), UsedName(getNodeOrientation,[Default]), UsedName(getPseudoClassStates,[Default]), UsedName(getRadius,[Default]), UsedName(accessibleHelpProperty,[Default]), UsedName(setParent,[Default]), UsedName(parentProperty,[Default]), UsedName(getLayoutX,[Default]), UsedName(getOpacity,[Default]), UsedName(onMouseDragEnteredProperty,[Default]), UsedName(setDepthTest,[Default]), UsedName(setScaleZ,[Default]), UsedName(impl_updatePeer,[Default]), UsedName(setOnDragExited,[Default]), UsedName(setScaleY,[Default]), UsedName(getOnDragEntered,[Default]), UsedName(focusTraversableProperty,[Default]), UsedName(impl_getPivotZ,[Default]), UsedName(getContentBias,[Default]), UsedName(fireEvent,[Default]), UsedName(accessibleTextProperty,[Default]), UsedName(getOnMouseEntered,[Default]), UsedName(buildEventDispatchChain,[Default]), UsedName(impl_isTreeVisible,[Default]), UsedName(setCursor,[Default]), UsedName(usesMirroring,[Default]), UsedName(hasProperties,[Default]), UsedName(getMaterial,[Default]), UsedName(getAccessibleHelp,[Default]), UsedName(impl_intersectsBounds,[Default]), UsedName(focusedProperty,[Default]), UsedName(synchronized,[Default]), UsedName(setScenes,[Default]), UsedName(accessible,[Default]), UsedName(hasMirroring,[Default]), UsedName(onMouseDragOverProperty,[Default]), UsedName(queryAccessibleAttribute,[Default]), UsedName(onMouseMovedProperty,[Default]), UsedName(getDepthTest,[Default]), UsedName(setOnRotate,[Default]), UsedName(impl_markDirty,[Default]), UsedName(getCacheHint,[Default]), UsedName(getOnMouseDragEntered,[Default]), UsedName(getOnDragDetected,[Default]), UsedName(nodeOrientationProperty,[Default]), UsedName(getOnSwipeDown,[Default]), UsedName(setOnKeyPressed,[Default]), UsedName(toString,[Default]), UsedName(getScaleX,[Default]), UsedName(getOnRotationFinished,[Default]), UsedName(getOnTouchStationary,[Default]), UsedName(isHover,[Default]), UsedName(localBoundsChanged,[Default]), UsedName(getInputMethodRequests,[Default]), UsedName(##,[Default]), UsedName(setPickOnBounds,[Default]), UsedName(midPt,[Default]), UsedName(getBoundsInLocal,[Default]), UsedName(getProperties,[Default]), UsedName(intersects,[Default]), UsedName(getOnScrollFinished,[Default]), UsedName(releaseAccessible,[Default]), UsedName(setDrawMode,[Default]), UsedName(computeAreaInScreen,[Default]), UsedName(parentToLocal,[Default]), UsedName(translateMidpoint,[Default]), UsedName(getOnRotate,[Default]), UsedName(setTreeVisible,[Default]), UsedName(impl_isDirtyEmpty,[Default]), UsedName(isMouseTransparent,[Default]), UsedName(processCSS,[Default]), UsedName(setClip,[Default]), UsedName(getAccessibleRoleDescription,[Default]), UsedName(getStyleableParent,[Default]), UsedName(getScaleY,[Default]), UsedName(wait,[Default]), UsedName(setDisable,[Default]), UsedName(impl_syncPeer,[Default]), UsedName(visibleProperty,[Default]), UsedName(getCurrentLocalToSceneTransformState,[Default]), UsedName(getHeight,[Default]), UsedName(setOnSwipeUp,[Default]), UsedName(setId,[Default]), UsedName(startFullDrag,[Default]), UsedName(getScaleZ,[Default]), UsedName(impl_computeLayoutBounds,[Default]), UsedName(onSwipeUpProperty,[Default]), UsedName(scenesChanged,[Default]), UsedName(getRotate,[Default]), UsedName(setMouseTransparent,[Default]), UsedName(isCache,[Default]), UsedName(setAccessibleHelp,[Default]), UsedName(notifyManagedChanged,[Default]), UsedName(onKeyReleasedProperty,[Default]), UsedName(impl_showMnemonicsProperty,[Default]), UsedName(setOnInputMethodTextChanged,[Default]), UsedName(layoutBoundsProperty,[Default]), UsedName(getTypeSelector,[Default]), UsedName(getEffectiveNodeOrientation,[Default]), UsedName(getUserData,[Default]), UsedName(isPickOnBounds,[Default]), UsedName(setOnScroll,[Default]), UsedName(onRotationStartedProperty,[Default]), UsedName(impl_getPivotX,[Default]), UsedName(getAccessibleRole,[Default]), UsedName(ne,[Default]), UsedName(getRotationAxis,[Default]), UsedName(managedProperty,[Default]), UsedName(getOnTouchMoved,[Default]), UsedName(localToSceneTransformProperty,[Default]), UsedName(onRotateProperty,[Default]), UsedName(screenToLocal,[Default]), UsedName(onScrollProperty,[Default]), UsedName(indent,[Default]), UsedName(getClip,[Default]), UsedName(relocate,[Default]), UsedName(impl_getPeer,[Default]), UsedName(getOnSwipeLeft,[Default]), UsedName(updateTxBounds,[Default]), UsedName(setManaged,[Default]), UsedName(setOnDragDetected,[Default]), UsedName(setNodeOrientation,[Default]), UsedName(setOnMouseEntered,[Default]), UsedName(getOnMouseClicked,[Default]), UsedName(setOnZoomStarted,[Default]), UsedName(impl_findStyles,[Default]), UsedName(onTouchStationaryProperty,[Default]), UsedName(setTranslateZ,[Default]), UsedName(impl_reapplyCSS,[Default]), UsedName(impl_clearDirty,[Default]), UsedName(getOnMouseDragged,[Default]), UsedName(layoutXProperty,[Default]), UsedName(getOnMouseDragReleased,[Default]), UsedName(onMouseDragReleasedProperty,[Default]), UsedName(impl_transformsChanged,[Default]), UsedName(setOnRotationStarted,[Default]), UsedName(setEventHandler,[Default]), UsedName(getCullFace,[Default]), UsedName(getEventDispatcher,[Default]), UsedName(accessibleRoleProperty,[Default]), UsedName(depthTestProperty,[Default]), UsedName(applyCss,[Default]), UsedName(getOnSwipeRight,[Default]), UsedName(computeDerivedDepthTest,[Default]), UsedName(onSwipeRightProperty,[Default]), UsedName(setEventDispatcher,[Default]), UsedName(setOnDragEntered,[Default]), UsedName(removeEventHandler,[Default]), UsedName(Line3D,[Default]), UsedName(impl_setShowMnemonics,[Default]), UsedName(onRotationFinishedProperty,[Default]), UsedName(impl_cssGetCursorInitialValue,[Default]), UsedName(setOnTouchStationary,[Default]), UsedName(impl_pickNode,[Default]), UsedName(setLayoutY,[Default]), UsedName(lookupAll,[Default]), UsedName(scaleZProperty,[Default]), UsedName(rotateProperty,[Default]), UsedName(onTouchReleasedProperty,[Default]), UsedName(pressedProperty,[Default]), UsedName(setCache,[Default]), UsedName(onZoomProperty,[Default]), UsedName(setMaterial,[Default]), UsedName(boundsChanged,[Default]), UsedName(impl_processCSS,[Default]), UsedName(setAccessibleRole,[Default]), UsedName(setPressed,[Default]), UsedName(getAccessibleText,[Default]), UsedName(isConnected,[Default]), UsedName(onTouchMovedProperty,[Default]), UsedName(setOpacity,[Default]), UsedName(impl_isShowMnemonics,[Default]), UsedName(onDragEnteredProperty,[Default]), UsedName(clipProperty,[Default]), UsedName(scaleXProperty,[Default]), UsedName(cursorProperty,[Default]), UsedName(toBack,[Default]), UsedName(setEffect,[Default]), UsedName(setOnMouseDragReleased,[Default]), UsedName(getOnMouseMoved,[Default]), UsedName(onMouseExitedProperty,[Default]), UsedName(getDrawMode,[Default]), UsedName(wouldCreateCycle,[Default]), UsedName(setTranslateX,[Default]), UsedName(getLayoutY,[Default]), UsedName(getDivisions,[Default]), UsedName(setTranslateY,[Default]), UsedName(setOnZoomFinished,[Default]), UsedName(onMouseEnteredProperty,[Default]), UsedName(cssFlag,[Default]), UsedName(impl_intersects,[Default]), UsedName(getOnKeyPressed,[Default]), UsedName(getOnMouseDragOver,[Default]), UsedName(onTouchPressedProperty,[Default]), UsedName(getOnScrollStarted,[Default]), UsedName(setHover,[Default]), UsedName(getTranslateX,[Default]), UsedName(onZoomFinishedProperty,[Default]), UsedName(setBlendMode,[Default]), UsedName(addEventFilter,[Default]), UsedName(transformedBoundsChanged,[Default]), UsedName(eq,[Default]), UsedName(impl_getStyleMap,[Default]), UsedName(localToParentTransformProperty,[Default]), UsedName(isFocusTraversable,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.scala3d.Line3D)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.graph_algebra.MuGraphGenTest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.graph_algebra.MuGraphGenTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.graph_algebra.MuGraphGenTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.graph_algebra.MuGraphGenTest,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(g1,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(mgGen,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(MuGraphGenTest,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.graph_algebra.MuGraphGenTest has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(g1,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(mgGen,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(MuGraphGenTest,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.graph_algebra.MuGraphGenTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.GraphTest4...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.GraphTest4)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.GraphTest4)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.GraphTest4,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(pred,[Default]), UsedName(t,[Default]), UsedName(main,[Default]), UsedName(labl,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(GraphTest4,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.GraphTest4 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(pred,[Default]), UsedName(t,[Default]), UsedName(main,[Default]), UsedName(labl,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(GraphTest4,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.GraphTest4)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.distributed_db.select...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.distributed_db.select)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.distributed_db.select)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.distributed_db.RelationDBMaster: Set(UsedName(isInstanceOf,[Default]), UsedName(name,[Default]), UsedName(asInstanceOf,[Default]), UsedName(select,[Default]), UsedName(==,[Default]), UsedName(apply,[Default]), UsedName(ne,[Default]), UsedName(p,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.distributed_db.RelationDBMasterTest: Set(UsedName(select,[Default]), UsedName(apply,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.distributed_db.select,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(copy$default$1,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(canEqual,[Default]), UsedName(productPrefix,[Default]), UsedName(scalation;distributed_db;select;init;,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(name,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(copy$default$2,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(select,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(unapply,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(apply,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(productIterator,[Default]), UsedName(p,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 3 classes due to The scalation.distributed_db.select has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(copy$default$1,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(canEqual,[Default]), UsedName(productPrefix,[Default]), UsedName(scalation;distributed_db;select;init;,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(name,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(copy$default$2,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(select,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(unapply,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(apply,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(productIterator,[Default]), UsedName(p,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.distributed_db.select)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> by member reference: Set(scalation.distributed_db.RelationDBMaster, scalation.distributed_db.RelationDBMasterTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.columnar_db.MakeSchemaTest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.columnar_db.MakeSchemaTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.columnar_db.MakeSchemaTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.columnar_db.MakeSchemaTest,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(productSales_s,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(MakeSchemaTest,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(productSales,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.columnar_db.MakeSchemaTest has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(productSales_s,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(MakeSchemaTest,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(productSales,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.columnar_db.MakeSchemaTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.test.DualIsoPattern_DTest2...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.test.DualIsoPattern_DTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.test.DualIsoPattern_DTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.test.DualIsoPattern_DTest2,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(DualIsoPattern_DTest2,[Default]), UsedName(gLabels,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(gDegree,[Default]), UsedName(inverse,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(qSize,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(qDegree,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(gSize,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.test.DualIsoPattern_DTest2 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(DualIsoPattern_DTest2,[Default]), UsedName(gLabels,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(gDegree,[Default]), UsedName(inverse,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(qSize,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(qDegree,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(gSize,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.test.DualIsoPattern_DTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.dist_db.minusIn...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.dist_db.minusIn)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.dist_db.minusIn)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.dist_db.RelDBMaster: Set(UsedName(isInstanceOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(rName,[Default]), UsedName(==,[Default]), UsedName(apply,[Default]), UsedName(minusIn,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(r,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.dist_db.RelDBWorker: Set(UsedName(isInstanceOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(uc,[Default]), UsedName(rName,[Default]), UsedName(==,[Default]), UsedName(apply,[Default]), UsedName(minusIn,[Default]), UsedName(q,[Default]), UsedName(r,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.dist_db.minusIn,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(copy$default$1,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(canEqual,[Default]), UsedName(curried,[Default]), UsedName(productPrefix,[Default]), UsedName(tupled,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(copy$default$2,[Default]), UsedName(uc,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(rName,[Default]), UsedName(getClass,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(unapply,[Default]), UsedName(scalation;dist_db;minusIn;init;,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(copy$default$4,[Default]), UsedName(apply,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(minusIn,[Default]), UsedName(wait,[Default]), UsedName(copy$default$3,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(r,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 3 classes due to The scalation.dist_db.minusIn has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(copy$default$1,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(canEqual,[Default]), UsedName(curried,[Default]), UsedName(productPrefix,[Default]), UsedName(tupled,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(copy$default$2,[Default]), UsedName(uc,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(rName,[Default]), UsedName(getClass,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(unapply,[Default]), UsedName(scalation;dist_db;minusIn;init;,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(copy$default$4,[Default]), UsedName(apply,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(minusIn,[Default]), UsedName(wait,[Default]), UsedName(copy$default$3,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(r,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.dist_db.minusIn)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> by member reference: Set(scalation.dist_db.RelDBMaster, scalation.dist_db.RelDBWorker)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.scala3d.Point3D_O...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.scala3d.Point3D_O)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.scala3d.Point3D_O)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.scala3d.Point3D_O,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(Point3D_O,[Default]), UsedName(clone,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(Z_AXIS,[Default]), UsedName(apply,[Default]), UsedName(synchronized,[Default]), UsedName(Y_AXIS,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(ZERO,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(X_AXIS,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.scala3d.Point3D_O has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(Point3D_O,[Default]), UsedName(clone,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(Z_AXIS,[Default]), UsedName(apply,[Default]), UsedName(synchronized,[Default]), UsedName(Y_AXIS,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(ZERO,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(X_AXIS,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.scala3d.Point3D_O)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.test.TightPattern_STest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.test.TightPattern_STest)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.test.TightPattern_STest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.test.TightPattern_STest,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(q4w,[Default]), UsedName(finalize,[Default]), UsedName(g4,[Default]), UsedName(q2,[Default]), UsedName(asInstanceOf,[Default]), UsedName(TightPattern_STest,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(q3,[Default]), UsedName(synchronized,[Default]), UsedName(g2,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(q4x,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName(g3,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.test.TightPattern_STest has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(q4w,[Default]), UsedName(finalize,[Default]), UsedName(g4,[Default]), UsedName(q2,[Default]), UsedName(asInstanceOf,[Default]), UsedName(TightPattern_STest,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(q3,[Default]), UsedName(synchronized,[Default]), UsedName(g2,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(q4x,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName(g3,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.test.TightPattern_STest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.GraphMetrics...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.GraphMetrics)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.GraphMetrics)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.GraphMetrics,ModifiedNames(changes = UsedName(diam,[Default]), UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName(rad,[Default]), UsedName(scalation;graph_db;GraphMetrics;init;,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(GraphMetrics,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(ecc,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(stats,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(central,[Default]), UsedName(<init>$default$2,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.graph_db.GraphMetrics has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(diam,[Default]), UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName(rad,[Default]), UsedName(scalation;graph_db;GraphMetrics;init;,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(GraphMetrics,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(ecc,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(stats,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(central,[Default]), UsedName(<init>$default$2,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.GraphMetrics)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graphalytics.Ball...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graphalytics.Ball)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graphalytics.Ball)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graphalytics.Ball,ModifiedNames(changes = UsedName(nodesInBall,[Default]), UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(Ball,[Default]), UsedName(borderNodes,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getBallDiameter,[Default]), UsedName(chMap,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(center,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(merge,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(paMap,[Default]), UsedName(pre,[Default]), UsedName(post,[Default]), UsedName(scalation;graphalytics;Ball;init;,[Default]), UsedName(printBall,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.graphalytics.Ball has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(nodesInBall,[Default]), UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(Ball,[Default]), UsedName(borderNodes,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getBallDiameter,[Default]), UsedName(chMap,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(center,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(merge,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(paMap,[Default]), UsedName(pre,[Default]), UsedName(post,[Default]), UsedName(scalation;graphalytics;Ball;init;,[Default]), UsedName(printBall,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graphalytics.Ball)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.MDualSim2Test4...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.MDualSim2Test4)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.MDualSim2Test4)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.MDualSim2Test4,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(MDualSim2Test4,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.MDualSim2Test4 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(MDualSim2Test4,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.MDualSim2Test4)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.MGraphSimWTest3...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.MGraphSimWTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.MGraphSimWTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.MGraphSimWTest3,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(MGraphSimWTest3,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.MGraphSimWTest3 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(MGraphSimWTest3,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.MGraphSimWTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.GraphTest2...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.GraphTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.GraphTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.GraphTest2,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(GraphTest2,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.GraphTest2 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(GraphTest2,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.GraphTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.DualSim2CARTest3...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.DualSim2CARTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.DualSim2CARTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.DualSim2CARTest3,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(qAvDegree,[Default]), UsedName(qSize,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(DualSim2CARTest3,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(gAvDegree,[Default]), UsedName(nLabels,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(gSize,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.DualSim2CARTest3 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(qAvDegree,[Default]), UsedName(qSize,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(DualSim2CARTest3,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(gAvDegree,[Default]), UsedName(nLabels,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(gSize,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.DualSim2CARTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.distributed_db.productIn...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.distributed_db.productIn)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.distributed_db.productIn)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.distributed_db.RelationDBMaster: Set(UsedName(isInstanceOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(productIn,[Default]), UsedName(==,[Default]), UsedName(apply,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(r,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.distributed_db.RelationDBWorker: Set(UsedName(isInstanceOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(productIn,[Default]), UsedName(uc,[Default]), UsedName(==,[Default]), UsedName(apply,[Default]), UsedName(q,[Default]), UsedName(r,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.distributed_db.productIn,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(copy$default$1,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(canEqual,[Default]), UsedName(curried,[Default]), UsedName(productPrefix,[Default]), UsedName(tupled,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(productIn,[Default]), UsedName(copy$default$2,[Default]), UsedName(uc,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(scalation;distributed_db;productIn;init;,[Default]), UsedName(unapply,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(apply,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(copy$default$3,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(r,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 3 classes due to The scalation.distributed_db.productIn has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(copy$default$1,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(canEqual,[Default]), UsedName(curried,[Default]), UsedName(productPrefix,[Default]), UsedName(tupled,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(productIn,[Default]), UsedName(copy$default$2,[Default]), UsedName(uc,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(scalation;distributed_db;productIn;init;,[Default]), UsedName(unapply,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(apply,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(copy$default$3,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(r,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.distributed_db.productIn)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> by member reference: Set(scalation.distributed_db.RelationDBMaster, scalation.distributed_db.RelationDBWorker)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.columnar_db.Query1...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.columnar_db.Query1)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.columnar_db.Query1)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.columnar_db.Query1,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(doUpdate,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(flaw,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(Query1,[Default]), UsedName(doQuery,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.columnar_db.Query1 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(doUpdate,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(flaw,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(Query1,[Default]), UsedName(doQuery,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.columnar_db.Query1)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.DualSimCARTest4...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.DualSimCARTest4)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.DualSimCARTest4)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.DualSimCARTest4,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(DualSimCARTest4,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.DualSimCARTest4 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(DualSimCARTest4,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.DualSimCARTest4)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.columnar_db.Imputation...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.columnar_db.Imputation)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.columnar_db.Imputation)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.preprocessing.PreProcessingMaster: Set(UsedName(isInstanceOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(Imputation,[Default]), UsedName(==,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.preprocessing.replaceMissingStrings: Set(UsedName($isInstanceOf,[Default]), UsedName(isInstanceOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(Imputation,[Default]), UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(eq,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.preprocessing.replaceMissingValues: Set(UsedName($isInstanceOf,[Default]), UsedName(isInstanceOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(Imputation,[Default]), UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(eq,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.columnar_db.Imputation,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(Imputation,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(impute,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(eq,[Default]))) invalidates 4 classes due to The scalation.columnar_db.Imputation has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(Imputation,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(impute,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.columnar_db.Imputation)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> by member reference: Set(scalation.preprocessing.PreProcessingMaster, scalation.preprocessing.replaceMissingStrings, scalation.preprocessing.replaceMissingValues)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.dist_db.RelDBMaster...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.dist_db.RelDBMaster)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.dist_db.RelDBMaster)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.dist_db.RelDBMaster,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(preComp,[Default]), UsedName(subRelation,[Default]), UsedName(rSeq,[Default]), UsedName(hashCode,[Default]), UsedName(randomSeed,[Default]), UsedName($isInstanceOf,[Default]), UsedName(relCheck,[Default]), UsedName(clone,[Default]), UsedName(numOfRoutees,[Default]), UsedName(retTableMap,[Default]), UsedName(receive,[Default]), UsedName(ri,[Default]), UsedName(isInstanceOf,[Default]), UsedName(self,[Implicit]), UsedName(finalize,[Default]), UsedName(preRestart,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(updating,[Default]), UsedName(aroundPreStart,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(postStop,[Default]), UsedName(getClass,[Default]), UsedName(postRestart,[Default]), UsedName(aroundPreRestart,[Default]), UsedName(RelDBMaster,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(DBHandler,[Default]), UsedName(tableMap,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(scalation;dist_db;RelDBMaster;init;,[Default]), UsedName(##,[Default]), UsedName(sender,[Default]), UsedName(wait,[Default]), UsedName(supervisorStrategy,[Default]), UsedName(aroundPostStop,[Default]), UsedName(ne,[Default]), UsedName(context,[Implicit]), UsedName(unhandled,[Default]), UsedName(Receive,[Default]), UsedName(aroundPostRestart,[Default]), UsedName(router,[Default]), UsedName(aroundReceive,[Default]), UsedName(preStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.dist_db.RelDBMaster has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(self,[Implicit]), UsedName(context,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.dist_db.RelDBMaster)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.MGraphSim2X...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.MGraphSim2X)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.MGraphSim2X)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.MGraphSim2X,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(test$default$2,[Default]), UsedName(hashCode,[Default]), UsedName(scalation;graph_db;pattern_matching;MGraphSim2X;init;,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(feasibleMatesW,[Default]), UsedName(isInstanceOf,[Default]), UsedName(bijections,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(MGraphSim2X,[Default]), UsedName(disjoint,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(qRange,[Default]), UsedName(notifyAll,[Default]), UsedName(SELF_LOOPS,[Default]), UsedName(getClass,[Default]), UsedName(LIMIT,[Default]), UsedName(gRange,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(feasibleMates,[Default]), UsedName(CHECK,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(test,[Default]), UsedName(showMappings,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(countMappings,[Default]), UsedName(filterGraph,[Default]), UsedName(prune,[Default]), UsedName(mappings,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.MGraphSim2X has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(test$default$2,[Default]), UsedName(hashCode,[Default]), UsedName(scalation;graph_db;pattern_matching;MGraphSim2X;init;,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(feasibleMatesW,[Default]), UsedName(isInstanceOf,[Default]), UsedName(bijections,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(MGraphSim2X,[Default]), UsedName(disjoint,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(qRange,[Default]), UsedName(notifyAll,[Default]), UsedName(SELF_LOOPS,[Default]), UsedName(getClass,[Default]), UsedName(LIMIT,[Default]), UsedName(gRange,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(feasibleMates,[Default]), UsedName(CHECK,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(test,[Default]), UsedName(showMappings,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(countMappings,[Default]), UsedName(filterGraph,[Default]), UsedName(prune,[Default]), UsedName(mappings,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.MGraphSim2X)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.MGraphSim2XTest3...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.MGraphSim2XTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.MGraphSim2XTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.MGraphSim2XTest3,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(MGraphSim2XTest3,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.MGraphSim2XTest3 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(MGraphSim2XTest3,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.MGraphSim2XTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.spatial.Vector3D...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.spatial.Vector3D)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.spatial.Vector3D)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.spatial.Vector3D,ModifiedNames(changes = UsedName(exists,[Default]), UsedName(filterMissing,[Default]), UsedName(recip,[Default]), UsedName(oneAt,[Default]), UsedName(equals,[Default]), UsedName(++:,[Default]), UsedName(repr,[Default]), UsedName(one$default$1,[Default]), UsedName(argmaxPos,[Default]), UsedName(lastOption,[Default]), UsedName(WithFilter,[Default]), UsedName(range,[Default]), UsedName(init,[Default]), UsedName(firstPos,[Default]), UsedName(fold,[Default]), UsedName(Vector3D,[Default]), UsedName(sliceWithKnownBound,[Default]), UsedName(hashCode,[Default]), UsedName(find,[Default]), UsedName(reduceOption,[Default]), UsedName(last,[Default]), UsedName(cumulate,[Default]), UsedName(containsAny,[Default]), UsedName(toTraversable,[Default]), UsedName(sq,[Default]), UsedName(min$default$1,[Default]), UsedName(headOption,[Default]), UsedName($isInstanceOf,[Default]), UsedName(firstNeg$default$1,[Default]), UsedName(argminNeg$default$1,[Default]), UsedName(aggregate,[Default]), UsedName(clone,[Default]), UsedName(:\,[Default]), UsedName(selectEx,[Default]), UsedName(sort,[Default]), UsedName(countZero,[Default]), UsedName(isTraversableAgain,[Default]), UsedName(intersect,[Default]), UsedName(max$default$1,[Default]), UsedName(firstPos$default$1,[Default]), UsedName(sort2,[Default]), UsedName(fString,[Default]), UsedName(distinct,[Default]), UsedName(_oneAt$default$2,[Default]), UsedName(reduceLeftOption,[Default]), UsedName(-,[Default]), UsedName(groupBy,[Default]), UsedName(parCombiner,[Default]), UsedName(isInstanceOf,[Default]), UsedName(unzip,[Default]), UsedName(inits,[Default]), UsedName(indexOf,[Default]), UsedName(max,[Default]), UsedName(tryCompareTo,[Default]), UsedName(mean,[Default]), UsedName(finalize,[Default]), UsedName(hasDefiniteSize,[Default]), UsedName(*=,[Default]), UsedName(≤,[Default]), UsedName(nonEmpty,[Default]), UsedName(take,[Default]), UsedName(<=,[Default]), UsedName(asInstanceOf,[Default]), UsedName(>,[Default]), UsedName(toIndexedSeq,[Default]), UsedName(update,[Default]), UsedName(toList,[Default]), UsedName(map,[Default]), UsedName(v,[Default]), UsedName($asInstanceOf,[Default]), UsedName(pvariance,[Default]), UsedName(span,[Default]), UsedName(minBy,[Default]), UsedName(toCollection,[Default]), UsedName(*,[Default]), UsedName(toLong,[Default]), UsedName(++,[Default]), UsedName(transpose,[Default]), UsedName(sliceWithKnownDelta,[Default]), UsedName(unary_-,[Default]), UsedName(swap,[Default]), UsedName(toDouble,[Default]), UsedName(reduceRightOption,[Default]), UsedName(mag,[Default]), UsedName(filter,[Default]), UsedName(!=,[Default]), UsedName(zero,[Default]), UsedName(zero$default$1,[Default]), UsedName(copyToArray,[Default]), UsedName(isSorted,[Default]), UsedName(/:,[Default]), UsedName(+,[Default]), UsedName(≠,[Default]), UsedName(notifyAll,[Default]), UsedName(dim,[Default]), UsedName(normalize1,[Default]), UsedName(reversed,[Default]), UsedName(getClass,[Default]), UsedName(select,[Default]), UsedName(drop,[Default]), UsedName(filterNot,[Default]), UsedName(expand,[Default]), UsedName(stringPrefix,[Default]), UsedName(z,[Default]), UsedName(product,[Default]), UsedName(dot,[Default]), UsedName(contains,[Default]), UsedName(toVector,[Default]), UsedName(copy,[Default]), UsedName(argmaxPos$default$1,[Default]), UsedName(reduceLeft,[Default]), UsedName(scan,[Default]), UsedName(maxBy,[Default]), UsedName(reduceRight,[Default]), UsedName(count,[Default]), UsedName(clean$default$1,[Default]), UsedName(_oneAt,[Default]), UsedName(reverse,[Default]), UsedName(setFormat,[Default]), UsedName(toDense,[Default]), UsedName(∙,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(collectFirst,[Default]), UsedName(≥,[Default]), UsedName(foldLeft,[Default]), UsedName(countPos,[Default]), UsedName(scalation;spatial;Vector3D;init;,[Default]), UsedName(argminNeg,[Default]), UsedName(y,[Default]), UsedName(toIterator,[Default]), UsedName(filterImpl,[Default]), UsedName(toIterable,[Default]), UsedName(toInt,[Default]), UsedName(clean$default$2,[Default]), UsedName(seq,[Default]), UsedName(filterPos2,[Default]), UsedName(apply,[Default]), UsedName(<init>$default$1,[Default]), UsedName(foreach,[Default]), UsedName(par,[Default]), UsedName(<,[Default]), UsedName(reduce,[Default]), UsedName(synchronized,[Default]), UsedName(genericBuilder,[Default]), UsedName(~^,[Default]), UsedName(takeWhile,[Default]), UsedName(oneAt$default$2,[Default]), UsedName(tail,[Default]), UsedName(to,[Default]), UsedName(set,[Default]), UsedName(Self,[Default]), UsedName(toString,[Default]), UsedName(normalize,[Default]), UsedName(/,[Default]), UsedName(toSeq,[Default]), UsedName(mkString,[Default]), UsedName(##,[Default]), UsedName(slice$default$2,[Default]), UsedName(view,[Default]), UsedName(-=,[Default]), UsedName(flaw,[Default]), UsedName(normSq,[Default]), UsedName(countNeg,[Default]), UsedName(size,[Default]), UsedName(one,[Default]), UsedName(flatMap,[Default]), UsedName(sumNE,[Default]), UsedName(dropWhile,[Default]), UsedName(wait,[Default]), UsedName(countinct,[Default]), UsedName(copyToBuffer,[Default]), UsedName(unzip3,[Default]), UsedName(toSet,[Default]), UsedName(rank,[Default]), UsedName(/=,[Default]), UsedName(scanLeft,[Default]), UsedName(newBuilder,[Default]), UsedName(normalizeU,[Default]), UsedName(indices,[Default]), UsedName(argmin$default$1,[Default]), UsedName(ne,[Default]), UsedName(toBuffer,[Default]), UsedName(sum,[Default]), UsedName(argmax,[Default]), UsedName(firstNeg,[Default]), UsedName(toMap,[Default]), UsedName(toArray,[Default]), UsedName(~^=,[Default]), UsedName(min,[Default]), UsedName(+=,[Default]), UsedName(addString,[Default]), UsedName(norm1,[Default]), UsedName(withFilter,[Default]), UsedName(argmax$default$1,[Default]), UsedName(scanRight,[Default]), UsedName(thisCollection,[Default]), UsedName(clean,[Default]), UsedName(indexWhere,[Default]), UsedName(sameDimensions,[Default]), UsedName(>=,[Default]), UsedName(filterPos,[Default]), UsedName(argmin,[Default]), UsedName(toStream,[Default]), UsedName(norm,[Default]), UsedName(indexOf$default$2,[Default]), UsedName(variance,[Default]), UsedName(sliceEx,[Default]), UsedName(abs,[Default]), UsedName(head,[Default]), UsedName(x,[Default]), UsedName(slice,[Default]), UsedName(collect,[Default]), UsedName(tails,[Default]), UsedName(split,[Default]), UsedName(companion,[Default]), UsedName(isEmpty,[Default]), UsedName(sizeHintIfCheap,[Default]), UsedName(splitAt,[Default]), UsedName(forall,[Default]), UsedName(nd,[Default]), UsedName(foldRight,[Default]), UsedName(sumPos,[Default]), UsedName(partition,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]), UsedName(isNonnegative,[Default]), UsedName(flatten,[Default]), UsedName(expand$default$1,[Default]))) invalidates 1 classes due to The scalation.spatial.Vector3D has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(exists,[Default]), UsedName(filterMissing,[Default]), UsedName(recip,[Default]), UsedName(oneAt,[Default]), UsedName(equals,[Default]), UsedName(++:,[Default]), UsedName(repr,[Default]), UsedName(one$default$1,[Default]), UsedName(argmaxPos,[Default]), UsedName(lastOption,[Default]), UsedName(WithFilter,[Default]), UsedName(range,[Default]), UsedName(init,[Default]), UsedName(firstPos,[Default]), UsedName(fold,[Default]), UsedName(Vector3D,[Default]), UsedName(sliceWithKnownBound,[Default]), UsedName(hashCode,[Default]), UsedName(find,[Default]), UsedName(reduceOption,[Default]), UsedName(last,[Default]), UsedName(cumulate,[Default]), UsedName(containsAny,[Default]), UsedName(toTraversable,[Default]), UsedName(sq,[Default]), UsedName(min$default$1,[Default]), UsedName(headOption,[Default]), UsedName($isInstanceOf,[Default]), UsedName(firstNeg$default$1,[Default]), UsedName(argminNeg$default$1,[Default]), UsedName(aggregate,[Default]), UsedName(clone,[Default]), UsedName(:\,[Default]), UsedName(selectEx,[Default]), UsedName(sort,[Default]), UsedName(countZero,[Default]), UsedName(isTraversableAgain,[Default]), UsedName(intersect,[Default]), UsedName(max$default$1,[Default]), UsedName(firstPos$default$1,[Default]), UsedName(sort2,[Default]), UsedName(fString,[Default]), UsedName(distinct,[Default]), UsedName(_oneAt$default$2,[Default]), UsedName(reduceLeftOption,[Default]), UsedName(-,[Default]), UsedName(groupBy,[Default]), UsedName(parCombiner,[Default]), UsedName(isInstanceOf,[Default]), UsedName(unzip,[Default]), UsedName(inits,[Default]), UsedName(indexOf,[Default]), UsedName(max,[Default]), UsedName(tryCompareTo,[Default]), UsedName(mean,[Default]), UsedName(finalize,[Default]), UsedName(hasDefiniteSize,[Default]), UsedName(*=,[Default]), UsedName(≤,[Default]), UsedName(nonEmpty,[Default]), UsedName(take,[Default]), UsedName(<=,[Default]), UsedName(asInstanceOf,[Default]), UsedName(>,[Default]), UsedName(toIndexedSeq,[Default]), UsedName(update,[Default]), UsedName(toList,[Default]), UsedName(map,[Default]), UsedName(v,[Default]), UsedName($asInstanceOf,[Default]), UsedName(pvariance,[Default]), UsedName(span,[Default]), UsedName(minBy,[Default]), UsedName(toCollection,[Default]), UsedName(*,[Default]), UsedName(toLong,[Default]), UsedName(++,[Default]), UsedName(transpose,[Default]), UsedName(sliceWithKnownDelta,[Default]), UsedName(unary_-,[Default]), UsedName(swap,[Default]), UsedName(toDouble,[Default]), UsedName(reduceRightOption,[Default]), UsedName(mag,[Default]), UsedName(filter,[Default]), UsedName(!=,[Default]), UsedName(zero,[Default]), UsedName(zero$default$1,[Default]), UsedName(copyToArray,[Default]), UsedName(isSorted,[Default]), UsedName(/:,[Default]), UsedName(+,[Default]), UsedName(≠,[Default]), UsedName(notifyAll,[Default]), UsedName(dim,[Default]), UsedName(normalize1,[Default]), UsedName(reversed,[Default]), UsedName(getClass,[Default]), UsedName(select,[Default]), UsedName(drop,[Default]), UsedName(filterNot,[Default]), UsedName(expand,[Default]), UsedName(stringPrefix,[Default]), UsedName(z,[Default]), UsedName(product,[Default]), UsedName(dot,[Default]), UsedName(contains,[Default]), UsedName(toVector,[Default]), UsedName(copy,[Default]), UsedName(argmaxPos$default$1,[Default]), UsedName(reduceLeft,[Default]), UsedName(scan,[Default]), UsedName(maxBy,[Default]), UsedName(reduceRight,[Default]), UsedName(count,[Default]), UsedName(clean$default$1,[Default]), UsedName(_oneAt,[Default]), UsedName(reverse,[Default]), UsedName(setFormat,[Default]), UsedName(toDense,[Default]), UsedName(∙,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(collectFirst,[Default]), UsedName(≥,[Default]), UsedName(foldLeft,[Default]), UsedName(countPos,[Default]), UsedName(scalation;spatial;Vector3D;init;,[Default]), UsedName(argminNeg,[Default]), UsedName(y,[Default]), UsedName(toIterator,[Default]), UsedName(filterImpl,[Default]), UsedName(toIterable,[Default]), UsedName(toInt,[Default]), UsedName(clean$default$2,[Default]), UsedName(seq,[Default]), UsedName(filterPos2,[Default]), UsedName(apply,[Default]), UsedName(<init>$default$1,[Default]), UsedName(foreach,[Default]), UsedName(par,[Default]), UsedName(<,[Default]), UsedName(reduce,[Default]), UsedName(synchronized,[Default]), UsedName(genericBuilder,[Default]), UsedName(~^,[Default]), UsedName(takeWhile,[Default]), UsedName(oneAt$default$2,[Default]), UsedName(tail,[Default]), UsedName(to,[Default]), UsedName(set,[Default]), UsedName(Self,[Default]), UsedName(toString,[Default]), UsedName(normalize,[Default]), UsedName(/,[Default]), UsedName(toSeq,[Default]), UsedName(mkString,[Default]), UsedName(##,[Default]), UsedName(slice$default$2,[Default]), UsedName(view,[Default]), UsedName(-=,[Default]), UsedName(flaw,[Default]), UsedName(normSq,[Default]), UsedName(countNeg,[Default]), UsedName(size,[Default]), UsedName(one,[Default]), UsedName(flatMap,[Default]), UsedName(sumNE,[Default]), UsedName(dropWhile,[Default]), UsedName(wait,[Default]), UsedName(countinct,[Default]), UsedName(copyToBuffer,[Default]), UsedName(unzip3,[Default]), UsedName(toSet,[Default]), UsedName(rank,[Default]), UsedName(/=,[Default]), UsedName(scanLeft,[Default]), UsedName(newBuilder,[Default]), UsedName(normalizeU,[Default]), UsedName(indices,[Default]), UsedName(argmin$default$1,[Default]), UsedName(ne,[Default]), UsedName(toBuffer,[Default]), UsedName(sum,[Default]), UsedName(argmax,[Default]), UsedName(firstNeg,[Default]), UsedName(toMap,[Default]), UsedName(toArray,[Default]), UsedName(~^=,[Default]), UsedName(min,[Default]), UsedName(+=,[Default]), UsedName(addString,[Default]), UsedName(norm1,[Default]), UsedName(withFilter,[Default]), UsedName(argmax$default$1,[Default]), UsedName(scanRight,[Default]), UsedName(thisCollection,[Default]), UsedName(clean,[Default]), UsedName(indexWhere,[Default]), UsedName(sameDimensions,[Default]), UsedName(>=,[Default]), UsedName(filterPos,[Default]), UsedName(argmin,[Default]), UsedName(toStream,[Default]), UsedName(norm,[Default]), UsedName(indexOf$default$2,[Default]), UsedName(variance,[Default]), UsedName(sliceEx,[Default]), UsedName(abs,[Default]), UsedName(head,[Default]), UsedName(x,[Default]), UsedName(slice,[Default]), UsedName(collect,[Default]), UsedName(tails,[Default]), UsedName(split,[Default]), UsedName(companion,[Default]), UsedName(isEmpty,[Default]), UsedName(sizeHintIfCheap,[Default]), UsedName(splitAt,[Default]), UsedName(forall,[Default]), UsedName(nd,[Default]), UsedName(foldRight,[Default]), UsedName(sumPos,[Default]), UsedName(partition,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]), UsedName(isNonnegative,[Default]), UsedName(flatten,[Default]), UsedName(expand$default$1,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.spatial.Vector3D)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.GraphGenTest7...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.GraphGenTest7)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.GraphGenTest7)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.GraphGenTest7,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(GraphGenTest7,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.GraphGenTest7 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(GraphGenTest7,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.GraphGenTest7)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.StrictSimTest3...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.StrictSimTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.StrictSimTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.StrictSimTest3,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(StrictSimTest3,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.StrictSimTest3 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(StrictSimTest3,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.StrictSimTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.graph_algebra.MuGraphSimTest4...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.graph_algebra.MuGraphSimTest4)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.graph_algebra.MuGraphSimTest4)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.graph_algebra.MuGraphSimTest4,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(matcher,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(qAvDegree,[Default]), UsedName(qSize,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(gAvDegree,[Default]), UsedName(nLabels,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(gSize,[Default]), UsedName(MuGraphSimTest4,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.graph_algebra.MuGraphSimTest4 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(matcher,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(qAvDegree,[Default]), UsedName(qSize,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(gAvDegree,[Default]), UsedName(nLabels,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(gSize,[Default]), UsedName(MuGraphSimTest4,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.graph_algebra.MuGraphSimTest4)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.TreeTest4...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.TreeTest4)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.TreeTest4)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.TreeTest4,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(pred,[Default]), UsedName(main,[Default]), UsedName(labl,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(tree,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(TreeTest4,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.TreeTest4 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(pred,[Default]), UsedName(main,[Default]), UsedName(labl,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(tree,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(TreeTest4,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.TreeTest4)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.TightSimTest2...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.TightSimTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.TightSimTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.TightSimTest2,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(TightSimTest2,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.TightSimTest2 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(TightSimTest2,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.TightSimTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graphalytics.GraphSimIso...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graphalytics.GraphSimIso)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graphalytics.GraphSimIso)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graphalytics.GraphSimIso,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(test$default$2,[Default]), UsedName(overlaps,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(isInstanceOf,[Default]), UsedName(bijections,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(disjoint,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(qRange,[Default]), UsedName(notifyAll,[Default]), UsedName(SELF_LOOPS,[Default]), UsedName(getClass,[Default]), UsedName(LIMIT,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(feasibleMates,[Default]), UsedName(CHECK,[Default]), UsedName(GraphSimIso,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(test,[Default]), UsedName(scalation;graphalytics;GraphSimIso;init;,[Default]), UsedName(showMappings,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(makeOrder,[Default]), UsedName(getMatches,[Default]), UsedName(prune,[Default]), UsedName(mappings,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.graphalytics.GraphSimIso has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(test$default$2,[Default]), UsedName(overlaps,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(isInstanceOf,[Default]), UsedName(bijections,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(disjoint,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(qRange,[Default]), UsedName(notifyAll,[Default]), UsedName(SELF_LOOPS,[Default]), UsedName(getClass,[Default]), UsedName(LIMIT,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(feasibleMates,[Default]), UsedName(CHECK,[Default]), UsedName(GraphSimIso,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(test,[Default]), UsedName(scalation;graphalytics;GraphSimIso;init;,[Default]), UsedName(showMappings,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(makeOrder,[Default]), UsedName(getMatches,[Default]), UsedName(prune,[Default]), UsedName(mappings,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graphalytics.GraphSimIso)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.graph_algebra.MuGraph...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.graph_algebra.MuGraph)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.graph_algebra.MuGraph)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.graph_algebra.MuGraph,ModifiedNames(changes = UsedName(nSelfLoops,[Default]), UsedName(equals,[Default]), UsedName(union,[Default]), UsedName(edgeMap,[Default]), UsedName(children,[Default]), UsedName(schema,[Default]), UsedName(apply$default$2,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(label,[Default]), UsedName(printG$default$1,[Default]), UsedName(nEdges,[Default]), UsedName(printG,[Default]), UsedName(apply$default$3,[Default]), UsedName(labelMap,[Default]), UsedName(addVertices$default$3,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(inverse,[Default]), UsedName(name,[Default]), UsedName(vid,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(toLine$default$2,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(ch,[Default]), UsedName(toLine,[Default]), UsedName(getClass,[Default]), UsedName(count,[Default]), UsedName(scalation;graph_db;graph_algebra;MuGraph;init;,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(elabel,[Default]), UsedName(buildLabelMap,[Default]), UsedName(indexEdges,[Default]), UsedName(MuGraph,[Default]), UsedName(apply,[Default]), UsedName(id,[Default]), UsedName(parents,[Default]), UsedName(makeUndirected,[Default]), UsedName(checkEdges,[Default]), UsedName(toGraphIm,[Default]), UsedName(synchronized,[Default]), UsedName(<init>$default$6,[Default]), UsedName(same,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(getVerticesWithLabel,[Default]), UsedName(<init>$default$5,[Default]), UsedName(size,[Default]), UsedName(wait,[Default]), UsedName(addPar,[Default]), UsedName(buildId,[Default]), UsedName(indexMap,[Default]), UsedName(ne,[Default]), UsedName(addVertices,[Default]), UsedName(pa,[Default]), UsedName(<init>$default$7,[Default]), UsedName(checkElabels,[Default]), UsedName(ν,[Default]), UsedName(buildIndex,[Default]), UsedName(isConnected,[Default]), UsedName(toGraphIm$default$1,[Default]), UsedName(<init>$default$4,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.graph_db.graph_algebra.MuGraph has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(nSelfLoops,[Default]), UsedName(equals,[Default]), UsedName(union,[Default]), UsedName(edgeMap,[Default]), UsedName(children,[Default]), UsedName(schema,[Default]), UsedName(apply$default$2,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(label,[Default]), UsedName(printG$default$1,[Default]), UsedName(nEdges,[Default]), UsedName(printG,[Default]), UsedName(apply$default$3,[Default]), UsedName(labelMap,[Default]), UsedName(addVertices$default$3,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(inverse,[Default]), UsedName(name,[Default]), UsedName(vid,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(toLine$default$2,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(ch,[Default]), UsedName(toLine,[Default]), UsedName(getClass,[Default]), UsedName(count,[Default]), UsedName(scalation;graph_db;graph_algebra;MuGraph;init;,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(elabel,[Default]), UsedName(buildLabelMap,[Default]), UsedName(indexEdges,[Default]), UsedName(MuGraph,[Default]), UsedName(apply,[Default]), UsedName(id,[Default]), UsedName(parents,[Default]), UsedName(makeUndirected,[Default]), UsedName(checkEdges,[Default]), UsedName(toGraphIm,[Default]), UsedName(synchronized,[Default]), UsedName(<init>$default$6,[Default]), UsedName(same,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(getVerticesWithLabel,[Default]), UsedName(<init>$default$5,[Default]), UsedName(size,[Default]), UsedName(wait,[Default]), UsedName(addPar,[Default]), UsedName(buildId,[Default]), UsedName(indexMap,[Default]), UsedName(ne,[Default]), UsedName(addVertices,[Default]), UsedName(pa,[Default]), UsedName(<init>$default$7,[Default]), UsedName(checkElabels,[Default]), UsedName(ν,[Default]), UsedName(buildIndex,[Default]), UsedName(isConnected,[Default]), UsedName(toGraphIm$default$1,[Default]), UsedName(<init>$default$4,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.graph_algebra.MuGraph)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.Graph...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.Graph)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.Graph)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.Graph,ModifiedNames(changes = UsedName(nSelfLoops,[Default]), UsedName(equals,[Default]), UsedName(union,[Default]), UsedName(apply$default$2,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(label,[Default]), UsedName(printG$default$1,[Default]), UsedName(nEdges,[Default]), UsedName(printG,[Default]), UsedName(apply$default$3,[Default]), UsedName(labelMap,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(inverse,[Default]), UsedName(name,[Default]), UsedName(vid,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(toLine$default$2,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(ch,[Default]), UsedName(toLine,[Default]), UsedName(Graph,[Default]), UsedName(getClass,[Default]), UsedName(g44,[Default]), UsedName(q44,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(buildLabelMap,[Default]), UsedName(apply,[Default]), UsedName(makeUndirected,[Default]), UsedName(checkEdges,[Default]), UsedName(toGraphIm,[Default]), UsedName(synchronized,[Default]), UsedName(same,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(scalation;graph_db;Graph;init;,[Default]), UsedName(getVerticesWithLabel,[Default]), UsedName(<init>$default$5,[Default]), UsedName(size,[Default]), UsedName(wait,[Default]), UsedName(addPar,[Default]), UsedName(<init>$default$3,[Default]), UsedName(ne,[Default]), UsedName(pa,[Default]), UsedName(isConnected,[Default]), UsedName(toGraphIm$default$1,[Default]), UsedName(<init>$default$4,[Default]), UsedName(<init>$default$2,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.graph_db.Graph has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(nSelfLoops,[Default]), UsedName(equals,[Default]), UsedName(union,[Default]), UsedName(apply$default$2,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(label,[Default]), UsedName(printG$default$1,[Default]), UsedName(nEdges,[Default]), UsedName(printG,[Default]), UsedName(apply$default$3,[Default]), UsedName(labelMap,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(inverse,[Default]), UsedName(name,[Default]), UsedName(vid,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(toLine$default$2,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(ch,[Default]), UsedName(toLine,[Default]), UsedName(Graph,[Default]), UsedName(getClass,[Default]), UsedName(g44,[Default]), UsedName(q44,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(buildLabelMap,[Default]), UsedName(apply,[Default]), UsedName(makeUndirected,[Default]), UsedName(checkEdges,[Default]), UsedName(toGraphIm,[Default]), UsedName(synchronized,[Default]), UsedName(same,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(scalation;graph_db;Graph;init;,[Default]), UsedName(getVerticesWithLabel,[Default]), UsedName(<init>$default$5,[Default]), UsedName(size,[Default]), UsedName(wait,[Default]), UsedName(addPar,[Default]), UsedName(<init>$default$3,[Default]), UsedName(ne,[Default]), UsedName(pa,[Default]), UsedName(isConnected,[Default]), UsedName(toGraphIm$default$1,[Default]), UsedName(<init>$default$4,[Default]), UsedName(<init>$default$2,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.Graph)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.MGraphGenTest5...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.MGraphGenTest5)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.MGraphGenTest5)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.MGraphGenTest5,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(avDegree,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(MGraphGenTest5,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(gGen,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(nLabels,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(nVertices,[Default]), UsedName(eLabels,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.MGraphGenTest5 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(avDegree,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(MGraphGenTest5,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(gGen,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(nLabels,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(nVertices,[Default]), UsedName(eLabels,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.MGraphGenTest5)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.MGraphSimCAR...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.MGraphSimCAR)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.MGraphSimCAR)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.MGraphSimCAR,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(test$default$2,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(feasibleMatesW,[Default]), UsedName(isInstanceOf,[Default]), UsedName(bijections,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(disjoint,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(qRange,[Default]), UsedName(notifyAll,[Default]), UsedName(MGraphSimCAR,[Default]), UsedName(SELF_LOOPS,[Default]), UsedName(getClass,[Default]), UsedName(LIMIT,[Default]), UsedName(gRange,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(feasibleMates,[Default]), UsedName(scalation;graph_db;pattern_matching;MGraphSimCAR;init;,[Default]), UsedName(CHECK,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(test,[Default]), UsedName(showMappings,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(countMappings,[Default]), UsedName(filterGraph,[Default]), UsedName(prune,[Default]), UsedName(mappings,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.MGraphSimCAR has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(test$default$2,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(feasibleMatesW,[Default]), UsedName(isInstanceOf,[Default]), UsedName(bijections,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(disjoint,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(qRange,[Default]), UsedName(notifyAll,[Default]), UsedName(MGraphSimCAR,[Default]), UsedName(SELF_LOOPS,[Default]), UsedName(getClass,[Default]), UsedName(LIMIT,[Default]), UsedName(gRange,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(feasibleMates,[Default]), UsedName(scalation;graph_db;pattern_matching;MGraphSimCAR;init;,[Default]), UsedName(CHECK,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(test,[Default]), UsedName(showMappings,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(countMappings,[Default]), UsedName(filterGraph,[Default]), UsedName(prune,[Default]), UsedName(mappings,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.MGraphSimCAR)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.dist_db.RelDBMasterTest3...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.dist_db.RelDBMasterTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.dist_db.RelDBMasterTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.dist_db.RelDBMasterTest3,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(totalTime,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(iter,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(r1,[Default]), UsedName(RelDBMasterTest3,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(r2,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.dist_db.RelDBMasterTest3 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(totalTime,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(iter,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(r1,[Default]), UsedName(RelDBMasterTest3,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(r2,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.dist_db.RelDBMasterTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.Answers_g2Test...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.Answers_g2Test)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.Answers_g2Test)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.Answers_g2Test,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(Answers_g2Test,[Default]), UsedName(ne,[Default]), UsedName(convert,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.Answers_g2Test has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(Answers_g2Test,[Default]), UsedName(ne,[Default]), UsedName(convert,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.Answers_g2Test)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.columnar_db.ImputeMean...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.columnar_db.ImputeMean)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.columnar_db.ImputeMean)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.preprocessing.replaceMissingValues: Set(UsedName(ImputeMean,[Default]), UsedName($isInstanceOf,[Default]), UsedName(isInstanceOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(eq,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.preprocessing.replaceMissingStrings: Set(UsedName(ImputeMean,[Default]), UsedName($isInstanceOf,[Default]), UsedName(isInstanceOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(eq,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.columnar_db.ImputeMean,ModifiedNames(changes = UsedName(ImputeMean,[Default]), UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(impute,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(eq,[Default]))) invalidates 3 classes due to The scalation.columnar_db.ImputeMean has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(ImputeMean,[Default]), UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(impute,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.columnar_db.ImputeMean)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> by member reference: Set(scalation.preprocessing.replaceMissingValues, scalation.preprocessing.replaceMissingStrings)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.MGraphSimCARTest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.MGraphSimCARTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.MGraphSimCARTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.MGraphSimCARTest,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(MGraphSimCARTest,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.MGraphSimCARTest has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(MGraphSimCARTest,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.MGraphSimCARTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.test.DualIsoPattern_STest3...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.test.DualIsoPattern_STest3)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.test.DualIsoPattern_STest3)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.test.DualIsoPattern_STest3,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(gLabels,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(gDegree,[Default]), UsedName(inverse,[Default]), UsedName(UNIFORM,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(qSize,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(qDegree,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(DualIsoPattern_STest3,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.test.DualIsoPattern_STest3 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(gLabels,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(gDegree,[Default]), UsedName(inverse,[Default]), UsedName(UNIFORM,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(qSize,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(qDegree,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(DualIsoPattern_STest3,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.test.DualIsoPattern_STest3)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.distributed_db.intersectIn...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.distributed_db.intersectIn)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.distributed_db.intersectIn)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.distributed_db.RelationDBMaster: Set(UsedName(isInstanceOf,[Default]), UsedName(intersectIn,[Default]), UsedName(asInstanceOf,[Default]), UsedName(==,[Default]), UsedName(apply,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(r,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.distributed_db.RelationDBWorker: Set(UsedName(isInstanceOf,[Default]), UsedName(intersectIn,[Default]), UsedName(asInstanceOf,[Default]), UsedName(uc,[Default]), UsedName(==,[Default]), UsedName(apply,[Default]), UsedName(q,[Default]), UsedName(r,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.distributed_db.intersectIn,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(copy$default$1,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(canEqual,[Default]), UsedName(curried,[Default]), UsedName(productPrefix,[Default]), UsedName(tupled,[Default]), UsedName(isInstanceOf,[Default]), UsedName(intersectIn,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(copy$default$2,[Default]), UsedName(uc,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(unapply,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(apply,[Default]), UsedName(scalation;distributed_db;intersectIn;init;,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(copy$default$3,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(r,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 3 classes due to The scalation.distributed_db.intersectIn has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(copy$default$1,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(canEqual,[Default]), UsedName(curried,[Default]), UsedName(productPrefix,[Default]), UsedName(tupled,[Default]), UsedName(isInstanceOf,[Default]), UsedName(intersectIn,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(copy$default$2,[Default]), UsedName(uc,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(unapply,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(apply,[Default]), UsedName(scalation;distributed_db;intersectIn;init;,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(copy$default$3,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(r,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.distributed_db.intersectIn)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> by member reference: Set(scalation.distributed_db.RelationDBMaster, scalation.distributed_db.RelationDBWorker)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.columnar_db.Query...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.columnar_db.Query)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.columnar_db.Query)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.columnar_db.Query,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(doUpdate,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(Query,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(flaw,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(doQuery,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.columnar_db.Query has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(doUpdate,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(Query,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(flaw,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(doQuery,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.columnar_db.Query)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.preprocessing.replaceMissingValues...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.preprocessing.replaceMissingValues)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.preprocessing.replaceMissingValues)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.preprocessing.PreProcessingMaster: Set(UsedName(fraction,[Default]), UsedName(isInstanceOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(==,[Default]), UsedName(apply,[Default]), UsedName(xy,[Default]), UsedName(funcVal,[Default]), UsedName(missingCol,[Default]), UsedName(replaceMissingValues,[Default]), UsedName(missingVal,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.preprocessing.replaceMissingValues,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(apply$default$5,[Default]), UsedName(copy$default$1,[Default]), UsedName(copy$default$5,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(fraction,[Default]), UsedName(canEqual,[Default]), UsedName(productPrefix,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(scalation;preprocessing;replaceMissingValues;init;,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(copy$default$2,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(apply$default$4,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(unapply,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(copy$default$4,[Default]), UsedName(apply,[Default]), UsedName(xy,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(<init>$default$5,[Default]), UsedName(wait,[Default]), UsedName(copy$default$3,[Default]), UsedName(funcVal,[Default]), UsedName(ne,[Default]), UsedName(missingCol,[Default]), UsedName(replaceMissingValues,[Default]), UsedName(missingVal,[Default]), UsedName(<init>$default$4,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 2 classes due to The scalation.preprocessing.replaceMissingValues has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(apply$default$5,[Default]), UsedName(copy$default$1,[Default]), UsedName(copy$default$5,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(fraction,[Default]), UsedName(canEqual,[Default]), UsedName(productPrefix,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(scalation;preprocessing;replaceMissingValues;init;,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(copy$default$2,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(apply$default$4,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(unapply,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(copy$default$4,[Default]), UsedName(apply,[Default]), UsedName(xy,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(<init>$default$5,[Default]), UsedName(wait,[Default]), UsedName(copy$default$3,[Default]), UsedName(funcVal,[Default]), UsedName(ne,[Default]), UsedName(missingCol,[Default]), UsedName(replaceMissingValues,[Default]), UsedName(missingVal,[Default]), UsedName(<init>$default$4,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.preprocessing.replaceMissingValues)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> by member reference: Set(scalation.preprocessing.PreProcessingMaster)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.spatial.LatLong2UTM...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.spatial.LatLong2UTM)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.spatial.LatLong2UTM)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.spatial.LatLong2UTM,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(latLong2UTM,[Default]), UsedName(clone,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(latLong2UTMzone,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(latLong2UTMxy,[Default]), UsedName(getClass,[Default]), UsedName(LatLong2UTM,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(flaw,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.spatial.LatLong2UTM has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(latLong2UTM,[Default]), UsedName(clone,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(latLong2UTMzone,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(latLong2UTMxy,[Default]), UsedName(getClass,[Default]), UsedName(LatLong2UTM,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(flaw,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.spatial.LatLong2UTM)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.image.ImageCVTest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.image.ImageCVTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.image.ImageCVTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.image.ImageCVTest,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(rgb,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(gray,[Default]), UsedName(wait,[Default]), UsedName(ImageCVTest,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(noisy_img,[Default]), UsedName(eq,[Default]), UsedName(file,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.image.ImageCVTest has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(rgb,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(gray,[Default]), UsedName(wait,[Default]), UsedName(ImageCVTest,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(noisy_img,[Default]), UsedName(eq,[Default]), UsedName(file,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.image.ImageCVTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.MGraphSimWTest7...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.MGraphSimWTest7)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.MGraphSimWTest7)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.MGraphSimWTest7,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(MGraphSimWTest7,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.MGraphSimWTest7 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(MGraphSimWTest7,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.MGraphSimWTest7)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.TightSimTest3...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.TightSimTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.TightSimTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.TightSimTest3,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(TightSimTest3,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.TightSimTest3 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(TightSimTest3,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.TightSimTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.distributed_db.show...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.distributed_db.show)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.distributed_db.show)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.distributed_db.RelationDBMasterTest: Set(UsedName(show,[Default]), UsedName(apply,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.distributed_db.RelationDBMaster: Set(UsedName(show,[Default]), UsedName(isInstanceOf,[Default]), UsedName(name,[Default]), UsedName(asInstanceOf,[Default]), UsedName(==,[Default]), UsedName(apply,[Default]), UsedName(ne,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.distributed_db.show,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(copy$default$1,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(canEqual,[Default]), UsedName(show,[Default]), UsedName(productPrefix,[Default]), UsedName(compose,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(scalation;distributed_db;show;init;,[Default]), UsedName(name,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(andThen,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(unapply,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(apply,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 3 classes due to The scalation.distributed_db.show has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(copy$default$1,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(canEqual,[Default]), UsedName(show,[Default]), UsedName(productPrefix,[Default]), UsedName(compose,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(scalation;distributed_db;show;init;,[Default]), UsedName(name,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(andThen,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(unapply,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(apply,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.distributed_db.show)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> by member reference: Set(scalation.distributed_db.RelationDBMasterTest, scalation.distributed_db.RelationDBMaster)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.test.DualPattern_STest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.test.DualPattern_STest)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.test.DualPattern_STest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.test.DualPattern_STest,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(q4w,[Default]), UsedName(finalize,[Default]), UsedName(g4,[Default]), UsedName(q2,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(q3,[Default]), UsedName(synchronized,[Default]), UsedName(g2,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(DualPattern_STest,[Default]), UsedName(ne,[Default]), UsedName(q4x,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(g3,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.test.DualPattern_STest has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(q4w,[Default]), UsedName(finalize,[Default]), UsedName(g4,[Default]), UsedName(q2,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(q3,[Default]), UsedName(synchronized,[Default]), UsedName(g2,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(DualPattern_STest,[Default]), UsedName(ne,[Default]), UsedName(q4x,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(g3,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.test.DualPattern_STest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.distributed_db.relReply...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.distributed_db.relReply)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.distributed_db.relReply)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.distributed_db.RelationDBMaster: Set(UsedName(isInstanceOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(==,[Default]), UsedName(apply,[Default]), UsedName(id,[Default]), UsedName(ne,[Default]), UsedName(r,[Default]), UsedName(relReply,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.distributed_db.RelationDBWorker: Set(UsedName(isInstanceOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(==,[Default]), UsedName(apply,[Default]), UsedName(r,[Default]), UsedName(relReply,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.distributed_db.relReply,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(copy$default$1,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(canEqual,[Default]), UsedName(curried,[Default]), UsedName(productPrefix,[Default]), UsedName(tupled,[Default]), UsedName(isInstanceOf,[Default]), UsedName(scalation;distributed_db;relReply;init;,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(copy$default$2,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(unapply,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(apply,[Default]), UsedName(id,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(r,[Default]), UsedName(relReply,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 3 classes due to The scalation.distributed_db.relReply has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(copy$default$1,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(canEqual,[Default]), UsedName(curried,[Default]), UsedName(productPrefix,[Default]), UsedName(tupled,[Default]), UsedName(isInstanceOf,[Default]), UsedName(scalation;distributed_db;relReply;init;,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(copy$default$2,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(unapply,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(apply,[Default]), UsedName(id,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(r,[Default]), UsedName(relReply,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.distributed_db.relReply)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> by member reference: Set(scalation.distributed_db.RelationDBMaster, scalation.distributed_db.RelationDBWorker)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.MGraphSimTest6...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.MGraphSimTest6)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.MGraphSimTest6)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.MGraphSimTest6,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(MGraphSimTest6,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.MGraphSimTest6 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(MGraphSimTest6,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.MGraphSimTest6)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.graph_algebra.MuStrictSimTest3...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.graph_algebra.MuStrictSimTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.graph_algebra.MuStrictSimTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.graph_algebra.MuStrictSimTest3,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(matcher,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(MuStrictSimTest3,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.graph_algebra.MuStrictSimTest3 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(matcher,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(MuStrictSimTest3,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.graph_algebra.MuStrictSimTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.MGraphSim2XTest5...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.MGraphSim2XTest5)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.MGraphSim2XTest5)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.MGraphSim2XTest5,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(MGraphSim2XTest5,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.MGraphSim2XTest5 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(MGraphSim2XTest5,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.MGraphSim2XTest5)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.image.ChessTracker...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.image.ChessTracker)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.image.ChessTracker)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.image.ChessTracker,ModifiedNames(changes = UsedName(outside,[Default]), UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName(err,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(scalation;image;ChessTracker;init;,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(limit,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(ChessTracker,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(optimize,[Default]), UsedName(flaw,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(linesearch,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.image.ChessTracker has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(outside,[Default]), UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName(err,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(scalation;image;ChessTracker;init;,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(limit,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(ChessTracker,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(optimize,[Default]), UsedName(flaw,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(linesearch,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.image.ChessTracker)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graphalytics.TreeNode...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graphalytics.TreeNode)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graphalytics.TreeNode)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graphalytics.TreeNode,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(loc,[Default]), UsedName(clone,[Default]), UsedName(rightSibling,[Default]), UsedName(label,[Default]), UsedName(leftSibling,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(isLeaf,[Default]), UsedName(getClass,[Default]), UsedName(ord,[Default]), UsedName(colr,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(nid,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(isAncestor,[Default]), UsedName(scalation;graphalytics;TreeNode;init;,[Default]), UsedName(ne,[Default]), UsedName(TreeNode,[Default]), UsedName(child,[Default]), UsedName(parent,[Default]), UsedName(lev,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.graphalytics.TreeNode has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(loc,[Default]), UsedName(clone,[Default]), UsedName(rightSibling,[Default]), UsedName(label,[Default]), UsedName(leftSibling,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(isLeaf,[Default]), UsedName(getClass,[Default]), UsedName(ord,[Default]), UsedName(colr,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(nid,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(isAncestor,[Default]), UsedName(scalation;graphalytics;TreeNode;init;,[Default]), UsedName(ne,[Default]), UsedName(TreeNode,[Default]), UsedName(child,[Default]), UsedName(parent,[Default]), UsedName(lev,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graphalytics.TreeNode)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graphalytics.ExampleGraphS...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graphalytics.ExampleGraphS)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graphalytics.ExampleGraphS)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graphalytics.ExampleGraphS,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(ExampleGraphS,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(q3p,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(q2,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(g1,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g2p,[Default]), UsedName(g3p,[Default]), UsedName(q3,[Default]), UsedName(synchronized,[Default]), UsedName(g2,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(q1,[Default]), UsedName(q1p,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(g1p,[Default]), UsedName(q2p,[Default]), UsedName(g3,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.graphalytics.ExampleGraphS has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(ExampleGraphS,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(q3p,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(q2,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(g1,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g2p,[Default]), UsedName(g3p,[Default]), UsedName(q3,[Default]), UsedName(synchronized,[Default]), UsedName(g2,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(q1,[Default]), UsedName(q1p,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(g1p,[Default]), UsedName(q2p,[Default]), UsedName(g3,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graphalytics.ExampleGraphS)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.DualIsoTest3...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.DualIsoTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.DualIsoTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.DualIsoTest3,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(matcher,[Default]), UsedName(DualIsoTest3,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(gGen,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(qAvDegree,[Default]), UsedName(qSize,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(gAvDegree,[Default]), UsedName(nLabels,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(gSize,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(psi,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.DualIsoTest3 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(matcher,[Default]), UsedName(DualIsoTest3,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(gGen,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(qAvDegree,[Default]), UsedName(qSize,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(gAvDegree,[Default]), UsedName(nLabels,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(gSize,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(psi,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.DualIsoTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.MGraphGenTest3...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.MGraphGenTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.MGraphGenTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.MGraphGenTest3,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(gGen,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(g1,[Default]), UsedName(notifyAll,[Default]), UsedName(MGraphGenTest3,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.MGraphGenTest3 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(gGen,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(g1,[Default]), UsedName(notifyAll,[Default]), UsedName(MGraphGenTest3,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.MGraphGenTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.spatial.Matrix2DTest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.spatial.Matrix2DTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.spatial.Matrix2DTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.spatial.Matrix2DTest,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(v,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(w,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(Matrix2DTest,[Default]), UsedName(synchronized,[Default]), UsedName(u,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(a,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.spatial.Matrix2DTest has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(v,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(w,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(Matrix2DTest,[Default]), UsedName(synchronized,[Default]), UsedName(u,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(a,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.spatial.Matrix2DTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.ExampleGraphI...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.ExampleGraphI)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.ExampleGraphI)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.ExampleGraphI,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(q2,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(g1,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g2p,[Default]), UsedName(synchronized,[Default]), UsedName(g2,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(q1,[Default]), UsedName(ExampleGraphI,[Default]), UsedName(q1p,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(g1p,[Default]), UsedName(q2p,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.graph_db.ExampleGraphI has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(q2,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(g1,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g2p,[Default]), UsedName(synchronized,[Default]), UsedName(g2,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(q1,[Default]), UsedName(ExampleGraphI,[Default]), UsedName(q1p,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(g1p,[Default]), UsedName(q2p,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.ExampleGraphI)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graphalytics.GraphDFS...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graphalytics.GraphDFS)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graphalytics.GraphDFS)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graphalytics.GraphDFS,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(scalation;graphalytics;GraphDFS;init;,[Default]), UsedName(hashCode,[Default]), UsedName(find,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(strongComps,[Default]), UsedName(isInstanceOf,[Default]), UsedName(GraphDFS,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(reach,[Default]), UsedName(!=,[Default]), UsedName(pred2,[Default]), UsedName(QUEUE,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(pred1,[Default]), UsedName(synchronized,[Default]), UsedName(visit,[Default]), UsedName(weakComps,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(STACK,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.graphalytics.GraphDFS has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(scalation;graphalytics;GraphDFS;init;,[Default]), UsedName(hashCode,[Default]), UsedName(find,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(strongComps,[Default]), UsedName(isInstanceOf,[Default]), UsedName(GraphDFS,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(reach,[Default]), UsedName(!=,[Default]), UsedName(pred2,[Default]), UsedName(QUEUE,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(pred1,[Default]), UsedName(synchronized,[Default]), UsedName(visit,[Default]), UsedName(weakComps,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(STACK,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graphalytics.GraphDFS)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.distributed_db.addReply...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.distributed_db.addReply)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.distributed_db.addReply)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.distributed_db.RelationDBMaster: Set(UsedName(isInstanceOf,[Default]), UsedName(name,[Default]), UsedName(asInstanceOf,[Default]), UsedName(addReply,[Default]), UsedName(==,[Default]), UsedName(apply,[Default]), UsedName(ne,[Default]), UsedName(n,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.distributed_db.RelationDBWorker: Set(UsedName(isInstanceOf,[Default]), UsedName(name,[Default]), UsedName(asInstanceOf,[Default]), UsedName(addReply,[Default]), UsedName(==,[Default]), UsedName(apply,[Default]), UsedName(n,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.distributed_db.addReply,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(scalation;distributed_db;addReply;init;,[Default]), UsedName(copy$default$1,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(canEqual,[Default]), UsedName(curried,[Default]), UsedName(productPrefix,[Default]), UsedName(tupled,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(name,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(copy$default$2,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(addReply,[Default]), UsedName(getClass,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(unapply,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(apply,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(n,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 3 classes due to The scalation.distributed_db.addReply has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(scalation;distributed_db;addReply;init;,[Default]), UsedName(copy$default$1,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(canEqual,[Default]), UsedName(curried,[Default]), UsedName(productPrefix,[Default]), UsedName(tupled,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(name,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(copy$default$2,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(addReply,[Default]), UsedName(getClass,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(unapply,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(apply,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(n,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.distributed_db.addReply)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> by member reference: Set(scalation.distributed_db.RelationDBMaster, scalation.distributed_db.RelationDBWorker)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.columnar_db.KeyType...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.columnar_db.KeyType)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.columnar_db.KeyType)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.columnar_db.KeyType,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(copy$default$1,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(canEqual,[Default]), UsedName(productPrefix,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(<=,[Default]), UsedName(asInstanceOf,[Default]), UsedName(>,[Default]), UsedName($asInstanceOf,[Default]), UsedName(compare,[Default]), UsedName(KeyType,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(compareTo,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(<,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(valu,[Default]), UsedName(wait,[Default]), UsedName(scalation;columnar_db;KeyType;init;,[Default]), UsedName(ne,[Default]), UsedName(>=,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.columnar_db.KeyType has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(copy$default$1,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(canEqual,[Default]), UsedName(productPrefix,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(<=,[Default]), UsedName(asInstanceOf,[Default]), UsedName(>,[Default]), UsedName($asInstanceOf,[Default]), UsedName(compare,[Default]), UsedName(KeyType,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(compareTo,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(<,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(valu,[Default]), UsedName(wait,[Default]), UsedName(scalation;columnar_db;KeyType;init;,[Default]), UsedName(ne,[Default]), UsedName(>=,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.columnar_db.KeyType)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.MDualSim2WTest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.MDualSim2WTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.MDualSim2WTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.MDualSim2WTest,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(MDualSim2WTest,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.MDualSim2WTest has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(MDualSim2WTest,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.MDualSim2WTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.spatial.Matrix3D...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.spatial.Matrix3D)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.spatial.Matrix3D)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.spatial.Matrix3D,ModifiedNames(changes = UsedName(col$default$2,[Default]), UsedName(meanRNZ,[Default]), UsedName(setDiag$default$2,[Default]), UsedName(sumLower,[Default]), UsedName(:+,[Default]), UsedName(equals,[Default]), UsedName(+:,[Default]), UsedName(++^,[Default]), UsedName(trace,[Default]), UsedName(solve,[Default]), UsedName(set$default$3,[Default]), UsedName(hashCode,[Default]), UsedName(scalation;spatial;Matrix3D;init;,[Default]), UsedName(getDiag,[Default]), UsedName(min$default$1,[Default]), UsedName($isInstanceOf,[Default]), UsedName(reduce_ip,[Default]), UsedName(clone,[Default]), UsedName(isTridiagonal,[Default]), UsedName(inverse_ip,[Default]), UsedName(max$default$1,[Default]), UsedName(det,[Default]), UsedName(+^:,[Default]), UsedName(fString,[Default]), UsedName(times_ip_pre$default$2,[Default]), UsedName(-,[Default]), UsedName(**=,[Default]), UsedName(bsolve,[Default]), UsedName(t,[Default]), UsedName(**:,[Default]), UsedName(selectRowsEx,[Default]), UsedName(isInstanceOf,[Default]), UsedName(max,[Default]), UsedName(v3,[Default]), UsedName(mean,[Default]), UsedName(finalize,[Default]), UsedName(sliceCol,[Default]), UsedName(inverse,[Default]), UsedName(*=,[Default]), UsedName(range2,[Default]), UsedName(asInstanceOf,[Default]), UsedName(update,[Default]), UsedName(setCol,[Default]), UsedName(map,[Default]), UsedName(v,[Default]), UsedName($asInstanceOf,[Default]), UsedName(*,[Default]), UsedName(++,[Default]), UsedName(setDiag,[Default]), UsedName(meanR,[Default]), UsedName(swap,[Default]), UsedName(toDouble,[Default]), UsedName(mag,[Default]), UsedName(!=,[Default]), UsedName(zero,[Default]), UsedName(zero$default$1,[Default]), UsedName(write,[Default]), UsedName(+,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(z,[Default]), UsedName(dot,[Default]), UsedName(normINF,[Default]), UsedName(selectRows,[Default]), UsedName(copy,[Default]), UsedName(dim2,[Default]), UsedName(lud_npp,[Default]), UsedName(clean$default$1,[Default]), UsedName(setFormat,[Default]), UsedName(swapCol$default$3,[Default]), UsedName(toDense,[Default]), UsedName(times_s,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(tip,[Default]), UsedName(upperT,[Default]), UsedName(*:,[Default]), UsedName(y,[Default]), UsedName(selectCols,[Default]), UsedName(swap$default$3,[Default]), UsedName(inverse_npp,[Default]), UsedName(toInt,[Default]), UsedName(clean$default$2,[Default]), UsedName(isBidiagonal,[Default]), UsedName(apply,[Default]), UsedName(times_d,[Default]), UsedName(times_ip,[Default]), UsedName(foreach,[Default]), UsedName(meanNZ,[Default]), UsedName(**,[Default]), UsedName(reduce,[Default]), UsedName(synchronized,[Default]), UsedName(~^,[Default]), UsedName(sameCrossDimensions,[Default]), UsedName(isSquare,[Default]), UsedName(times_ip_pre,[Default]), UsedName(set,[Default]), UsedName(toString,[Default]), UsedName(nullspace,[Default]), UsedName(/,[Default]), UsedName(lud_ip,[Default]), UsedName(##,[Default]), UsedName(isRectangular,[Default]), UsedName(-=,[Default]), UsedName(flaw,[Default]), UsedName(times,[Default]), UsedName(nullspace_ip,[Default]), UsedName(dim1,[Default]), UsedName(sumAbs,[Default]), UsedName(wait,[Default]), UsedName(/=,[Default]), UsedName(mdot,[Default]), UsedName(normalizeU,[Default]), UsedName(swapCol,[Default]), UsedName(diag$default$2,[Default]), UsedName(ne,[Default]), UsedName(normF,[Default]), UsedName(getDiag$default$1,[Default]), UsedName(sum,[Default]), UsedName(Matrix3D,[Default]), UsedName(min,[Default]), UsedName(isSymmetric,[Default]), UsedName(+=,[Default]), UsedName(norm1,[Default]), UsedName(clean,[Default]), UsedName(lowerT,[Default]), UsedName(sameDimensions,[Default]), UsedName(col,[Default]), UsedName(leDimensions,[Default]), UsedName(:^+,[Default]), UsedName(sliceEx,[Default]), UsedName(x,[Default]), UsedName(diag,[Default]), UsedName(slice,[Default]), UsedName(range1,[Default]), UsedName(<init>$default$2,[Default]), UsedName(zero$default$2,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]), UsedName(isNonnegative,[Default]))) invalidates 1 classes due to The scalation.spatial.Matrix3D has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(col$default$2,[Default]), UsedName(meanRNZ,[Default]), UsedName(setDiag$default$2,[Default]), UsedName(sumLower,[Default]), UsedName(:+,[Default]), UsedName(equals,[Default]), UsedName(+:,[Default]), UsedName(++^,[Default]), UsedName(trace,[Default]), UsedName(solve,[Default]), UsedName(set$default$3,[Default]), UsedName(hashCode,[Default]), UsedName(scalation;spatial;Matrix3D;init;,[Default]), UsedName(getDiag,[Default]), UsedName(min$default$1,[Default]), UsedName($isInstanceOf,[Default]), UsedName(reduce_ip,[Default]), UsedName(clone,[Default]), UsedName(isTridiagonal,[Default]), UsedName(inverse_ip,[Default]), UsedName(max$default$1,[Default]), UsedName(det,[Default]), UsedName(+^:,[Default]), UsedName(fString,[Default]), UsedName(times_ip_pre$default$2,[Default]), UsedName(-,[Default]), UsedName(**=,[Default]), UsedName(bsolve,[Default]), UsedName(t,[Default]), UsedName(**:,[Default]), UsedName(selectRowsEx,[Default]), UsedName(isInstanceOf,[Default]), UsedName(max,[Default]), UsedName(v3,[Default]), UsedName(mean,[Default]), UsedName(finalize,[Default]), UsedName(sliceCol,[Default]), UsedName(inverse,[Default]), UsedName(*=,[Default]), UsedName(range2,[Default]), UsedName(asInstanceOf,[Default]), UsedName(update,[Default]), UsedName(setCol,[Default]), UsedName(map,[Default]), UsedName(v,[Default]), UsedName($asInstanceOf,[Default]), UsedName(*,[Default]), UsedName(++,[Default]), UsedName(setDiag,[Default]), UsedName(meanR,[Default]), UsedName(swap,[Default]), UsedName(toDouble,[Default]), UsedName(mag,[Default]), UsedName(!=,[Default]), UsedName(zero,[Default]), UsedName(zero$default$1,[Default]), UsedName(write,[Default]), UsedName(+,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(z,[Default]), UsedName(dot,[Default]), UsedName(normINF,[Default]), UsedName(selectRows,[Default]), UsedName(copy,[Default]), UsedName(dim2,[Default]), UsedName(lud_npp,[Default]), UsedName(clean$default$1,[Default]), UsedName(setFormat,[Default]), UsedName(swapCol$default$3,[Default]), UsedName(toDense,[Default]), UsedName(times_s,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(tip,[Default]), UsedName(upperT,[Default]), UsedName(*:,[Default]), UsedName(y,[Default]), UsedName(selectCols,[Default]), UsedName(swap$default$3,[Default]), UsedName(inverse_npp,[Default]), UsedName(toInt,[Default]), UsedName(clean$default$2,[Default]), UsedName(isBidiagonal,[Default]), UsedName(apply,[Default]), UsedName(times_d,[Default]), UsedName(times_ip,[Default]), UsedName(foreach,[Default]), UsedName(meanNZ,[Default]), UsedName(**,[Default]), UsedName(reduce,[Default]), UsedName(synchronized,[Default]), UsedName(~^,[Default]), UsedName(sameCrossDimensions,[Default]), UsedName(isSquare,[Default]), UsedName(times_ip_pre,[Default]), UsedName(set,[Default]), UsedName(toString,[Default]), UsedName(nullspace,[Default]), UsedName(/,[Default]), UsedName(lud_ip,[Default]), UsedName(##,[Default]), UsedName(isRectangular,[Default]), UsedName(-=,[Default]), UsedName(flaw,[Default]), UsedName(times,[Default]), UsedName(nullspace_ip,[Default]), UsedName(dim1,[Default]), UsedName(sumAbs,[Default]), UsedName(wait,[Default]), UsedName(/=,[Default]), UsedName(mdot,[Default]), UsedName(normalizeU,[Default]), UsedName(swapCol,[Default]), UsedName(diag$default$2,[Default]), UsedName(ne,[Default]), UsedName(normF,[Default]), UsedName(getDiag$default$1,[Default]), UsedName(sum,[Default]), UsedName(Matrix3D,[Default]), UsedName(min,[Default]), UsedName(isSymmetric,[Default]), UsedName(+=,[Default]), UsedName(norm1,[Default]), UsedName(clean,[Default]), UsedName(lowerT,[Default]), UsedName(sameDimensions,[Default]), UsedName(col,[Default]), UsedName(leDimensions,[Default]), UsedName(:^+,[Default]), UsedName(sliceEx,[Default]), UsedName(x,[Default]), UsedName(diag,[Default]), UsedName(slice,[Default]), UsedName(range1,[Default]), UsedName(<init>$default$2,[Default]), UsedName(zero$default$2,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]), UsedName(isNonnegative,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.spatial.Matrix3D)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.MGraph...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.MGraph)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.MGraph)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.MGraph,ModifiedNames(changes = UsedName(nSelfLoops,[Default]), UsedName(equals,[Default]), UsedName(union,[Default]), UsedName(apply$default$2,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(label,[Default]), UsedName(printG$default$1,[Default]), UsedName(nEdges,[Default]), UsedName(printG,[Default]), UsedName(apply$default$3,[Default]), UsedName(labelMap,[Default]), UsedName(isInstanceOf,[Default]), UsedName(scalation;graph_db;MGraph;init;,[Default]), UsedName(finalize,[Default]), UsedName(inverse,[Default]), UsedName(name,[Default]), UsedName(vid,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(toLine$default$2,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(ch,[Default]), UsedName(toLine,[Default]), UsedName(getClass,[Default]), UsedName(MGraph,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(elabel,[Default]), UsedName(buildLabelMap,[Default]), UsedName(apply,[Default]), UsedName(makeUndirected,[Default]), UsedName(checkEdges,[Default]), UsedName(toGraphIm,[Default]), UsedName(synchronized,[Default]), UsedName(same,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(getVerticesWithLabel,[Default]), UsedName(<init>$default$5,[Default]), UsedName(size,[Default]), UsedName(wait,[Default]), UsedName(addPar,[Default]), UsedName(<init>$default$3,[Default]), UsedName(ne,[Default]), UsedName(pa,[Default]), UsedName(checkElabels,[Default]), UsedName(isConnected,[Default]), UsedName(toGraphIm$default$1,[Default]), UsedName(<init>$default$4,[Default]), UsedName(<init>$default$2,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.graph_db.MGraph has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(nSelfLoops,[Default]), UsedName(equals,[Default]), UsedName(union,[Default]), UsedName(apply$default$2,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(label,[Default]), UsedName(printG$default$1,[Default]), UsedName(nEdges,[Default]), UsedName(printG,[Default]), UsedName(apply$default$3,[Default]), UsedName(labelMap,[Default]), UsedName(isInstanceOf,[Default]), UsedName(scalation;graph_db;MGraph;init;,[Default]), UsedName(finalize,[Default]), UsedName(inverse,[Default]), UsedName(name,[Default]), UsedName(vid,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(toLine$default$2,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(ch,[Default]), UsedName(toLine,[Default]), UsedName(getClass,[Default]), UsedName(MGraph,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(elabel,[Default]), UsedName(buildLabelMap,[Default]), UsedName(apply,[Default]), UsedName(makeUndirected,[Default]), UsedName(checkEdges,[Default]), UsedName(toGraphIm,[Default]), UsedName(synchronized,[Default]), UsedName(same,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(getVerticesWithLabel,[Default]), UsedName(<init>$default$5,[Default]), UsedName(size,[Default]), UsedName(wait,[Default]), UsedName(addPar,[Default]), UsedName(<init>$default$3,[Default]), UsedName(ne,[Default]), UsedName(pa,[Default]), UsedName(checkElabels,[Default]), UsedName(isConnected,[Default]), UsedName(toGraphIm$default$1,[Default]), UsedName(<init>$default$4,[Default]), UsedName(<init>$default$2,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.MGraph)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.image.ChessTrackerTest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.image.ChessTrackerTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.image.ChessTrackerTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.image.ChessTrackerTest,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(dq,[Default]), UsedName(tr_q,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(er,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(ChessTrackerTest,[Default]), UsedName(getClass,[Default]), UsedName(w,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(dr,[Default]), UsedName(synchronized,[Default]), UsedName(u,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(tr_r,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.image.ChessTrackerTest has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(dq,[Default]), UsedName(tr_q,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(er,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(ChessTrackerTest,[Default]), UsedName(getClass,[Default]), UsedName(w,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(dr,[Default]), UsedName(synchronized,[Default]), UsedName(u,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(tr_r,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.image.ChessTrackerTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.spatial.Matrix3DTest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.spatial.Matrix3DTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.spatial.Matrix3DTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.spatial.Matrix3DTest,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(Matrix3DTest,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(v,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(w,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(u,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(a,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.spatial.Matrix3DTest has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(Matrix3DTest,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(v,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(w,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(u,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(a,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.spatial.Matrix3DTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.GraphSim2Test4...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.GraphSim2Test4)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.GraphSim2Test4)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.GraphSim2Test4,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(GraphSim2Test4,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.GraphSim2Test4 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(GraphSim2Test4,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.GraphSim2Test4)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graphalytics.GraphqlOptTest3...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graphalytics.GraphqlOptTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graphalytics.GraphqlOptTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graphalytics.GraphqlOptTest3,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(matcher,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(GraphqlOptTest3,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graphalytics.GraphqlOptTest3 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(matcher,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(GraphqlOptTest3,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graphalytics.GraphqlOptTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.DualSimCAR...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.DualSimCAR)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.DualSimCAR)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.DualSimCAR,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(test$default$2,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(feasibleMatesW,[Default]), UsedName(isInstanceOf,[Default]), UsedName(bijections,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(scalation;graph_db;pattern_matching;DualSimCAR;init;,[Default]), UsedName(disjoint,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(qRange,[Default]), UsedName(notifyAll,[Default]), UsedName(SELF_LOOPS,[Default]), UsedName(getClass,[Default]), UsedName(LIMIT,[Default]), UsedName(gRange,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(feasibleMates,[Default]), UsedName(CHECK,[Default]), UsedName(DualSimCAR,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(test,[Default]), UsedName(showMappings,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(countMappings,[Default]), UsedName(filterGraph,[Default]), UsedName(prune,[Default]), UsedName(mappings,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.DualSimCAR has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(test$default$2,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(feasibleMatesW,[Default]), UsedName(isInstanceOf,[Default]), UsedName(bijections,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(scalation;graph_db;pattern_matching;DualSimCAR;init;,[Default]), UsedName(disjoint,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(qRange,[Default]), UsedName(notifyAll,[Default]), UsedName(SELF_LOOPS,[Default]), UsedName(getClass,[Default]), UsedName(LIMIT,[Default]), UsedName(gRange,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(feasibleMates,[Default]), UsedName(CHECK,[Default]), UsedName(DualSimCAR,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(test,[Default]), UsedName(showMappings,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(countMappings,[Default]), UsedName(filterGraph,[Default]), UsedName(prune,[Default]), UsedName(mappings,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.DualSimCAR)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.BiconnectedCompTest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.BiconnectedCompTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.BiconnectedCompTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.BiconnectedCompTest,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(BiconnectedCompTest,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(bcc,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.BiconnectedCompTest has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(BiconnectedCompTest,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(bcc,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.BiconnectedCompTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.MDualSimXTest3...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.MDualSimXTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.MDualSimXTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.MDualSimXTest3,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(MDualSimXTest3,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.MDualSimXTest3 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(MDualSimXTest3,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.MDualSimXTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.graph_algebra.BasicQueryTest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.graph_algebra.BasicQueryTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.graph_algebra.BasicQueryTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.graph_algebra.BasicQueryTest,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(neo4jQuery2,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(g1,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(neo4jQuery3,[Default]), UsedName(BasicQueryTest,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(θ,[Default]), UsedName(neo4jQuery4,[Default]), UsedName(wait,[Default]), UsedName(neo4jQuery1,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.graph_algebra.BasicQueryTest has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(neo4jQuery2,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(g1,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(neo4jQuery3,[Default]), UsedName(BasicQueryTest,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(θ,[Default]), UsedName(neo4jQuery4,[Default]), UsedName(wait,[Default]), UsedName(neo4jQuery1,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.graph_algebra.BasicQueryTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.dist_db.materializeIn...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.dist_db.materializeIn)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.dist_db.materializeIn)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.dist_db.RelDBWorker: Set(UsedName(isInstanceOf,[Default]), UsedName(name,[Default]), UsedName(asInstanceOf,[Default]), UsedName(==,[Default]), UsedName(apply,[Default]), UsedName(materializeIn,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.dist_db.materializeIn,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(copy$default$1,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(canEqual,[Default]), UsedName(productPrefix,[Default]), UsedName(compose,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(name,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(andThen,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(unapply,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(apply,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(scalation;dist_db;materializeIn;init;,[Default]), UsedName(wait,[Default]), UsedName(materializeIn,[Default]), UsedName(ne,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 2 classes due to The scalation.dist_db.materializeIn has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(copy$default$1,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(canEqual,[Default]), UsedName(productPrefix,[Default]), UsedName(compose,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(name,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(andThen,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(unapply,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(apply,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(scalation;dist_db;materializeIn;init;,[Default]), UsedName(wait,[Default]), UsedName(materializeIn,[Default]), UsedName(ne,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.dist_db.materializeIn)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> by member reference: Set(scalation.dist_db.RelDBWorker)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.distributed_db.create...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.distributed_db.create)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.distributed_db.create)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.distributed_db.RelationDBMasterTest: Set(UsedName(create,[Default]), UsedName(apply,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.distributed_db.RelationDBMaster: Set(UsedName(isInstanceOf,[Default]), UsedName(create,[Default]), UsedName(name,[Default]), UsedName(asInstanceOf,[Default]), UsedName(colname,[Default]), UsedName(key,[Default]), UsedName(domain,[Default]), UsedName(==,[Default]), UsedName(apply,[Default]), UsedName(ne,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.distributed_db.create,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(copy$default$1,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(canEqual,[Default]), UsedName(curried,[Default]), UsedName(productPrefix,[Default]), UsedName(tupled,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(create,[Default]), UsedName(name,[Default]), UsedName(asInstanceOf,[Default]), UsedName(colname,[Default]), UsedName($asInstanceOf,[Default]), UsedName(key,[Default]), UsedName(copy$default$2,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(domain,[Default]), UsedName(scalation;distributed_db;create;init;,[Default]), UsedName(getClass,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(unapply,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(copy$default$4,[Default]), UsedName(apply,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(copy$default$3,[Default]), UsedName(ne,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 3 classes due to The scalation.distributed_db.create has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(copy$default$1,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(canEqual,[Default]), UsedName(curried,[Default]), UsedName(productPrefix,[Default]), UsedName(tupled,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(create,[Default]), UsedName(name,[Default]), UsedName(asInstanceOf,[Default]), UsedName(colname,[Default]), UsedName($asInstanceOf,[Default]), UsedName(key,[Default]), UsedName(copy$default$2,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(domain,[Default]), UsedName(scalation;distributed_db;create;init;,[Default]), UsedName(getClass,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(unapply,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(copy$default$4,[Default]), UsedName(apply,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(copy$default$3,[Default]), UsedName(ne,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.distributed_db.create)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> by member reference: Set(scalation.distributed_db.RelationDBMasterTest, scalation.distributed_db.RelationDBMaster)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.Answers_g2...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.Answers_g2)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.Answers_g2)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.Answers_g2,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(phi10,[Default]), UsedName(phi6,[Default]), UsedName(hashCode,[Default]), UsedName(phi13,[Default]), UsedName($isInstanceOf,[Default]), UsedName(phi1,[Default]), UsedName(clone,[Default]), UsedName(phi5W,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(phi9,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(Answers_g2,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(phi2,[Default]), UsedName(wait,[Default]), UsedName(phi14,[Default]), UsedName(ne,[Default]), UsedName(phi5,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.Answers_g2 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(phi10,[Default]), UsedName(phi6,[Default]), UsedName(hashCode,[Default]), UsedName(phi13,[Default]), UsedName($isInstanceOf,[Default]), UsedName(phi1,[Default]), UsedName(clone,[Default]), UsedName(phi5W,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(phi9,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(Answers_g2,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(phi2,[Default]), UsedName(wait,[Default]), UsedName(phi14,[Default]), UsedName(ne,[Default]), UsedName(phi5,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.Answers_g2)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.graph_algebra.ExampleMuGraphI...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.graph_algebra.ExampleMuGraphI)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.graph_algebra.ExampleMuGraphI)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.graph_algebra.ExampleMuGraphI,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(q2,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(g1,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g2p,[Default]), UsedName(synchronized,[Default]), UsedName(g2,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(q1,[Default]), UsedName(q1p,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(g1p,[Default]), UsedName(ExampleMuGraphI,[Default]), UsedName(q2p,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.graph_db.graph_algebra.ExampleMuGraphI has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(q2,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(g1,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g2p,[Default]), UsedName(synchronized,[Default]), UsedName(g2,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(q1,[Default]), UsedName(q1p,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(g1p,[Default]), UsedName(ExampleMuGraphI,[Default]), UsedName(q2p,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.graph_algebra.ExampleMuGraphI)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.MGraphSim2WTest2...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.MGraphSim2WTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.MGraphSim2WTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.MGraphSim2WTest2,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(MGraphSim2WTest2,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.MGraphSim2WTest2 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(MGraphSim2WTest2,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.MGraphSim2WTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graphalytics.GraphMatcher...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graphalytics.GraphMatcher)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graphalytics.GraphMatcher)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graphalytics.GraphMatcher,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(test$default$2,[Default]), UsedName(overlaps,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(isInstanceOf,[Default]), UsedName(bijections,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(disjoint,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(qRange,[Default]), UsedName(notifyAll,[Default]), UsedName(SELF_LOOPS,[Default]), UsedName(scalation;graphalytics;GraphMatcher;init;,[Default]), UsedName(getClass,[Default]), UsedName(LIMIT,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(feasibleMates,[Default]), UsedName(CHECK,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(test,[Default]), UsedName(showMappings,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(prune,[Default]), UsedName(mappings,[Default]), UsedName(GraphMatcher,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.graphalytics.GraphMatcher has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(test$default$2,[Default]), UsedName(overlaps,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(isInstanceOf,[Default]), UsedName(bijections,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(disjoint,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(qRange,[Default]), UsedName(notifyAll,[Default]), UsedName(SELF_LOOPS,[Default]), UsedName(scalation;graphalytics;GraphMatcher;init;,[Default]), UsedName(getClass,[Default]), UsedName(LIMIT,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(feasibleMates,[Default]), UsedName(CHECK,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(test,[Default]), UsedName(showMappings,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(prune,[Default]), UsedName(mappings,[Default]), UsedName(GraphMatcher,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graphalytics.GraphMatcher)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.graph_algebra.MuStrictSimTest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.graph_algebra.MuStrictSimTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.graph_algebra.MuStrictSimTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.graph_algebra.MuStrictSimTest,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(matcher,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(MuStrictSimTest,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.graph_algebra.MuStrictSimTest has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(matcher,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(MuStrictSimTest,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.graph_algebra.MuStrictSimTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.graph_algebra.MuTightSim...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.graph_algebra.MuTightSim)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.graph_algebra.MuTightSim)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.graph_algebra.MuTightSim,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(test$default$2,[Default]), UsedName(calculateTotalEdges,[Default]), UsedName(hashCode,[Default]), UsedName(MuTightSim,[Default]), UsedName(selectivityCriteria,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(feasibleMatesW,[Default]), UsedName(calculateBallDiameterMetrics,[Default]), UsedName(isInstanceOf,[Default]), UsedName(bijections,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(disjoint,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(qRange,[Default]), UsedName(notifyAll,[Default]), UsedName(SELF_LOOPS,[Default]), UsedName(getClass,[Default]), UsedName(LIMIT,[Default]), UsedName(gRange,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(scalation;graph_db;graph_algebra;MuTightSim;init;,[Default]), UsedName(feasibleMates,[Default]), UsedName(calculateTotalVertices,[Default]), UsedName(CHECK,[Default]), UsedName(mappings2,[Default]), UsedName(synchronized,[Default]), UsedName(dualFilter,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(test,[Default]), UsedName(merge,[Default]), UsedName(showMappings,[Default]), UsedName(tightSim,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(countMappings,[Default]), UsedName(filterGraph,[Default]), UsedName(prune,[Default]), UsedName(mappings,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.graph_db.graph_algebra.MuTightSim has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(test$default$2,[Default]), UsedName(calculateTotalEdges,[Default]), UsedName(hashCode,[Default]), UsedName(MuTightSim,[Default]), UsedName(selectivityCriteria,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(feasibleMatesW,[Default]), UsedName(calculateBallDiameterMetrics,[Default]), UsedName(isInstanceOf,[Default]), UsedName(bijections,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(disjoint,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(qRange,[Default]), UsedName(notifyAll,[Default]), UsedName(SELF_LOOPS,[Default]), UsedName(getClass,[Default]), UsedName(LIMIT,[Default]), UsedName(gRange,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(scalation;graph_db;graph_algebra;MuTightSim;init;,[Default]), UsedName(feasibleMates,[Default]), UsedName(calculateTotalVertices,[Default]), UsedName(CHECK,[Default]), UsedName(mappings2,[Default]), UsedName(synchronized,[Default]), UsedName(dualFilter,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(test,[Default]), UsedName(merge,[Default]), UsedName(showMappings,[Default]), UsedName(tightSim,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(countMappings,[Default]), UsedName(filterGraph,[Default]), UsedName(prune,[Default]), UsedName(mappings,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.graph_algebra.MuTightSim)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.columnar_db.QueryRunner...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.columnar_db.QueryRunner)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.columnar_db.QueryRunner)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.columnar_db.QueryRunner,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(scanner,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(QueryRunner,[Default]), UsedName(!=,[Default]), UsedName(prefix,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(loadStatement,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(help,[Default]), UsedName(running,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.columnar_db.QueryRunner has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(scanner,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(QueryRunner,[Default]), UsedName(!=,[Default]), UsedName(prefix,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(loadStatement,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(help,[Default]), UsedName(running,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.columnar_db.QueryRunner)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graphalytics.TightSim2Test2...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graphalytics.TightSim2Test2)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graphalytics.TightSim2Test2)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graphalytics.TightSim2Test2,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(TightSim2Test2,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graphalytics.TightSim2Test2 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(TightSim2Test2,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graphalytics.TightSim2Test2)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graphalytics.GraphIOTest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graphalytics.GraphIOTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graphalytics.GraphIOTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graphalytics.GraphIOTest,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(avDegree,[Default]), UsedName(GraphIOTest,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(inverse,[Default]), UsedName(name,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(nLabels,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(size,[Default]), UsedName(wait,[Default]), UsedName(ran_graph,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graphalytics.GraphIOTest has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(avDegree,[Default]), UsedName(GraphIOTest,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(inverse,[Default]), UsedName(name,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(nLabels,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(size,[Default]), UsedName(wait,[Default]), UsedName(ran_graph,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graphalytics.GraphIOTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.test.TightPattern_STest2...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.test.TightPattern_STest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.test.TightPattern_STest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.test.TightPattern_STest2,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(gLabels,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(gDegree,[Default]), UsedName(inverse,[Default]), UsedName(UNIFORM,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(qSize,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(qDegree,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(TightPattern_STest2,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.test.TightPattern_STest2 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(gLabels,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(gDegree,[Default]), UsedName(inverse,[Default]), UsedName(UNIFORM,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(qSize,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(qDegree,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(TightPattern_STest2,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.test.TightPattern_STest2)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.MGraphSimTest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.MGraphSimTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.MGraphSimTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.MGraphSimTest,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(MGraphSimTest,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.MGraphSimTest has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(MGraphSimTest,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.MGraphSimTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.MTightSimTest5...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.MTightSimTest5)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.MTightSimTest5)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.MTightSimTest5,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(MTightSimTest5,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.MTightSimTest5 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(MTightSimTest5,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.MTightSimTest5)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.Tree...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.Tree)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.Tree)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.Tree,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(scalation;graph_db;Tree;init;,[Default]), UsedName(apply$default$2,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(printTree,[Default]), UsedName(apply$default$3,[Default]), UsedName(labelMap,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(name,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(apply$default$4,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(apply,[Default]), UsedName(Tree,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(size,[Default]), UsedName(wait,[Default]), UsedName(<init>$default$3,[Default]), UsedName(ne,[Default]), UsedName(add,[Default]), UsedName(root,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.graph_db.Tree has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(scalation;graph_db;Tree;init;,[Default]), UsedName(apply$default$2,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(printTree,[Default]), UsedName(apply$default$3,[Default]), UsedName(labelMap,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(name,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(apply$default$4,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(apply,[Default]), UsedName(Tree,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(size,[Default]), UsedName(wait,[Default]), UsedName(<init>$default$3,[Default]), UsedName(ne,[Default]), UsedName(add,[Default]), UsedName(root,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.Tree)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.distributed_db.package...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.distributed_db.package)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.distributed_db.package)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.distributed_db.RelationDBMaster: Set(UsedName(createReply,[Default]), UsedName(union,[Default]), UsedName(intersect,[Default]), UsedName(show,[Default]), UsedName(joinIn,[Default]), UsedName(isInstanceOf,[Default]), UsedName(intersectIn,[Default]), UsedName(create,[Default]), UsedName(unionIn,[Default]), UsedName(asInstanceOf,[Default]), UsedName(productIn,[Default]), UsedName(materialize,[Default]), UsedName(addReply,[Default]), UsedName(select,[Default]), UsedName(product,[Default]), UsedName(showIn,[Default]), UsedName(==,[Default]), UsedName(createIn,[Default]), UsedName(join,[Default]), UsedName(projectIn,[Default]), UsedName(addIn,[Default]), UsedName(minus,[Default]), UsedName(minusIn,[Default]), UsedName(package,[Default]), UsedName(materializeIn,[Default]), UsedName(ne,[Default]), UsedName(selectIn,[Default]), UsedName(Predicate,[Default]), UsedName(relReply,[Default]), UsedName(add,[Default]), UsedName(project,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.distributed_db.RelationDBMasterTest: Set(UsedName(show,[Default]), UsedName(create,[Default]), UsedName(materialize,[Default]), UsedName(select,[Default]), UsedName(nameAll,[Default]), UsedName(package,[Default]), UsedName(Predicate,[Default]), UsedName(add,[Default]), UsedName(project,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.distributed_db.RelationDBWorker: Set(UsedName(createReply,[Default]), UsedName(union,[Default]), UsedName(intersect,[Default]), UsedName(joinIn,[Default]), UsedName(isInstanceOf,[Default]), UsedName(intersectIn,[Default]), UsedName(unionIn,[Default]), UsedName(asInstanceOf,[Default]), UsedName(productIn,[Default]), UsedName(materialize,[Default]), UsedName(addReply,[Default]), UsedName(select,[Default]), UsedName(product,[Default]), UsedName(showIn,[Default]), UsedName(==,[Default]), UsedName(createIn,[Default]), UsedName(join,[Default]), UsedName(projectIn,[Default]), UsedName(addIn,[Default]), UsedName(minus,[Default]), UsedName(minusIn,[Default]), UsedName(package,[Default]), UsedName(materializeIn,[Default]), UsedName(selectIn,[Default]), UsedName(Predicate,[Default]), UsedName(relReply,[Default]), UsedName(add,[Default]), UsedName(project,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.distributed_db.package,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(createReply,[Default]), UsedName(union,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(intersect,[Default]), UsedName(show,[Default]), UsedName(joinIn,[Default]), UsedName(isInstanceOf,[Default]), UsedName(intersectIn,[Default]), UsedName(finalize,[Default]), UsedName(create,[Default]), UsedName(unionIn,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(productIn,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(materialize,[Default]), UsedName(addReply,[Default]), UsedName(getClass,[Default]), UsedName(select,[Default]), UsedName(product,[Default]), UsedName(showIn,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(createIn,[Default]), UsedName(join,[Default]), UsedName(projectIn,[Default]), UsedName(addIn,[Default]), UsedName(nameAll,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(minus,[Default]), UsedName(minusIn,[Default]), UsedName(wait,[Default]), UsedName(package,[Default]), UsedName(materializeIn,[Default]), UsedName(ne,[Default]), UsedName(selectIn,[Default]), UsedName(Predicate,[Default]), UsedName(relReply,[Default]), UsedName(add,[Default]), UsedName(project,[Default]), UsedName(eq,[Default]))) invalidates 4 classes due to The scalation.distributed_db.package has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(createReply,[Default]), UsedName(union,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(intersect,[Default]), UsedName(show,[Default]), UsedName(joinIn,[Default]), UsedName(isInstanceOf,[Default]), UsedName(intersectIn,[Default]), UsedName(finalize,[Default]), UsedName(create,[Default]), UsedName(unionIn,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(productIn,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(materialize,[Default]), UsedName(addReply,[Default]), UsedName(getClass,[Default]), UsedName(select,[Default]), UsedName(product,[Default]), UsedName(showIn,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(createIn,[Default]), UsedName(join,[Default]), UsedName(projectIn,[Default]), UsedName(addIn,[Default]), UsedName(nameAll,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(minus,[Default]), UsedName(minusIn,[Default]), UsedName(wait,[Default]), UsedName(package,[Default]), UsedName(materializeIn,[Default]), UsedName(ne,[Default]), UsedName(selectIn,[Default]), UsedName(Predicate,[Default]), UsedName(relReply,[Default]), UsedName(add,[Default]), UsedName(project,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.distributed_db.package)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> by member reference: Set(scalation.distributed_db.RelationDBMaster, scalation.distributed_db.RelationDBMasterTest, scalation.distributed_db.RelationDBWorker)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.Query...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.Query)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.Query)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.Query,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(buildGraph,[Default]), UsedName(CHAR_VARIABLE,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(canEqual,[Default]), UsedName(productPrefix,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(hasRegex,[Default]), UsedName($asInstanceOf,[Default]), UsedName(scalation;graph_db;pattern_matching;Query;init;,[Default]), UsedName(triples,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(Query,[Default]), UsedName(productArity,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(hasVariable,[Default]), UsedName(apply,[Default]), UsedName(synchronized,[Default]), UsedName(STR_REGEX,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(buildGraph$default$1,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(hasWildcard,[Default]), UsedName(unapplySeq,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.Query has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(buildGraph,[Default]), UsedName(CHAR_VARIABLE,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(canEqual,[Default]), UsedName(productPrefix,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(hasRegex,[Default]), UsedName($asInstanceOf,[Default]), UsedName(scalation;graph_db;pattern_matching;Query;init;,[Default]), UsedName(triples,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(Query,[Default]), UsedName(productArity,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(hasVariable,[Default]), UsedName(apply,[Default]), UsedName(synchronized,[Default]), UsedName(STR_REGEX,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(buildGraph$default$1,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(hasWildcard,[Default]), UsedName(unapplySeq,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.Query)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.distributed_db.joinIn...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.distributed_db.joinIn)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.distributed_db.joinIn)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.distributed_db.RelationDBMaster: Set(UsedName(joinIn,[Default]), UsedName(isInstanceOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(==,[Default]), UsedName(apply,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(r,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.distributed_db.RelationDBWorker: Set(UsedName(joinIn,[Default]), UsedName(isInstanceOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(uc,[Default]), UsedName(==,[Default]), UsedName(apply,[Default]), UsedName(q,[Default]), UsedName(r,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.distributed_db.joinIn,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(copy$default$1,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(canEqual,[Default]), UsedName(curried,[Default]), UsedName(productPrefix,[Default]), UsedName(tupled,[Default]), UsedName(joinIn,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(scalation;distributed_db;joinIn;init;,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(copy$default$2,[Default]), UsedName(uc,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(unapply,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(apply,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(copy$default$3,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(r,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 3 classes due to The scalation.distributed_db.joinIn has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(copy$default$1,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(canEqual,[Default]), UsedName(curried,[Default]), UsedName(productPrefix,[Default]), UsedName(tupled,[Default]), UsedName(joinIn,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(scalation;distributed_db;joinIn;init;,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(copy$default$2,[Default]), UsedName(uc,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(unapply,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(apply,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(copy$default$3,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(r,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.distributed_db.joinIn)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> by member reference: Set(scalation.distributed_db.RelationDBMaster, scalation.distributed_db.RelationDBWorker)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.GraphDFSTest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.GraphDFSTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.GraphDFSTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.GraphDFSTest,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(GraphDFSTest,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(test,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.GraphDFSTest has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(GraphDFSTest,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(test,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.GraphDFSTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graphalytics.DualSim2Test2...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graphalytics.DualSim2Test2)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graphalytics.DualSim2Test2)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graphalytics.DualSim2Test2,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(DualSim2Test2,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graphalytics.DualSim2Test2 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(DualSim2Test2,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graphalytics.DualSim2Test2)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.dist_db.showIn...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.dist_db.showIn)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.dist_db.showIn)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.dist_db.RelDBWorker: Set(UsedName(isInstanceOf,[Default]), UsedName(name,[Default]), UsedName(asInstanceOf,[Default]), UsedName(uc,[Default]), UsedName(showIn,[Default]), UsedName(==,[Default]), UsedName(apply,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.dist_db.showIn,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(copy$default$1,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(canEqual,[Default]), UsedName(curried,[Default]), UsedName(productPrefix,[Default]), UsedName(tupled,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(name,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(copy$default$2,[Default]), UsedName(uc,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(unapply,[Default]), UsedName(showIn,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(apply,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(scalation;dist_db;showIn;init;,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 2 classes due to The scalation.dist_db.showIn has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(copy$default$1,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(canEqual,[Default]), UsedName(curried,[Default]), UsedName(productPrefix,[Default]), UsedName(tupled,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(name,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(copy$default$2,[Default]), UsedName(uc,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(unapply,[Default]), UsedName(showIn,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(apply,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(scalation;dist_db;showIn;init;,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.dist_db.showIn)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> by member reference: Set(scalation.dist_db.RelDBWorker)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.columnar_db.RelationTest8...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.columnar_db.RelationTest8)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.columnar_db.RelationTest8)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.columnar_db.RelationTest8,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(RelationTest8,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(professor,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.columnar_db.RelationTest8 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(RelationTest8,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(professor,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.columnar_db.RelationTest8)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.graph_algebra.MuTightSimTest2...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.graph_algebra.MuTightSimTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.graph_algebra.MuTightSimTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.graph_algebra.MuTightSimTest2,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(matcher,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(MuTightSimTest2,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.graph_algebra.MuTightSimTest2 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(matcher,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(MuTightSimTest2,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.graph_algebra.MuTightSimTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.ExampleGraphD...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.ExampleGraphD)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.ExampleGraphD)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.ExampleGraphD,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(q3p,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(q2,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(g1,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g2p,[Default]), UsedName(g3p,[Default]), UsedName(q3,[Default]), UsedName(synchronized,[Default]), UsedName(g2,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(q1,[Default]), UsedName(q1p,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(g1p,[Default]), UsedName(ExampleGraphD,[Default]), UsedName(q2p,[Default]), UsedName(g3,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.graph_db.ExampleGraphD has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(q3p,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(q2,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(g1,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g2p,[Default]), UsedName(g3p,[Default]), UsedName(q3,[Default]), UsedName(synchronized,[Default]), UsedName(g2,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(q1,[Default]), UsedName(q1p,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(g1p,[Default]), UsedName(ExampleGraphD,[Default]), UsedName(q2p,[Default]), UsedName(g3,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.ExampleGraphD)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graphalytics.DualIsoCARTest2...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graphalytics.DualIsoCARTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graphalytics.DualIsoCARTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graphalytics.DualIsoCARTest2,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(matcher,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(DualIsoCARTest2,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(psi,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graphalytics.DualIsoCARTest2 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(matcher,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(DualIsoCARTest2,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(psi,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graphalytics.DualIsoCARTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.columnar_db.Relation...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.columnar_db.Relation)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.columnar_db.Relation)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.dist_db.RelDBMaster: Set(UsedName(apply$default$5,[Default]), UsedName(union,[Default]), UsedName(scalation;columnar_db;Relation;init;,[Default]), UsedName(intersect,[Default]), UsedName(delete,[Default]), UsedName(show,[Default]), UsedName(-,[Default]), UsedName(isInstanceOf,[Default]), UsedName(name,[Default]), UsedName(asInstanceOf,[Default]), UsedName(key,[Default]), UsedName(show$default$1,[Default]), UsedName(materialize,[Default]), UsedName(domain,[Default]), UsedName(select,[Default]), UsedName(product,[Default]), UsedName(count,[Default]), UsedName(==,[Default]), UsedName(join,[Default]), UsedName(apply,[Default]), UsedName(rows,[Default]), UsedName(<init>$default$6,[Default]), UsedName(minus,[Default]), UsedName(indices,[Default]), UsedName(ne,[Default]), UsedName(min,[Default]), UsedName(<init>$default$7,[Default]), UsedName(colName,[Default]), UsedName(Relation,[Default]), UsedName(col,[Default]), UsedName(add,[Default]), UsedName(project,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.preprocessing.project: Set(UsedName($isInstanceOf,[Default]), UsedName(isInstanceOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(==,[Default]), UsedName(apply,[Default]), UsedName(toString,[Default]), UsedName(Relation,[Default]), UsedName(project,[Default]), UsedName(eq,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.dist_db.relReply: Set(UsedName($isInstanceOf,[Default]), UsedName(isInstanceOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(==,[Default]), UsedName(apply,[Default]), UsedName(toString,[Default]), UsedName(Relation,[Default]), UsedName(eq,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.dist_db.RelDBMasterTest3: Set(UsedName(union,[Default]), UsedName(show,[Default]), UsedName(-,[Default]), UsedName(show$default$1,[Default]), UsedName(apply,[Default]), UsedName(Relation,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.distributed_db.relReply: Set(UsedName($isInstanceOf,[Default]), UsedName(isInstanceOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(==,[Default]), UsedName(apply,[Default]), UsedName(toString,[Default]), UsedName(Relation,[Default]), UsedName(eq,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.dist_db.RelDBWorker: Set(UsedName(intersect,[Default]), UsedName(-,[Default]), UsedName(isInstanceOf,[Default]), UsedName(name,[Default]), UsedName(asInstanceOf,[Default]), UsedName(key,[Default]), UsedName(materialize,[Default]), UsedName(domain,[Default]), UsedName(select,[Default]), UsedName(product,[Default]), UsedName(count,[Default]), UsedName(==,[Default]), UsedName(apply,[Default]), UsedName(minus,[Default]), UsedName(Relation,[Default]), UsedName(add,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.dist_db.minusIn: Set(UsedName($isInstanceOf,[Default]), UsedName(isInstanceOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(==,[Default]), UsedName(apply,[Default]), UsedName(toString,[Default]), UsedName(Relation,[Default]), UsedName(eq,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.dist_db.joinIn: Set(UsedName($isInstanceOf,[Default]), UsedName(isInstanceOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(==,[Default]), UsedName(apply,[Default]), UsedName(toString,[Default]), UsedName(Relation,[Default]), UsedName(eq,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.distributed_db.package: Set(UsedName(Relation,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.distributed_db.RelationDBWorker: Set(UsedName(union,[Default]), UsedName(intersect,[Default]), UsedName(-,[Default]), UsedName(isInstanceOf,[Default]), UsedName(name,[Default]), UsedName(asInstanceOf,[Default]), UsedName(key,[Default]), UsedName(materialize,[Default]), UsedName(domain,[Default]), UsedName(select,[Default]), UsedName(product,[Default]), UsedName(==,[Default]), UsedName(join,[Default]), UsedName(apply,[Default]), UsedName(minus,[Default]), UsedName(Relation,[Default]), UsedName(add,[Default]), UsedName(project,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.preprocessing.PreProcessingMaster: Set(UsedName(isInstanceOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(==,[Default]), UsedName(apply,[Default]), UsedName(Relation,[Default]), UsedName(project,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.dist_db.DistUtil: Set(UsedName(apply,[Default]), UsedName(Relation,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.dist_db.productIn: Set(UsedName($isInstanceOf,[Default]), UsedName(isInstanceOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(==,[Default]), UsedName(apply,[Default]), UsedName(toString,[Default]), UsedName(Relation,[Default]), UsedName(eq,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.dist_db.selectIn: Set(UsedName($isInstanceOf,[Default]), UsedName(isInstanceOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(==,[Default]), UsedName(apply,[Default]), UsedName(toString,[Default]), UsedName(Relation,[Default]), UsedName(eq,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.distributed_db.RelationDBMaster: Set(UsedName(apply$default$5,[Default]), UsedName(union,[Default]), UsedName(intersect,[Default]), UsedName(show,[Default]), UsedName(-,[Default]), UsedName(isInstanceOf,[Default]), UsedName(name,[Default]), UsedName(asInstanceOf,[Default]), UsedName(key,[Default]), UsedName(show$default$1,[Default]), UsedName(materialize,[Default]), UsedName(domain,[Default]), UsedName(select,[Default]), UsedName(product,[Default]), UsedName(==,[Default]), UsedName(join,[Default]), UsedName(apply,[Default]), UsedName(minus,[Default]), UsedName(ne,[Default]), UsedName(Relation,[Default]), UsedName(add,[Default]), UsedName(project,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.dist_db.relReply2: Set(UsedName($isInstanceOf,[Default]), UsedName(isInstanceOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(==,[Default]), UsedName(apply,[Default]), UsedName(toString,[Default]), UsedName(Relation,[Default]), UsedName(eq,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.distributed_db.DistUtil: Set(UsedName(apply,[Default]), UsedName(Relation,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.dist_db.package: Set(UsedName(Relation,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.dist_db.RelDBMasterTest2: Set(UsedName(apply,[Default]), UsedName(Relation,[Default]), UsedName(save,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.dist_db.intersectIn: Set(UsedName($isInstanceOf,[Default]), UsedName(isInstanceOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(==,[Default]), UsedName(apply,[Default]), UsedName(toString,[Default]), UsedName(Relation,[Default]), UsedName(eq,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.dist_db.RelDBMasterTest4: Set(UsedName(union,[Default]), UsedName(row,[Default]), UsedName(show,[Default]), UsedName(materialize,[Default]), UsedName(apply,[Default]), UsedName(rows,[Default]), UsedName(Relation,[Default]), UsedName(add,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.columnar_db.Relation,ModifiedNames(changes = UsedName(fromMatriD,[Default]), UsedName(σ,[Default]), UsedName(equals,[Default]), UsedName(apply$default$5,[Default]), UsedName(union,[Default]), UsedName(pisigmaR,[Default]), UsedName(indextoKey,[Default]), UsedName(reverseOrderBy,[Default]), UsedName(sigmaDpar,[Default]), UsedName(hashCode,[Default]), UsedName(leftJoin,[Default]), UsedName(row,[Default]), UsedName(toMatriII$default$3,[Default]), UsedName(scalation;columnar_db;Relation;init;,[Default]), UsedName(intersect2,[Default]), UsedName(toMatriDD,[Default]), UsedName(writeJSON,[Default]), UsedName(eproject,[Default]), UsedName($isInstanceOf,[Default]), UsedName(corr,[Default]), UsedName(fromMatriD_$default$6,[Default]), UsedName(sigmaD,[Default]), UsedName(generateIndex$default$1,[Default]), UsedName(toMatriD,[Default]), UsedName(clone,[Default]), UsedName(intersect,[Default]), UsedName(delete,[Default]), UsedName(Ɛ,[Default]), UsedName(show,[Default]), UsedName(sigmaR,[Default]), UsedName(uncompress,[Default]), UsedName(disambiguate,[Default]), UsedName(-,[Default]), UsedName(ωω,[Default]), UsedName(groupBy,[Default]), UsedName(selectL,[Default]), UsedName(isInstanceOf,[Default]), UsedName(toRleVectorD,[Default]), UsedName(fromMatriI,[Default]), UsedName(toVectorD,[Default]), UsedName(max,[Default]), UsedName(π,[Default]), UsedName(rightJoinApx,[Default]), UsedName(mean,[Default]), UsedName(finalize,[Default]), UsedName(leftJoinApx,[Default]), UsedName(⋈,[Default]), UsedName(name,[Default]), UsedName(toMatriDD$default$3,[Default]), UsedName(asInstanceOf,[Default]), UsedName(update,[Default]), UsedName(pisigmaI,[Default]), UsedName($asInstanceOf,[Default]), UsedName(fromMatriII$default$5,[Default]), UsedName(key,[Default]), UsedName(cols,[Default]), UsedName(pi,[Default]), UsedName(orderedIndex,[Default]), UsedName(!=,[Default]), UsedName(toVectorS,[Default]), UsedName(toMatriI,[Default]), UsedName(epiAny,[Default]), UsedName(sigmaC,[Default]), UsedName(notifyAll,[Default]), UsedName(show$default$1,[Default]), UsedName(materialize,[Default]), UsedName(×,[Default]), UsedName(selectT,[Default]), UsedName(toVectorI,[Default]), UsedName(epi,[Default]), UsedName(domain,[Default]), UsedName(generateIndex,[Default]), UsedName(getClass,[Default]), UsedName(⋉$default$1,[Default]), UsedName(select,[Default]), UsedName(product,[Default]), UsedName(selectS,[Default]), UsedName(ζζ,[Default]), UsedName(toMatriI2$default$2,[Default]), UsedName(toMatriDI$default$3,[Default]), UsedName(contains,[Default]), UsedName(colNames,[Default]), UsedName(⋊,[Default]), UsedName(sigmaQ,[Default]), UsedName(compress,[Default]), UsedName(count,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(toMatriI2$default$1,[Default]), UsedName(join,[Default]), UsedName(π$default$2,[Default]), UsedName(colsMap,[Default]), UsedName(orderBy,[Default]), UsedName(materialize1,[Default]), UsedName(selectAt,[Default]), UsedName(apply,[Default]), UsedName(rows,[Default]), UsedName(sigmaS,[Default]), UsedName(corr$default$2,[Default]), UsedName(writeCSV,[Default]), UsedName(pisigmaL,[Default]), UsedName(materialize2,[Default]), UsedName(selectI,[Default]), UsedName(selectC,[Default]), UsedName(column,[Default]), UsedName(selectD,[Default]), UsedName(fromMatriD$default$5,[Default]), UsedName(synchronized,[Default]), UsedName(Ʋ,[Default]), UsedName(<init>$default$6,[Default]), UsedName(pisigmaS,[Default]), UsedName(Π,[Default]), UsedName(toString,[Default]), UsedName(sigmaL,[Default]), UsedName(##,[Default]), UsedName(minus,[Default]), UsedName(fromMatriD_,[Default]), UsedName(toMatriI$default$2,[Default]), UsedName(flaw,[Default]), UsedName(⋂,[Default]), UsedName(<init>$default$5,[Default]), UsedName(pisigmaD,[Default]), UsedName(sigmaI,[Default]), UsedName(wait,[Default]), UsedName(fromMatriII$default$6,[Default]), UsedName(toMatriI2,[Default]), UsedName(fromMatriII,[Default]), UsedName(joinindex,[Default]), UsedName(⋃,[Default]), UsedName(uniq_union,[Default]), UsedName(fromMatriD$default$4,[Default]), UsedName(parjoin,[Default]), UsedName(sigma,[Default]), UsedName(rename,[Default]), UsedName(toMatriII,[Default]), UsedName(indices,[Default]), UsedName(ne,[Default]), UsedName(toRleVectorI,[Default]), UsedName(domains,[Default]), UsedName(sum,[Default]), UsedName(toRleVectorS,[Default]), UsedName(corr$default$3,[Default]), UsedName(toMap,[Default]), UsedName(leftJoin$default$1,[Default]), UsedName(min,[Default]), UsedName(index,[Default]), UsedName(colMap,[Default]), UsedName(<init>$default$7,[Default]), UsedName(colName,[Default]), UsedName(pisigmaQ,[Default]), UsedName(pi$default$2,[Default]), UsedName(incompatible,[Default]), UsedName(showFk,[Default]), UsedName(toMatriD$default$2,[Default]), UsedName(γ,[Default]), UsedName(project$default$2,[Default]), UsedName(Relation,[Default]), UsedName(avg,[Default]), UsedName(save,[Default]), UsedName(col,[Default]), UsedName(variance,[Default]), UsedName(selectQ,[Default]), UsedName(add,[Default]), UsedName(columns,[Default]), UsedName(fKeys,[Default]), UsedName(⋉,[Default]), UsedName(project,[Default]), UsedName(fromMatriI$default$5,[Default]), UsedName(selectR,[Default]), UsedName(from,[Default]), UsedName(ζ,[Default]), UsedName(pisigmaC,[Default]), UsedName(<init>$default$4,[Default]), UsedName(fromMatriD_$default$5,[Default]), UsedName(fromMatriI$default$4,[Default]), UsedName(ω,[Default]), UsedName(toMatriDI,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]), UsedName(rightJoin,[Default]))) invalidates 22 classes due to The scalation.columnar_db.Relation has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(fromMatriD,[Default]), UsedName(σ,[Default]), UsedName(equals,[Default]), UsedName(apply$default$5,[Default]), UsedName(union,[Default]), UsedName(pisigmaR,[Default]), UsedName(indextoKey,[Default]), UsedName(reverseOrderBy,[Default]), UsedName(sigmaDpar,[Default]), UsedName(hashCode,[Default]), UsedName(leftJoin,[Default]), UsedName(row,[Default]), UsedName(toMatriII$default$3,[Default]), UsedName(scalation;columnar_db;Relation;init;,[Default]), UsedName(intersect2,[Default]), UsedName(toMatriDD,[Default]), UsedName(writeJSON,[Default]), UsedName(eproject,[Default]), UsedName($isInstanceOf,[Default]), UsedName(corr,[Default]), UsedName(fromMatriD_$default$6,[Default]), UsedName(sigmaD,[Default]), UsedName(generateIndex$default$1,[Default]), UsedName(toMatriD,[Default]), UsedName(clone,[Default]), UsedName(intersect,[Default]), UsedName(delete,[Default]), UsedName(Ɛ,[Default]), UsedName(show,[Default]), UsedName(sigmaR,[Default]), UsedName(uncompress,[Default]), UsedName(disambiguate,[Default]), UsedName(-,[Default]), UsedName(ωω,[Default]), UsedName(groupBy,[Default]), UsedName(selectL,[Default]), UsedName(isInstanceOf,[Default]), UsedName(toRleVectorD,[Default]), UsedName(fromMatriI,[Default]), UsedName(toVectorD,[Default]), UsedName(max,[Default]), UsedName(π,[Default]), UsedName(rightJoinApx,[Default]), UsedName(mean,[Default]), UsedName(finalize,[Default]), UsedName(leftJoinApx,[Default]), UsedName(⋈,[Default]), UsedName(name,[Default]), UsedName(toMatriDD$default$3,[Default]), UsedName(asInstanceOf,[Default]), UsedName(update,[Default]), UsedName(pisigmaI,[Default]), UsedName($asInstanceOf,[Default]), UsedName(fromMatriII$default$5,[Default]), UsedName(key,[Default]), UsedName(cols,[Default]), UsedName(pi,[Default]), UsedName(orderedIndex,[Default]), UsedName(!=,[Default]), UsedName(toVectorS,[Default]), UsedName(toMatriI,[Default]), UsedName(epiAny,[Default]), UsedName(sigmaC,[Default]), UsedName(notifyAll,[Default]), UsedName(show$default$1,[Default]), UsedName(materialize,[Default]), UsedName(×,[Default]), UsedName(selectT,[Default]), UsedName(toVectorI,[Default]), UsedName(epi,[Default]), UsedName(domain,[Default]), UsedName(generateIndex,[Default]), UsedName(getClass,[Default]), UsedName(⋉$default$1,[Default]), UsedName(select,[Default]), UsedName(product,[Default]), UsedName(selectS,[Default]), UsedName(ζζ,[Default]), UsedName(toMatriI2$default$2,[Default]), UsedName(toMatriDI$default$3,[Default]), UsedName(contains,[Default]), UsedName(colNames,[Default]), UsedName(⋊,[Default]), UsedName(sigmaQ,[Default]), UsedName(compress,[Default]), UsedName(count,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(toMatriI2$default$1,[Default]), UsedName(join,[Default]), UsedName(π$default$2,[Default]), UsedName(colsMap,[Default]), UsedName(orderBy,[Default]), UsedName(materialize1,[Default]), UsedName(selectAt,[Default]), UsedName(apply,[Default]), UsedName(rows,[Default]), UsedName(sigmaS,[Default]), UsedName(corr$default$2,[Default]), UsedName(writeCSV,[Default]), UsedName(pisigmaL,[Default]), UsedName(materialize2,[Default]), UsedName(selectI,[Default]), UsedName(selectC,[Default]), UsedName(column,[Default]), UsedName(selectD,[Default]), UsedName(fromMatriD$default$5,[Default]), UsedName(synchronized,[Default]), UsedName(Ʋ,[Default]), UsedName(<init>$default$6,[Default]), UsedName(pisigmaS,[Default]), UsedName(Π,[Default]), UsedName(toString,[Default]), UsedName(sigmaL,[Default]), UsedName(##,[Default]), UsedName(minus,[Default]), UsedName(fromMatriD_,[Default]), UsedName(toMatriI$default$2,[Default]), UsedName(flaw,[Default]), UsedName(⋂,[Default]), UsedName(<init>$default$5,[Default]), UsedName(pisigmaD,[Default]), UsedName(sigmaI,[Default]), UsedName(wait,[Default]), UsedName(fromMatriII$default$6,[Default]), UsedName(toMatriI2,[Default]), UsedName(fromMatriII,[Default]), UsedName(joinindex,[Default]), UsedName(⋃,[Default]), UsedName(uniq_union,[Default]), UsedName(fromMatriD$default$4,[Default]), UsedName(parjoin,[Default]), UsedName(sigma,[Default]), UsedName(rename,[Default]), UsedName(toMatriII,[Default]), UsedName(indices,[Default]), UsedName(ne,[Default]), UsedName(toRleVectorI,[Default]), UsedName(domains,[Default]), UsedName(sum,[Default]), UsedName(toRleVectorS,[Default]), UsedName(corr$default$3,[Default]), UsedName(toMap,[Default]), UsedName(leftJoin$default$1,[Default]), UsedName(min,[Default]), UsedName(index,[Default]), UsedName(colMap,[Default]), UsedName(<init>$default$7,[Default]), UsedName(colName,[Default]), UsedName(pisigmaQ,[Default]), UsedName(pi$default$2,[Default]), UsedName(incompatible,[Default]), UsedName(showFk,[Default]), UsedName(toMatriD$default$2,[Default]), UsedName(γ,[Default]), UsedName(project$default$2,[Default]), UsedName(Relation,[Default]), UsedName(avg,[Default]), UsedName(save,[Default]), UsedName(col,[Default]), UsedName(variance,[Default]), UsedName(selectQ,[Default]), UsedName(add,[Default]), UsedName(columns,[Default]), UsedName(fKeys,[Default]), UsedName(⋉,[Default]), UsedName(project,[Default]), UsedName(fromMatriI$default$5,[Default]), UsedName(selectR,[Default]), UsedName(from,[Default]), UsedName(ζ,[Default]), UsedName(pisigmaC,[Default]), UsedName(<init>$default$4,[Default]), UsedName(fromMatriD_$default$5,[Default]), UsedName(fromMatriI$default$4,[Default]), UsedName(ω,[Default]), UsedName(toMatriDI,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]), UsedName(rightJoin,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.columnar_db.Relation)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> by member reference: Set(scalation.dist_db.RelDBMaster, scalation.preprocessing.project, scalation.dist_db.relReply, scalation.dist_db.RelDBMasterTest3, scalation.distributed_db.relReply, scalation.dist_db.RelDBWorker, scalation.dist_db.minusIn, scalation.dist_db.joinIn, scalation.distributed_db.package, scalation.distributed_db.RelationDBWorker, scalation.preprocessing.PreProcessingMaster, scalation.dist_db.DistUtil, scalation.dist_db.productIn, scalation.dist_db.selectIn, scalation.distributed_db.RelationDBMaster, scalation.dist_db.relReply2, scalation.distributed_db.DistUtil, scalation.dist_db.package, scalation.dist_db.RelDBMasterTest2, scalation.dist_db.intersectIn, scalation.dist_db.RelDBMasterTest4)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.SpanningTreeTest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.SpanningTreeTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.SpanningTreeTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.SpanningTreeTest,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(st,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(SpanningTreeTest,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.SpanningTreeTest has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(st,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(SpanningTreeTest,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.SpanningTreeTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.QueryTest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.QueryTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.QueryTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.QueryTest,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(QueryTest,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.QueryTest has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(QueryTest,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.QueryTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graphalytics.StrictSim2Test...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graphalytics.StrictSim2Test)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graphalytics.StrictSim2Test)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graphalytics.StrictSim2Test,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(StrictSim2Test,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graphalytics.StrictSim2Test has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(StrictSim2Test,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graphalytics.StrictSim2Test)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.MDualSimWTest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.MDualSimWTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.MDualSimWTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.MDualSimWTest,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(MDualSimWTest,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.MDualSimWTest has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(MDualSimWTest,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.MDualSimWTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.MGraphGenTest8...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.MGraphGenTest8)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.MGraphGenTest8)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.MGraphGenTest8,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(MGraphGenTest8,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.MGraphGenTest8 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(MGraphGenTest8,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.MGraphGenTest8)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graphalytics.BipartiteMatcherTest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graphalytics.BipartiteMatcherTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graphalytics.BipartiteMatcherTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graphalytics.BipartiteMatcherTest,ModifiedNames(changes = UsedName(bpMatch,[Default]), UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(bpGraph,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName(BipartiteMatcherTest,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graphalytics.BipartiteMatcherTest has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(bpMatch,[Default]), UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(bpGraph,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName(BipartiteMatcherTest,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graphalytics.BipartiteMatcherTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.columnar_db.ImputeNormalWin...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.columnar_db.ImputeNormalWin)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.columnar_db.ImputeNormalWin)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.columnar_db.ImputeNormalWin,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(ImputeNormalWin,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(imputeAll,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.columnar_db.ImputeNormalWin has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(ImputeNormalWin,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(imputeAll,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.columnar_db.ImputeNormalWin)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.MGraphSim2WTest4...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.MGraphSim2WTest4)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.MGraphSim2WTest4)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.MGraphSim2WTest4,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(MGraphSim2WTest4,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.MGraphSim2WTest4 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(MGraphSim2WTest4,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.MGraphSim2WTest4)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.SSShortestPathTest2...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.SSShortestPathTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.SSShortestPathTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.SSShortestPathTest2,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(SSShortestPathTest2,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(s,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(sp,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.SSShortestPathTest2 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(SSShortestPathTest2,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(s,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(sp,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.SSShortestPathTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.GraphSim...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.GraphSim)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.GraphSim)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.GraphSim,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(test$default$2,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(feasibleMatesW,[Default]), UsedName(isInstanceOf,[Default]), UsedName(bijections,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(disjoint,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(qRange,[Default]), UsedName(notifyAll,[Default]), UsedName(SELF_LOOPS,[Default]), UsedName(getClass,[Default]), UsedName(LIMIT,[Default]), UsedName(gRange,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(feasibleMates,[Default]), UsedName(CHECK,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(test,[Default]), UsedName(showMappings,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(countMappings,[Default]), UsedName(filterGraph,[Default]), UsedName(prune,[Default]), UsedName(GraphSim,[Default]), UsedName(mappings,[Default]), UsedName(eq,[Default]), UsedName(scalation;graph_db;pattern_matching;GraphSim;init;,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.GraphSim has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(test$default$2,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(feasibleMatesW,[Default]), UsedName(isInstanceOf,[Default]), UsedName(bijections,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(disjoint,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(qRange,[Default]), UsedName(notifyAll,[Default]), UsedName(SELF_LOOPS,[Default]), UsedName(getClass,[Default]), UsedName(LIMIT,[Default]), UsedName(gRange,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(feasibleMates,[Default]), UsedName(CHECK,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(test,[Default]), UsedName(showMappings,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(countMappings,[Default]), UsedName(filterGraph,[Default]), UsedName(prune,[Default]), UsedName(GraphSim,[Default]), UsedName(mappings,[Default]), UsedName(eq,[Default]), UsedName(scalation;graph_db;pattern_matching;GraphSim;init;,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.GraphSim)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graphalytics.DualSimTest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graphalytics.DualSimTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graphalytics.DualSimTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graphalytics.DualSimTest,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(DualSimTest,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graphalytics.DualSimTest has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(DualSimTest,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graphalytics.DualSimTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.dist_db.selectIn...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.dist_db.selectIn)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.dist_db.selectIn)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.dist_db.RelDBMaster: Set(UsedName(isInstanceOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(rName,[Default]), UsedName(==,[Default]), UsedName(apply,[Default]), UsedName(ne,[Default]), UsedName(selectIn,[Default]), UsedName(r,[Default]), UsedName(p,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.dist_db.RelDBWorker: Set(UsedName(isInstanceOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(uc,[Default]), UsedName(rName,[Default]), UsedName(==,[Default]), UsedName(apply,[Default]), UsedName(selectIn,[Default]), UsedName(r,[Default]), UsedName(p,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.dist_db.selectIn,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(copy$default$1,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(canEqual,[Default]), UsedName(productPrefix,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(copy$default$2,[Default]), UsedName(uc,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(rName,[Default]), UsedName(getClass,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(unapply,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(copy$default$4,[Default]), UsedName(apply,[Default]), UsedName(scalation;dist_db;selectIn;init;,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(copy$default$3,[Default]), UsedName(ne,[Default]), UsedName(selectIn,[Default]), UsedName(r,[Default]), UsedName(productIterator,[Default]), UsedName(p,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 3 classes due to The scalation.dist_db.selectIn has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(copy$default$1,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(canEqual,[Default]), UsedName(productPrefix,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(copy$default$2,[Default]), UsedName(uc,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(rName,[Default]), UsedName(getClass,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(unapply,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(copy$default$4,[Default]), UsedName(apply,[Default]), UsedName(scalation;dist_db;selectIn;init;,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(copy$default$3,[Default]), UsedName(ne,[Default]), UsedName(selectIn,[Default]), UsedName(r,[Default]), UsedName(productIterator,[Default]), UsedName(p,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.dist_db.selectIn)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> by member reference: Set(scalation.dist_db.RelDBMaster, scalation.dist_db.RelDBWorker)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.package...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.package)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.package)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.package,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(package,[Default]), UsedName(ne,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.package has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(package,[Default]), UsedName(ne,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.package)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.scala3d.Line3DTest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.scala3d.Line3DTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.scala3d.Line3DTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.scala3d.Line3DTest,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(Line3DTest,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.scala3d.Line3DTest has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(Line3DTest,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.scala3d.Line3DTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.columnar_db.MissingValues...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.columnar_db.MissingValues)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.columnar_db.MissingValues)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.preprocessing.PreProcessingMaster: Set(UsedName(isInstanceOf,[Default]), UsedName(MissingValues,[Default]), UsedName(asInstanceOf,[Default]), UsedName(==,[Default]), UsedName(replaceMissingValues,[Default]), UsedName(replaceMissingStrings,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.columnar_db.MissingValues,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(replaceMissingStrings$default$3,[Default]), UsedName(isInstanceOf,[Default]), UsedName(MissingValues,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(replaceMissingValues$default$5,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(replaceMissingStrings$default$4,[Default]), UsedName(wait,[Default]), UsedName(replaceMissingStrings$default$5,[Default]), UsedName(ne,[Default]), UsedName(replaceMissingValues,[Default]), UsedName(replaceMissingStrings,[Default]), UsedName(replaceMissingValues$default$4,[Default]), UsedName(eq,[Default]))) invalidates 2 classes due to The scalation.columnar_db.MissingValues has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(replaceMissingStrings$default$3,[Default]), UsedName(isInstanceOf,[Default]), UsedName(MissingValues,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(replaceMissingValues$default$5,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(replaceMissingStrings$default$4,[Default]), UsedName(wait,[Default]), UsedName(replaceMissingStrings$default$5,[Default]), UsedName(ne,[Default]), UsedName(replaceMissingValues,[Default]), UsedName(replaceMissingStrings,[Default]), UsedName(replaceMissingValues$default$4,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.columnar_db.MissingValues)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> by member reference: Set(scalation.preprocessing.PreProcessingMaster)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.GraphSimCARTest4...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.GraphSimCARTest4)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.GraphSimCARTest4)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.GraphSimCARTest4,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(GraphSimCARTest4,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.GraphSimCARTest4 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(GraphSimCARTest4,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.GraphSimCARTest4)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.columnar_db.RelationTest9...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.columnar_db.RelationTest9)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.columnar_db.RelationTest9)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.columnar_db.RelationTest9,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(RelationTest9,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.columnar_db.RelationTest9 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(RelationTest9,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.columnar_db.RelationTest9)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.distributed_db.add...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.distributed_db.add)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.distributed_db.add)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.distributed_db.RelationDBMasterTest: Set(UsedName(apply,[Default]), UsedName(add,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.distributed_db.RelationDBMaster: Set(UsedName(t,[Default]), UsedName(isInstanceOf,[Default]), UsedName(name,[Default]), UsedName(asInstanceOf,[Default]), UsedName(==,[Default]), UsedName(apply,[Default]), UsedName(ne,[Default]), UsedName(add,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.distributed_db.add,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(copy$default$1,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(canEqual,[Default]), UsedName(curried,[Default]), UsedName(productPrefix,[Default]), UsedName(tupled,[Default]), UsedName(t,[Default]), UsedName(isInstanceOf,[Default]), UsedName(scalation;distributed_db;add;init;,[Default]), UsedName(finalize,[Default]), UsedName(name,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(copy$default$2,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(unapply,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(apply,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(add,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 3 classes due to The scalation.distributed_db.add has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(copy$default$1,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(canEqual,[Default]), UsedName(curried,[Default]), UsedName(productPrefix,[Default]), UsedName(tupled,[Default]), UsedName(t,[Default]), UsedName(isInstanceOf,[Default]), UsedName(scalation;distributed_db;add;init;,[Default]), UsedName(finalize,[Default]), UsedName(name,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(copy$default$2,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(unapply,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(apply,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(add,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.distributed_db.add)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> by member reference: Set(scalation.distributed_db.RelationDBMasterTest, scalation.distributed_db.RelationDBMaster)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.columnar_db.RelationTest7...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.columnar_db.RelationTest7)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.columnar_db.RelationTest7)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.columnar_db.RelationTest7,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(RelationTest7,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(professor2,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(professor,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.columnar_db.RelationTest7 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(RelationTest7,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(professor2,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(professor,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.columnar_db.RelationTest7)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.graph_algebra.MatchAnswers...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.graph_algebra.MatchAnswers)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.graph_algebra.MatchAnswers)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.graph_algebra.MatchAnswers,ModifiedNames(changes = UsedName(dualSim,[Default]), UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(strictSim,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(shift,[Default]), UsedName(!=,[Default]), UsedName(shiftf,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(graphSim,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(tightSim,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(shift$default$2,[Default]), UsedName(dualIso,[Default]), UsedName(MatchAnswers,[Default]), UsedName(eq,[Default]), UsedName(shiftf$default$2,[Default]))) invalidates 1 classes due to The scalation.graph_db.graph_algebra.MatchAnswers has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(dualSim,[Default]), UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(strictSim,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(shift,[Default]), UsedName(!=,[Default]), UsedName(shiftf,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(graphSim,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(tightSim,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(shift$default$2,[Default]), UsedName(dualIso,[Default]), UsedName(MatchAnswers,[Default]), UsedName(eq,[Default]), UsedName(shiftf$default$2,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.graph_algebra.MatchAnswers)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.dist_db.project...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.dist_db.project)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.dist_db.project)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.dist_db.RelDBMaster: Set(UsedName(cNames,[Default]), UsedName(isInstanceOf,[Default]), UsedName(name,[Default]), UsedName(asInstanceOf,[Default]), UsedName(rName,[Default]), UsedName(==,[Default]), UsedName(apply,[Default]), UsedName(ne,[Default]), UsedName(project,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.dist_db.project,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(copy$default$1,[Default]), UsedName(hashCode,[Default]), UsedName(cNames,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(canEqual,[Default]), UsedName(curried,[Default]), UsedName(productPrefix,[Default]), UsedName(tupled,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(name,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(scalation;dist_db;project;init;,[Default]), UsedName(copy$default$2,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(rName,[Default]), UsedName(getClass,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(unapply,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(apply,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(copy$default$3,[Default]), UsedName(ne,[Default]), UsedName(project,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 2 classes due to The scalation.dist_db.project has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(copy$default$1,[Default]), UsedName(hashCode,[Default]), UsedName(cNames,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(canEqual,[Default]), UsedName(curried,[Default]), UsedName(productPrefix,[Default]), UsedName(tupled,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(name,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(scalation;dist_db;project;init;,[Default]), UsedName(copy$default$2,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(rName,[Default]), UsedName(getClass,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(unapply,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(apply,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(copy$default$3,[Default]), UsedName(ne,[Default]), UsedName(project,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.dist_db.project)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> by member reference: Set(scalation.dist_db.RelDBMaster)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graphalytics.StrictSimTest2...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graphalytics.StrictSimTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graphalytics.StrictSimTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graphalytics.StrictSimTest2,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(StrictSimTest2,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graphalytics.StrictSimTest2 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(StrictSimTest2,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graphalytics.StrictSimTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.DualSim2...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.DualSim2)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.DualSim2)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.DualSim2,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(test$default$2,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(feasibleMatesW,[Default]), UsedName(isInstanceOf,[Default]), UsedName(bijections,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(disjoint,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(qRange,[Default]), UsedName(notifyAll,[Default]), UsedName(SELF_LOOPS,[Default]), UsedName(getClass,[Default]), UsedName(LIMIT,[Default]), UsedName(gRange,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(feasibleMates,[Default]), UsedName(CHECK,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(test,[Default]), UsedName(showMappings,[Default]), UsedName(wait,[Default]), UsedName(DualSim2,[Default]), UsedName(ne,[Default]), UsedName(countMappings,[Default]), UsedName(filterGraph,[Default]), UsedName(prune,[Default]), UsedName(scalation;graph_db;pattern_matching;DualSim2;init;,[Default]), UsedName(mappings,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.DualSim2 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(test$default$2,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(feasibleMatesW,[Default]), UsedName(isInstanceOf,[Default]), UsedName(bijections,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(disjoint,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(qRange,[Default]), UsedName(notifyAll,[Default]), UsedName(SELF_LOOPS,[Default]), UsedName(getClass,[Default]), UsedName(LIMIT,[Default]), UsedName(gRange,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(feasibleMates,[Default]), UsedName(CHECK,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(test,[Default]), UsedName(showMappings,[Default]), UsedName(wait,[Default]), UsedName(DualSim2,[Default]), UsedName(ne,[Default]), UsedName(countMappings,[Default]), UsedName(filterGraph,[Default]), UsedName(prune,[Default]), UsedName(scalation;graph_db;pattern_matching;DualSim2;init;,[Default]), UsedName(mappings,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.DualSim2)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.MGraphSim2WTest5...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.MGraphSim2WTest5)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.MGraphSim2WTest5)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.MGraphSim2WTest5,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(MGraphSim2WTest5,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.MGraphSim2WTest5 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(MGraphSim2WTest5,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.MGraphSim2WTest5)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.test.StrictPattern_DTest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.test.StrictPattern_DTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.test.StrictPattern_DTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.test.StrictPattern_DTest,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(q2,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(StrictPattern_DTest,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(q3,[Default]), UsedName(synchronized,[Default]), UsedName(g2,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(g3,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.test.StrictPattern_DTest has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(q2,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(StrictPattern_DTest,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(q3,[Default]), UsedName(synchronized,[Default]), UsedName(g2,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(g3,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.test.StrictPattern_DTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.MGraphSim2XTest4...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.MGraphSim2XTest4)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.MGraphSim2XTest4)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.MGraphSim2XTest4,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(MGraphSim2XTest4,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.MGraphSim2XTest4 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(MGraphSim2XTest4,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.MGraphSim2XTest4)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.GraphSim2Test...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.GraphSim2Test)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.GraphSim2Test)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.GraphSim2Test,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(GraphSim2Test,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.GraphSim2Test has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(GraphSim2Test,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.GraphSim2Test)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.distributed_db.materializeIn...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.distributed_db.materializeIn)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.distributed_db.materializeIn)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.distributed_db.RelationDBMaster: Set(UsedName(isInstanceOf,[Default]), UsedName(name,[Default]), UsedName(asInstanceOf,[Default]), UsedName(==,[Default]), UsedName(apply,[Default]), UsedName(materializeIn,[Default]), UsedName(ne,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.distributed_db.RelationDBWorker: Set(UsedName(isInstanceOf,[Default]), UsedName(name,[Default]), UsedName(asInstanceOf,[Default]), UsedName(==,[Default]), UsedName(apply,[Default]), UsedName(materializeIn,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.distributed_db.materializeIn,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(copy$default$1,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(scalation;distributed_db;materializeIn;init;,[Default]), UsedName(clone,[Default]), UsedName(canEqual,[Default]), UsedName(productPrefix,[Default]), UsedName(compose,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(name,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(andThen,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(unapply,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(apply,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(materializeIn,[Default]), UsedName(ne,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 3 classes due to The scalation.distributed_db.materializeIn has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(copy$default$1,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(scalation;distributed_db;materializeIn;init;,[Default]), UsedName(clone,[Default]), UsedName(canEqual,[Default]), UsedName(productPrefix,[Default]), UsedName(compose,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(name,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(andThen,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(unapply,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(apply,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(materializeIn,[Default]), UsedName(ne,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.distributed_db.materializeIn)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> by member reference: Set(scalation.distributed_db.RelationDBMaster, scalation.distributed_db.RelationDBWorker)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.GraphGenTest2...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.GraphGenTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.GraphGenTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.GraphGenTest2,ModifiedNames(changes = UsedName(GraphGenTest2,[Default]), UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(gGen,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(g1,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.GraphGenTest2 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(GraphGenTest2,[Default]), UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(gGen,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(g1,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.GraphGenTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.image.ChessTrackerTest2...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.image.ChessTrackerTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.image.ChessTrackerTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.image.ChessTrackerTest2,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(dq,[Default]), UsedName(tr_q,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(er,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(w,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(dr,[Default]), UsedName(ChessTrackerTest2,[Default]), UsedName(synchronized,[Default]), UsedName(u,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(tr_r,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.image.ChessTrackerTest2 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(dq,[Default]), UsedName(tr_q,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(er,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(w,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(dr,[Default]), UsedName(ChessTrackerTest2,[Default]), UsedName(synchronized,[Default]), UsedName(u,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(tr_r,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.image.ChessTrackerTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graphalytics.StrictSim2...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graphalytics.StrictSim2)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graphalytics.StrictSim2)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graphalytics.StrictSim2,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(test$default$2,[Default]), UsedName(calculateTotalEdges,[Default]), UsedName(overlaps,[Default]), UsedName(hashCode,[Default]), UsedName(scalation;graphalytics;StrictSim2;init;,[Default]), UsedName(selectivityCriteria,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(calculateBallDiameterMetrics,[Default]), UsedName(isInstanceOf,[Default]), UsedName(bijections,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(disjoint,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(qRange,[Default]), UsedName(notifyAll,[Default]), UsedName(SELF_LOOPS,[Default]), UsedName(getClass,[Default]), UsedName(LIMIT,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(feasibleMates,[Default]), UsedName(calculateTotalVertices,[Default]), UsedName(CHECK,[Default]), UsedName(mappings2,[Default]), UsedName(StrictSim2,[Default]), UsedName(synchronized,[Default]), UsedName(dualFilter,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(test,[Default]), UsedName(showMappings,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(filterGraph,[Default]), UsedName(prune,[Default]), UsedName(mappings,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.graphalytics.StrictSim2 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(test$default$2,[Default]), UsedName(calculateTotalEdges,[Default]), UsedName(overlaps,[Default]), UsedName(hashCode,[Default]), UsedName(scalation;graphalytics;StrictSim2;init;,[Default]), UsedName(selectivityCriteria,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(calculateBallDiameterMetrics,[Default]), UsedName(isInstanceOf,[Default]), UsedName(bijections,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(disjoint,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(qRange,[Default]), UsedName(notifyAll,[Default]), UsedName(SELF_LOOPS,[Default]), UsedName(getClass,[Default]), UsedName(LIMIT,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(feasibleMates,[Default]), UsedName(calculateTotalVertices,[Default]), UsedName(CHECK,[Default]), UsedName(mappings2,[Default]), UsedName(StrictSim2,[Default]), UsedName(synchronized,[Default]), UsedName(dualFilter,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(test,[Default]), UsedName(showMappings,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(filterGraph,[Default]), UsedName(prune,[Default]), UsedName(mappings,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graphalytics.StrictSim2)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.distributed_db.minus...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.distributed_db.minus)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.distributed_db.minus)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.distributed_db.RelationDBMaster: Set(UsedName(isInstanceOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(==,[Default]), UsedName(apply,[Default]), UsedName(minus,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(r,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.distributed_db.minus,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(copy$default$1,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(canEqual,[Default]), UsedName(curried,[Default]), UsedName(productPrefix,[Default]), UsedName(tupled,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(copy$default$2,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(unapply,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(scalation;distributed_db;minus;init;,[Default]), UsedName(apply,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(minus,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(r,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 2 classes due to The scalation.distributed_db.minus has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(copy$default$1,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(canEqual,[Default]), UsedName(curried,[Default]), UsedName(productPrefix,[Default]), UsedName(tupled,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(copy$default$2,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(unapply,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(scalation;distributed_db;minus;init;,[Default]), UsedName(apply,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(minus,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(r,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.distributed_db.minus)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> by member reference: Set(scalation.distributed_db.RelationDBMaster)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.graph_algebra.MuGraphSim...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.graph_algebra.MuGraphSim)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.graph_algebra.MuGraphSim)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.graph_algebra.MuGraphSim,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(test$default$2,[Default]), UsedName(hashCode,[Default]), UsedName(scalation;graph_db;graph_algebra;MuGraphSim;init;,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(feasibleMatesW,[Default]), UsedName(isInstanceOf,[Default]), UsedName(bijections,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(disjoint,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(qRange,[Default]), UsedName(notifyAll,[Default]), UsedName(SELF_LOOPS,[Default]), UsedName(getClass,[Default]), UsedName(LIMIT,[Default]), UsedName(gRange,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(feasibleMates,[Default]), UsedName(CHECK,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(MuGraphSim,[Default]), UsedName(##,[Default]), UsedName(test,[Default]), UsedName(showMappings,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(countMappings,[Default]), UsedName(filterGraph,[Default]), UsedName(prune,[Default]), UsedName(mappings,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.graph_db.graph_algebra.MuGraphSim has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(test$default$2,[Default]), UsedName(hashCode,[Default]), UsedName(scalation;graph_db;graph_algebra;MuGraphSim;init;,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(feasibleMatesW,[Default]), UsedName(isInstanceOf,[Default]), UsedName(bijections,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(disjoint,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(qRange,[Default]), UsedName(notifyAll,[Default]), UsedName(SELF_LOOPS,[Default]), UsedName(getClass,[Default]), UsedName(LIMIT,[Default]), UsedName(gRange,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(feasibleMates,[Default]), UsedName(CHECK,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(MuGraphSim,[Default]), UsedName(##,[Default]), UsedName(test,[Default]), UsedName(showMappings,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(countMappings,[Default]), UsedName(filterGraph,[Default]), UsedName(prune,[Default]), UsedName(mappings,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.graph_algebra.MuGraphSim)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graphalytics.DualSim2CAR...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graphalytics.DualSim2CAR)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graphalytics.DualSim2CAR)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graphalytics.DualSim2CAR,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(DualSim2CAR,[Default]), UsedName(test$default$2,[Default]), UsedName(overlaps,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(isInstanceOf,[Default]), UsedName(bijections,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(disjoint,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(qRange,[Default]), UsedName(notifyAll,[Default]), UsedName(SELF_LOOPS,[Default]), UsedName(getClass,[Default]), UsedName(LIMIT,[Default]), UsedName(scalation;graphalytics;DualSim2CAR;init;,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(feasibleMates,[Default]), UsedName(CHECK,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(test,[Default]), UsedName(showMappings,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(feasibleMatesWithSets,[Default]), UsedName(prune,[Default]), UsedName(mappings,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.graphalytics.DualSim2CAR has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(DualSim2CAR,[Default]), UsedName(test$default$2,[Default]), UsedName(overlaps,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(isInstanceOf,[Default]), UsedName(bijections,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(disjoint,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(qRange,[Default]), UsedName(notifyAll,[Default]), UsedName(SELF_LOOPS,[Default]), UsedName(getClass,[Default]), UsedName(LIMIT,[Default]), UsedName(scalation;graphalytics;DualSim2CAR;init;,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(feasibleMates,[Default]), UsedName(CHECK,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(test,[Default]), UsedName(showMappings,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(feasibleMatesWithSets,[Default]), UsedName(prune,[Default]), UsedName(mappings,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graphalytics.DualSim2CAR)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graphalytics.APShortestPathTest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graphalytics.APShortestPathTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graphalytics.APShortestPathTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graphalytics.APShortestPathTest,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(dia,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(d2,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(sp3,[Default]), UsedName(APShortestPathTest,[Default]), UsedName(toString,[Default]), UsedName(d,[Default]), UsedName(##,[Default]), UsedName(sp2,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(sp,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graphalytics.APShortestPathTest has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(dia,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(d2,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(sp3,[Default]), UsedName(APShortestPathTest,[Default]), UsedName(toString,[Default]), UsedName(d,[Default]), UsedName(##,[Default]), UsedName(sp2,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(sp,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graphalytics.APShortestPathTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.MDualSim...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.MDualSim)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.MDualSim)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.MDualSim,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(test$default$2,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(feasibleMatesW,[Default]), UsedName(isInstanceOf,[Default]), UsedName(bijections,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(disjoint,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(qRange,[Default]), UsedName(notifyAll,[Default]), UsedName(SELF_LOOPS,[Default]), UsedName(getClass,[Default]), UsedName(LIMIT,[Default]), UsedName(gRange,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(feasibleMates,[Default]), UsedName(CHECK,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(test,[Default]), UsedName(showMappings,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(countMappings,[Default]), UsedName(filterGraph,[Default]), UsedName(prune,[Default]), UsedName(MDualSim,[Default]), UsedName(scalation;graph_db;pattern_matching;MDualSim;init;,[Default]), UsedName(mappings,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.MDualSim has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(test$default$2,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(feasibleMatesW,[Default]), UsedName(isInstanceOf,[Default]), UsedName(bijections,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(disjoint,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(qRange,[Default]), UsedName(notifyAll,[Default]), UsedName(SELF_LOOPS,[Default]), UsedName(getClass,[Default]), UsedName(LIMIT,[Default]), UsedName(gRange,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(feasibleMates,[Default]), UsedName(CHECK,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(test,[Default]), UsedName(showMappings,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(countMappings,[Default]), UsedName(filterGraph,[Default]), UsedName(prune,[Default]), UsedName(MDualSim,[Default]), UsedName(scalation;graph_db;pattern_matching;MDualSim;init;,[Default]), UsedName(mappings,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.MDualSim)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.MStrictSimTest3...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.MStrictSimTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.MStrictSimTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.MStrictSimTest3,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(MStrictSimTest3,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.MStrictSimTest3 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(MStrictSimTest3,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.MStrictSimTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graphalytics.TopSort...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graphalytics.TopSort)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graphalytics.TopSort)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graphalytics.TopSort,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(TopSort,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(topSort,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.graphalytics.TopSort has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(TopSort,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(topSort,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graphalytics.TopSort)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.MDualSimCARTest3...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.MDualSimCARTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.MDualSimCARTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.MDualSimCARTest3,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(MDualSimCARTest3,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.MDualSimCARTest3 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(MDualSimCARTest3,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.MDualSimCARTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.spatial.LatitudeLongitudeTest2...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.spatial.LatitudeLongitudeTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.spatial.LatitudeLongitudeTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.spatial.LatitudeLongitudeTest2,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(LatitudeLongitudeTest2,[Default]), UsedName(atlanta,[Default]), UsedName(athens,[Default]), UsedName(main,[Default]), UsedName(atlanta_El,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(d,[Default]), UsedName(##,[Default]), UsedName(athens_El,[Default]), UsedName(el,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.spatial.LatitudeLongitudeTest2 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(LatitudeLongitudeTest2,[Default]), UsedName(atlanta,[Default]), UsedName(athens,[Default]), UsedName(main,[Default]), UsedName(atlanta_El,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(d,[Default]), UsedName(##,[Default]), UsedName(athens_El,[Default]), UsedName(el,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.spatial.LatitudeLongitudeTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.graph_algebra.RandomGraph...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.graph_algebra.RandomGraph)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.graph_algebra.RandomGraph)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.graph_algebra.RandomGraph,ModifiedNames(changes = UsedName(createNeo,[Default]), UsedName(le,[Default]), UsedName(equals,[Default]), UsedName(schema,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(pickELabels,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(gen,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(assignElabels,[Default]), UsedName(genVLabels,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(scalation;graph_db;graph_algebra;RandomGraph;init;,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(assignSchema,[Default]), UsedName(genElabels,[Default]), UsedName(lv,[Default]), UsedName(eLabels,[Default]), UsedName(RandomGraph,[Default]), UsedName(assignVLabels,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.graph_db.graph_algebra.RandomGraph has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(createNeo,[Default]), UsedName(le,[Default]), UsedName(equals,[Default]), UsedName(schema,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(pickELabels,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(gen,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(assignElabels,[Default]), UsedName(genVLabels,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(scalation;graph_db;graph_algebra;RandomGraph;init;,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(assignSchema,[Default]), UsedName(genElabels,[Default]), UsedName(lv,[Default]), UsedName(eLabels,[Default]), UsedName(RandomGraph,[Default]), UsedName(assignVLabels,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.graph_algebra.RandomGraph)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.columnar_db.RelationTest2...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.columnar_db.RelationTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.columnar_db.RelationTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.columnar_db.RelationTest2,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(weekend,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(RelationTest2,[Default]), UsedName(week,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(weekdays,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.columnar_db.RelationTest2 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(weekend,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(RelationTest2,[Default]), UsedName(week,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(weekdays,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.columnar_db.RelationTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.graph_algebra.MuDualIsoTest2...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.graph_algebra.MuDualIsoTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.graph_algebra.MuDualIsoTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.graph_algebra.MuDualIsoTest2,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(MuDualIsoTest2,[Default]), UsedName(matcher,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(psi,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.graph_algebra.MuDualIsoTest2 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(MuDualIsoTest2,[Default]), UsedName(matcher,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(psi,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.graph_algebra.MuDualIsoTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.GraphSimCARTest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.GraphSimCARTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.GraphSimCARTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.GraphSimCARTest,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(GraphSimCARTest,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.GraphSimCARTest has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(GraphSimCARTest,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.GraphSimCARTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.graph_algebra.MuDualIsoTest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.graph_algebra.MuDualIsoTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.graph_algebra.MuDualIsoTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.graph_algebra.MuDualIsoTest,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(matcher,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(MuDualIsoTest,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(psi,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.graph_algebra.MuDualIsoTest has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(matcher,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(MuDualIsoTest,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(psi,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.graph_algebra.MuDualIsoTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graphalytics.DualIsoTest2...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graphalytics.DualIsoTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graphalytics.DualIsoTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graphalytics.DualIsoTest2,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(matcher,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(DualIsoTest2,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(psi,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graphalytics.DualIsoTest2 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(matcher,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(DualIsoTest2,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(psi,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graphalytics.DualIsoTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.MGraphSim2WTest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.MGraphSim2WTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.MGraphSim2WTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.MGraphSim2WTest,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(MGraphSim2WTest,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.MGraphSim2WTest has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(MGraphSim2WTest,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.MGraphSim2WTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.scala3d.RotateOrder...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.scala3d.RotateOrder)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.scala3d.RotateOrder)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.scala3d.RotateOrder,ModifiedNames(changes = UsedName(YXZ,[Default]), UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(readResolve,[Default]), UsedName(isInstanceOf,[Default]), UsedName(RotateOrder,[Default]), UsedName(XZY,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(ZXY,[Default]), UsedName(ZYX,[Default]), UsedName(ValueSet,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(apply,[Default]), UsedName(nextName,[Default]), UsedName(nextId,[Default]), UsedName(synchronized,[Default]), UsedName(XYZ,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(ValueOrdering,[Default]), UsedName(wait,[Default]), UsedName(Value,[Default]), UsedName(YZX,[Default]), UsedName(ne,[Default]), UsedName(maxId,[Default]), UsedName(Val,[Default]), UsedName(values,[Default]), UsedName(withName,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.scala3d.RotateOrder has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(YXZ,[Default]), UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(readResolve,[Default]), UsedName(isInstanceOf,[Default]), UsedName(RotateOrder,[Default]), UsedName(XZY,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(ZXY,[Default]), UsedName(ZYX,[Default]), UsedName(ValueSet,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(apply,[Default]), UsedName(nextName,[Default]), UsedName(nextId,[Default]), UsedName(synchronized,[Default]), UsedName(XYZ,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(ValueOrdering,[Default]), UsedName(wait,[Default]), UsedName(Value,[Default]), UsedName(YZX,[Default]), UsedName(ne,[Default]), UsedName(maxId,[Default]), UsedName(Val,[Default]), UsedName(values,[Default]), UsedName(withName,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.scala3d.RotateOrder)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.dist_db.create...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.dist_db.create)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.dist_db.create)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.dist_db.RelDBMasterTest5: Set(UsedName(create,[Default]), UsedName(apply,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.dist_db.RelDBMaster: Set(UsedName(isInstanceOf,[Default]), UsedName(create,[Default]), UsedName(name,[Default]), UsedName(asInstanceOf,[Default]), UsedName(colname,[Default]), UsedName(key,[Default]), UsedName(domain,[Default]), UsedName(==,[Default]), UsedName(apply,[Default]), UsedName(ne,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.dist_db.RelDBMasterTest4: Set(UsedName(create,[Default]), UsedName(apply,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.dist_db.RelDBMasterTest: Set(UsedName(create,[Default]), UsedName(apply,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.dist_db.create,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(copy$default$1,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(canEqual,[Default]), UsedName(curried,[Default]), UsedName(productPrefix,[Default]), UsedName(tupled,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(create,[Default]), UsedName(name,[Default]), UsedName(asInstanceOf,[Default]), UsedName(colname,[Default]), UsedName($asInstanceOf,[Default]), UsedName(key,[Default]), UsedName(copy$default$2,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(domain,[Default]), UsedName(getClass,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(unapply,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(copy$default$4,[Default]), UsedName(apply,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(copy$default$3,[Default]), UsedName(ne,[Default]), UsedName(productIterator,[Default]), UsedName(scalation;dist_db;create;init;,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 5 classes due to The scalation.dist_db.create has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(copy$default$1,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(canEqual,[Default]), UsedName(curried,[Default]), UsedName(productPrefix,[Default]), UsedName(tupled,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(create,[Default]), UsedName(name,[Default]), UsedName(asInstanceOf,[Default]), UsedName(colname,[Default]), UsedName($asInstanceOf,[Default]), UsedName(key,[Default]), UsedName(copy$default$2,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(domain,[Default]), UsedName(getClass,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(unapply,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(copy$default$4,[Default]), UsedName(apply,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(copy$default$3,[Default]), UsedName(ne,[Default]), UsedName(productIterator,[Default]), UsedName(scalation;dist_db;create;init;,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.dist_db.create)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> by member reference: Set(scalation.dist_db.RelDBMasterTest5, scalation.dist_db.RelDBMaster, scalation.dist_db.RelDBMasterTest4, scalation.dist_db.RelDBMasterTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.MDualSim2XTest3...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.MDualSim2XTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.MDualSim2XTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.MDualSim2XTest3,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(MDualSim2XTest3,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.MDualSim2XTest3 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(MDualSim2XTest3,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.MDualSim2XTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.graph_algebra.MuDualSimTest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.graph_algebra.MuDualSimTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.graph_algebra.MuDualSimTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.graph_algebra.MuDualSimTest,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(matcher,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(MuDualSimTest,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.graph_algebra.MuDualSimTest has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(matcher,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(MuDualSimTest,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.graph_algebra.MuDualSimTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.dist_db.unionIn...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.dist_db.unionIn)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.dist_db.unionIn)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.dist_db.unionIn,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(copy$default$1,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(canEqual,[Default]), UsedName(curried,[Default]), UsedName(productPrefix,[Default]), UsedName(tupled,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(unionIn,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(copy$default$2,[Default]), UsedName(uc,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(productArity,[Default]), UsedName(scalation;dist_db;unionIn;init;,[Default]), UsedName(copy,[Default]), UsedName(unapply,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(apply,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(copy$default$3,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(r,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.dist_db.unionIn has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(copy$default$1,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(canEqual,[Default]), UsedName(curried,[Default]), UsedName(productPrefix,[Default]), UsedName(tupled,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(unionIn,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(copy$default$2,[Default]), UsedName(uc,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(productArity,[Default]), UsedName(scalation;dist_db;unionIn;init;,[Default]), UsedName(copy,[Default]), UsedName(unapply,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(apply,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(copy$default$3,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(r,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.dist_db.unionIn)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graphalytics.GraphGenTest2...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graphalytics.GraphGenTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graphalytics.GraphGenTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graphalytics.GraphGenTest2,ModifiedNames(changes = UsedName(GraphGenTest2,[Default]), UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(g2,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName(g3,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graphalytics.GraphGenTest2 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(GraphGenTest2,[Default]), UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(g2,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName(g3,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graphalytics.GraphGenTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.MDualSimTest5...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.MDualSimTest5)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.MDualSimTest5)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.MDualSimTest5,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(MDualSimTest5,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.MDualSimTest5 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(MDualSimTest5,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.MDualSimTest5)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.MGraphSim2WTest6...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.MGraphSim2WTest6)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.MGraphSim2WTest6)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.MGraphSim2WTest6,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(MGraphSim2WTest6,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.MGraphSim2WTest6 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(MGraphSim2WTest6,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.MGraphSim2WTest6)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.MDualSim2...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.MDualSim2)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.MDualSim2)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.MDualSim2,ModifiedNames(changes = UsedName(scalation;graph_db;pattern_matching;MDualSim2;init;,[Default]), UsedName(equals,[Default]), UsedName(test$default$2,[Default]), UsedName(hashCode,[Default]), UsedName(MDualSim2,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(feasibleMatesW,[Default]), UsedName(isInstanceOf,[Default]), UsedName(bijections,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(disjoint,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(qRange,[Default]), UsedName(notifyAll,[Default]), UsedName(SELF_LOOPS,[Default]), UsedName(getClass,[Default]), UsedName(LIMIT,[Default]), UsedName(gRange,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(feasibleMates,[Default]), UsedName(CHECK,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(test,[Default]), UsedName(showMappings,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(countMappings,[Default]), UsedName(filterGraph,[Default]), UsedName(prune,[Default]), UsedName(mappings,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.MDualSim2 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(scalation;graph_db;pattern_matching;MDualSim2;init;,[Default]), UsedName(equals,[Default]), UsedName(test$default$2,[Default]), UsedName(hashCode,[Default]), UsedName(MDualSim2,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(feasibleMatesW,[Default]), UsedName(isInstanceOf,[Default]), UsedName(bijections,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(disjoint,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(qRange,[Default]), UsedName(notifyAll,[Default]), UsedName(SELF_LOOPS,[Default]), UsedName(getClass,[Default]), UsedName(LIMIT,[Default]), UsedName(gRange,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(feasibleMates,[Default]), UsedName(CHECK,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(test,[Default]), UsedName(showMappings,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(countMappings,[Default]), UsedName(filterGraph,[Default]), UsedName(prune,[Default]), UsedName(mappings,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.MDualSim2)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.TightSimTest4...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.TightSimTest4)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.TightSimTest4)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.TightSimTest4,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(TightSimTest4,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.TightSimTest4 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(TightSimTest4,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.TightSimTest4)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graphalytics.GraphDFSTest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graphalytics.GraphDFSTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graphalytics.GraphDFSTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graphalytics.GraphDFSTest,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(GraphDFSTest,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(test,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graphalytics.GraphDFSTest has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(GraphDFSTest,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(test,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graphalytics.GraphDFSTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.GraphGenTest4...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.GraphGenTest4)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.GraphGenTest4)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.GraphGenTest4,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(gGen,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(g2,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(GraphGenTest4,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName(g3,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.GraphGenTest4 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(gGen,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(g2,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(GraphGenTest4,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName(g3,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.GraphGenTest4)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.GraphSimCARTest2...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.GraphSimCARTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.GraphSimCARTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.GraphSimCARTest2,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(GraphSimCARTest2,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.GraphSimCARTest2 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(GraphSimCARTest2,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.GraphSimCARTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.columnar_db.RelationSQLTest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.columnar_db.RelationSQLTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.columnar_db.RelationSQLTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.columnar_db.RelationSQLTest,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(RelationSQLTest,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(professor2,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(professor,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.columnar_db.RelationSQLTest has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(RelationSQLTest,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(professor2,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(professor,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.columnar_db.RelationSQLTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.MTightSim...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.MTightSim)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.MTightSim)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.MTightSim,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(test$default$2,[Default]), UsedName(hashCode,[Default]), UsedName(selectivityCriteria,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(feasibleMatesW,[Default]), UsedName(isInstanceOf,[Default]), UsedName(bijections,[Default]), UsedName(finalize,[Default]), UsedName(scalation;graph_db;pattern_matching;MTightSim;init;,[Default]), UsedName(asInstanceOf,[Default]), UsedName(disjoint,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(qRange,[Default]), UsedName(notifyAll,[Default]), UsedName(SELF_LOOPS,[Default]), UsedName(getClass,[Default]), UsedName(LIMIT,[Default]), UsedName(MTightSim,[Default]), UsedName(gRange,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(feasibleMates,[Default]), UsedName(refine,[Default]), UsedName(CHECK,[Default]), UsedName(mappings2,[Default]), UsedName(synchronized,[Default]), UsedName(dualFilter,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(test,[Default]), UsedName(showMappings,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(countMappings,[Default]), UsedName(filterGraph,[Default]), UsedName(prune,[Default]), UsedName(mappings,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.MTightSim has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(test$default$2,[Default]), UsedName(hashCode,[Default]), UsedName(selectivityCriteria,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(feasibleMatesW,[Default]), UsedName(isInstanceOf,[Default]), UsedName(bijections,[Default]), UsedName(finalize,[Default]), UsedName(scalation;graph_db;pattern_matching;MTightSim;init;,[Default]), UsedName(asInstanceOf,[Default]), UsedName(disjoint,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(qRange,[Default]), UsedName(notifyAll,[Default]), UsedName(SELF_LOOPS,[Default]), UsedName(getClass,[Default]), UsedName(LIMIT,[Default]), UsedName(MTightSim,[Default]), UsedName(gRange,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(feasibleMates,[Default]), UsedName(refine,[Default]), UsedName(CHECK,[Default]), UsedName(mappings2,[Default]), UsedName(synchronized,[Default]), UsedName(dualFilter,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(test,[Default]), UsedName(showMappings,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(countMappings,[Default]), UsedName(filterGraph,[Default]), UsedName(prune,[Default]), UsedName(mappings,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.MTightSim)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graphalytics.ColorDAG.Edge...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graphalytics.ColorDAG.Edge)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graphalytics.ColorDAG.Edge)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graphalytics.ColorDAG.Edge,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName(Edge,[Default]), UsedName(toNode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(fromNode,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(color,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(scalation;graphalytics;ColorDAG;Edge;init;,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.graphalytics.ColorDAG.Edge has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName(Edge,[Default]), UsedName(toNode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(fromNode,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(color,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(scalation;graphalytics;ColorDAG;Edge;init;,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graphalytics.ColorDAG.Edge)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.DualSimTest4...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.DualSimTest4)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.DualSimTest4)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.DualSimTest4,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(DualSimTest4,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.DualSimTest4 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(DualSimTest4,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.DualSimTest4)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.dist_db.show...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.dist_db.show)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.dist_db.show)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.dist_db.RelDBMaster: Set(UsedName(show,[Default]), UsedName(isInstanceOf,[Default]), UsedName(name,[Default]), UsedName(asInstanceOf,[Default]), UsedName(==,[Default]), UsedName(apply,[Default]), UsedName(ne,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.dist_db.RelDBMasterTest5: Set(UsedName(show,[Default]), UsedName(apply,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.dist_db.RelDBMasterTest4: Set(UsedName(show,[Default]), UsedName(apply,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.dist_db.RelDBMasterTest: Set(UsedName(show,[Default]), UsedName(apply,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.dist_db.show,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(copy$default$1,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(canEqual,[Default]), UsedName(show,[Default]), UsedName(productPrefix,[Default]), UsedName(compose,[Default]), UsedName(isInstanceOf,[Default]), UsedName(scalation;dist_db;show;init;,[Default]), UsedName(finalize,[Default]), UsedName(name,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(andThen,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(unapply,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(apply,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 5 classes due to The scalation.dist_db.show has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(copy$default$1,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(canEqual,[Default]), UsedName(show,[Default]), UsedName(productPrefix,[Default]), UsedName(compose,[Default]), UsedName(isInstanceOf,[Default]), UsedName(scalation;dist_db;show;init;,[Default]), UsedName(finalize,[Default]), UsedName(name,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(andThen,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(unapply,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(apply,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.dist_db.show)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> by member reference: Set(scalation.dist_db.RelDBMaster, scalation.dist_db.RelDBMasterTest5, scalation.dist_db.RelDBMasterTest4, scalation.dist_db.RelDBMasterTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.columnar_db.RelationTest3...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.columnar_db.RelationTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.columnar_db.RelationTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.columnar_db.RelationTest3,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(costVprice,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(RelationTest3,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.columnar_db.RelationTest3 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(costVprice,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(RelationTest3,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.columnar_db.RelationTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graphalytics.TreeLayout...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graphalytics.TreeLayout)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graphalytics.TreeLayout)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graphalytics.TreeLayout,ModifiedNames(changes = UsedName(apportion,[Default]), UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(firstWalk,[Default]), UsedName(isInstanceOf,[Default]), UsedName(leftmostSibling,[Default]), UsedName(finalize,[Default]), UsedName(secondWalk,[Default]), UsedName(scalation;graphalytics;TreeLayout;init;,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(nextRight,[Default]), UsedName(!=,[Default]), UsedName(ancestor,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(executeShifts,[Default]), UsedName(TreeLayout,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(moveSubtree,[Default]), UsedName(nextLeft,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(layout,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.graphalytics.TreeLayout has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(apportion,[Default]), UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(firstWalk,[Default]), UsedName(isInstanceOf,[Default]), UsedName(leftmostSibling,[Default]), UsedName(finalize,[Default]), UsedName(secondWalk,[Default]), UsedName(scalation;graphalytics;TreeLayout;init;,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(nextRight,[Default]), UsedName(!=,[Default]), UsedName(ancestor,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(executeShifts,[Default]), UsedName(TreeLayout,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(moveSubtree,[Default]), UsedName(nextLeft,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(layout,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graphalytics.TreeLayout)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.MGraphGenTest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.MGraphGenTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.MGraphGenTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.MGraphGenTest,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(gGen,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(g1,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(MGraphGenTest,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.MGraphGenTest has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(gGen,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(g1,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(MGraphGenTest,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.MGraphGenTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.distributed_db.addIn...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.distributed_db.addIn)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.distributed_db.addIn)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.distributed_db.RelationDBMaster: Set(UsedName(t,[Default]), UsedName(isInstanceOf,[Default]), UsedName(name,[Default]), UsedName(asInstanceOf,[Default]), UsedName(==,[Default]), UsedName(apply,[Default]), UsedName(addIn,[Default]), UsedName(ne,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.distributed_db.RelationDBWorker: Set(UsedName(t,[Default]), UsedName(isInstanceOf,[Default]), UsedName(name,[Default]), UsedName(asInstanceOf,[Default]), UsedName(==,[Default]), UsedName(apply,[Default]), UsedName(addIn,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.distributed_db.addIn,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(copy$default$1,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(canEqual,[Default]), UsedName(curried,[Default]), UsedName(productPrefix,[Default]), UsedName(tupled,[Default]), UsedName(t,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(name,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(copy$default$2,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(unapply,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(apply,[Default]), UsedName(addIn,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(scalation;distributed_db;addIn;init;,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 3 classes due to The scalation.distributed_db.addIn has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(copy$default$1,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(canEqual,[Default]), UsedName(curried,[Default]), UsedName(productPrefix,[Default]), UsedName(tupled,[Default]), UsedName(t,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(name,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(copy$default$2,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(unapply,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(apply,[Default]), UsedName(addIn,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(scalation;distributed_db;addIn;init;,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.distributed_db.addIn)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> by member reference: Set(scalation.distributed_db.RelationDBMaster, scalation.distributed_db.RelationDBWorker)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.columnar_db.MM_RelationTest3...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.columnar_db.MM_RelationTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.columnar_db.MM_RelationTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.columnar_db.MM_RelationTest3,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(costVprice,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(MM_RelationTest3,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.columnar_db.MM_RelationTest3 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(costVprice,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(MM_RelationTest3,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.columnar_db.MM_RelationTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.columnar_db.QuantileOutlier...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.columnar_db.QuantileOutlier)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.columnar_db.QuantileOutlier)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.columnar_db.QuantileOutlier,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(rmOutliers,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(DEBUG,[Default]), UsedName(ne,[Default]), UsedName(QuantileOutlier,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.columnar_db.QuantileOutlier has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(rmOutliers,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(DEBUG,[Default]), UsedName(ne,[Default]), UsedName(QuantileOutlier,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.columnar_db.QuantileOutlier)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.TreeTest3...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.TreeTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.TreeTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.TreeTest3,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(tree,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(FANOUT,[Default]), UsedName(toString,[Default]), UsedName(TreeTest3,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(root,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.TreeTest3 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(tree,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(FANOUT,[Default]), UsedName(toString,[Default]), UsedName(TreeTest3,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(root,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.TreeTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.MStrictSimTest5...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.MStrictSimTest5)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.MStrictSimTest5)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.MStrictSimTest5,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(MStrictSimTest5,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.MStrictSimTest5 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(MStrictSimTest5,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.MStrictSimTest5)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.graph_algebra.MuGraphGen...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.graph_algebra.MuGraphGen)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.graph_algebra.MuGraphGen)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.graph_algebra.MuGraphGen,ModifiedNames(changes = UsedName(genRandomGraph_PowLabels$default$4,[Default]), UsedName(equals,[Default]), UsedName(genPowerLawGraph_PowLabels$default$6,[Default]), UsedName(hashCode,[Default]), UsedName(scalation;graph_db;graph_algebra;MuGraphGen;init;,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(genRandomGraph,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(extractSubgraph,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(genRandomGraph_PowLabels,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(genBFSQuery$default$5,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(genPowerLawGraph$default$5,[Default]), UsedName(extractSubgraph$default$4,[Default]), UsedName(extractSubgraph$default$3,[Default]), UsedName(synchronized,[Default]), UsedName(genPowerLawGraph$default$6,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(genRandomConnectedGraph,[Default]), UsedName(genPowerLawGraph_PowLabels,[Default]), UsedName(flaw,[Default]), UsedName(wait,[Default]), UsedName(genRandomGraph$default$5,[Default]), UsedName(genRandomGraph_PowLabels$default$5,[Default]), UsedName(genPowerLawGraph,[Default]), UsedName(setVariate,[Default]), UsedName(genBFSQuery$default$4,[Default]), UsedName(ne,[Default]), UsedName(genPowerLawGraph_PowLabels$default$5,[Default]), UsedName(genRandomGraph$default$6,[Default]), UsedName(genRandomConnectedGraph$default$6,[Default]), UsedName(genRandomConnectedGraph$default$5,[Default]), UsedName(genBFSQuery,[Default]), UsedName(MuGraphGen,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.graph_algebra.MuGraphGen has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(genRandomGraph_PowLabels$default$4,[Default]), UsedName(equals,[Default]), UsedName(genPowerLawGraph_PowLabels$default$6,[Default]), UsedName(hashCode,[Default]), UsedName(scalation;graph_db;graph_algebra;MuGraphGen;init;,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(genRandomGraph,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(extractSubgraph,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(genRandomGraph_PowLabels,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(genBFSQuery$default$5,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(genPowerLawGraph$default$5,[Default]), UsedName(extractSubgraph$default$4,[Default]), UsedName(extractSubgraph$default$3,[Default]), UsedName(synchronized,[Default]), UsedName(genPowerLawGraph$default$6,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(genRandomConnectedGraph,[Default]), UsedName(genPowerLawGraph_PowLabels,[Default]), UsedName(flaw,[Default]), UsedName(wait,[Default]), UsedName(genRandomGraph$default$5,[Default]), UsedName(genRandomGraph_PowLabels$default$5,[Default]), UsedName(genPowerLawGraph,[Default]), UsedName(setVariate,[Default]), UsedName(genBFSQuery$default$4,[Default]), UsedName(ne,[Default]), UsedName(genPowerLawGraph_PowLabels$default$5,[Default]), UsedName(genRandomGraph$default$6,[Default]), UsedName(genRandomConnectedGraph$default$6,[Default]), UsedName(genRandomConnectedGraph$default$5,[Default]), UsedName(genBFSQuery,[Default]), UsedName(MuGraphGen,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.graph_algebra.MuGraphGen)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.dist_db.select...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.dist_db.select)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.dist_db.select)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.dist_db.RelDBMaster: Set(UsedName(isInstanceOf,[Default]), UsedName(name,[Default]), UsedName(asInstanceOf,[Default]), UsedName(rName,[Default]), UsedName(select,[Default]), UsedName(==,[Default]), UsedName(apply,[Default]), UsedName(ne,[Default]), UsedName(p,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.dist_db.RelDBMasterTest: Set(UsedName(select,[Default]), UsedName(apply,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.dist_db.select,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(copy$default$1,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(canEqual,[Default]), UsedName(productPrefix,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(name,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(copy$default$2,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(rName,[Default]), UsedName(getClass,[Default]), UsedName(select,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(scalation;dist_db;select;init;,[Default]), UsedName(unapply,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(apply,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(copy$default$3,[Default]), UsedName(ne,[Default]), UsedName(productIterator,[Default]), UsedName(p,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 3 classes due to The scalation.dist_db.select has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(copy$default$1,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(canEqual,[Default]), UsedName(productPrefix,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(name,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(copy$default$2,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(rName,[Default]), UsedName(getClass,[Default]), UsedName(select,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(scalation;dist_db;select;init;,[Default]), UsedName(unapply,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(apply,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(copy$default$3,[Default]), UsedName(ne,[Default]), UsedName(productIterator,[Default]), UsedName(p,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.dist_db.select)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> by member reference: Set(scalation.dist_db.RelDBMaster, scalation.dist_db.RelDBMasterTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graphalytics.GraphSim2Test...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graphalytics.GraphSim2Test)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graphalytics.GraphSim2Test)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graphalytics.GraphSim2Test,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(GraphSim2Test,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graphalytics.GraphSim2Test has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(GraphSim2Test,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graphalytics.GraphSim2Test)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graphalytics.ConvertTest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graphalytics.ConvertTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graphalytics.ConvertTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graphalytics.ConvertTest,ModifiedNames(changes = UsedName(m1,[Default]), UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(ConvertTest,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(m2,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graphalytics.ConvertTest has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(m1,[Default]), UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(ConvertTest,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(m2,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graphalytics.ConvertTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.test.GraphPattern_DTest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.test.GraphPattern_DTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.test.GraphPattern_DTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.test.GraphPattern_DTest,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(GraphPattern_DTest,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(q2,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(q3,[Default]), UsedName(synchronized,[Default]), UsedName(g2,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(g3,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.test.GraphPattern_DTest has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(GraphPattern_DTest,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(q2,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(q3,[Default]), UsedName(synchronized,[Default]), UsedName(g2,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(g3,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.test.GraphPattern_DTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.GraphSim2Test2...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.GraphSim2Test2)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.GraphSim2Test2)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.GraphSim2Test2,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(GraphSim2Test2,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.GraphSim2Test2 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(GraphSim2Test2,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.GraphSim2Test2)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graphalytics.BipartiteMatcher...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graphalytics.BipartiteMatcher)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graphalytics.BipartiteMatcher)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graphalytics.BipartiteMatcher,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName(bpm,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(isInstanceOf,[Default]), UsedName(BipartiteMatcher,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(maxBPM,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(scalation;graphalytics;BipartiteMatcher;init;,[Default]), UsedName(ne,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.graphalytics.BipartiteMatcher has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName(bpm,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(isInstanceOf,[Default]), UsedName(BipartiteMatcher,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(maxBPM,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(scalation;graphalytics;BipartiteMatcher;init;,[Default]), UsedName(ne,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graphalytics.BipartiteMatcher)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.GraphSim2Test5...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.GraphSim2Test5)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.GraphSim2Test5)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.GraphSim2Test5,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(GraphSim2Test5,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.GraphSim2Test5 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(GraphSim2Test5,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.GraphSim2Test5)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.TrafficLight...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.TrafficLight)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.TrafficLight)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.TrafficLight,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(readResolve,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(ValueSet,[Default]), UsedName(G_N,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(apply,[Default]), UsedName(nextName,[Default]), UsedName(Y_W,[Default]), UsedName(nextId,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(ValueOrdering,[Default]), UsedName(wait,[Default]), UsedName(TrafficLight,[Default]), UsedName(Value,[Default]), UsedName(ne,[Default]), UsedName(maxId,[Default]), UsedName(R_D,[Default]), UsedName(Val,[Default]), UsedName(values,[Default]), UsedName(withName,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.graph_db.TrafficLight has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(readResolve,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(ValueSet,[Default]), UsedName(G_N,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(apply,[Default]), UsedName(nextName,[Default]), UsedName(Y_W,[Default]), UsedName(nextId,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(ValueOrdering,[Default]), UsedName(wait,[Default]), UsedName(TrafficLight,[Default]), UsedName(Value,[Default]), UsedName(ne,[Default]), UsedName(maxId,[Default]), UsedName(R_D,[Default]), UsedName(Val,[Default]), UsedName(values,[Default]), UsedName(withName,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.TrafficLight)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graphalytics.GraphMatcherTest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graphalytics.GraphMatcherTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graphalytics.GraphMatcherTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graphalytics.GraphMatcherTest,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(GraphMatcherTest,[Default]), UsedName(notifyAll,[Default]), UsedName(testBijections,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(testMappings,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graphalytics.GraphMatcherTest has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(GraphMatcherTest,[Default]), UsedName(notifyAll,[Default]), UsedName(testBijections,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(testMappings,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graphalytics.GraphMatcherTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.GraphIO...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.GraphIO)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.GraphIO)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.GraphIO,ModifiedNames(changes = UsedName(write2IgraphFiles,[Default]), UsedName(equals,[Default]), UsedName(makeSet,[Default]), UsedName(apply$default$2,[Default]), UsedName(hashCode,[Default]), UsedName(read2Files,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(apply$default$3,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(write,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(apply$default$4,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(read2Files$default$3,[Default]), UsedName(apply,[Default]), UsedName(write$default$3,[Default]), UsedName(write$default$2,[Default]), UsedName(toLabel,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(GraphIO,[Default]), UsedName(##,[Default]), UsedName(flaw,[Default]), UsedName(wait,[Default]), UsedName(write$default$1,[Default]), UsedName(ne,[Default]), UsedName(write2Neo4JFiles,[Default]), UsedName(read2PajekFile,[Default]), UsedName(read2PajekFile$default$3,[Default]), UsedName(scalation;graph_db;GraphIO;init;,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.GraphIO has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(write2IgraphFiles,[Default]), UsedName(equals,[Default]), UsedName(makeSet,[Default]), UsedName(apply$default$2,[Default]), UsedName(hashCode,[Default]), UsedName(read2Files,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(apply$default$3,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(write,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(apply$default$4,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(read2Files$default$3,[Default]), UsedName(apply,[Default]), UsedName(write$default$3,[Default]), UsedName(write$default$2,[Default]), UsedName(toLabel,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(GraphIO,[Default]), UsedName(##,[Default]), UsedName(flaw,[Default]), UsedName(wait,[Default]), UsedName(write$default$1,[Default]), UsedName(ne,[Default]), UsedName(write2Neo4JFiles,[Default]), UsedName(read2PajekFile,[Default]), UsedName(read2PajekFile$default$3,[Default]), UsedName(scalation;graph_db;GraphIO;init;,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.GraphIO)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.graph_algebra.MuGraphSimTest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.graph_algebra.MuGraphSimTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.graph_algebra.MuGraphSimTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.graph_algebra.MuGraphSimTest,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(matcher,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(MuGraphSimTest,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.graph_algebra.MuGraphSimTest has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(matcher,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(MuGraphSimTest,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.graph_algebra.MuGraphSimTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.columnar_db.MM_RelationEx...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.columnar_db.MM_RelationEx)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.columnar_db.MM_RelationEx)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.columnar_db.MM_RelationEx,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(productSales,[Default]), UsedName(MM_RelationEx,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.columnar_db.MM_RelationEx has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(productSales,[Default]), UsedName(MM_RelationEx,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.columnar_db.MM_RelationEx)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.ExampleMGraphS...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.ExampleMGraphS)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.ExampleMGraphS)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.ExampleMGraphS,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(g4p,[Default]), UsedName(q3p,[Default]), UsedName(isInstanceOf,[Default]), UsedName(q4w,[Default]), UsedName(finalize,[Default]), UsedName(g4,[Default]), UsedName(q2,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(g1,[Default]), UsedName(notifyAll,[Default]), UsedName(q4wp,[Default]), UsedName(getClass,[Default]), UsedName(ExampleMGraphS,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g2p,[Default]), UsedName(g3p,[Default]), UsedName(q3,[Default]), UsedName(synchronized,[Default]), UsedName(g2,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(q1,[Default]), UsedName(q4xp,[Default]), UsedName(q1p,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(g1p,[Default]), UsedName(q4x,[Default]), UsedName(q2p,[Default]), UsedName(g3,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.graph_db.ExampleMGraphS has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(g4p,[Default]), UsedName(q3p,[Default]), UsedName(isInstanceOf,[Default]), UsedName(q4w,[Default]), UsedName(finalize,[Default]), UsedName(g4,[Default]), UsedName(q2,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(g1,[Default]), UsedName(notifyAll,[Default]), UsedName(q4wp,[Default]), UsedName(getClass,[Default]), UsedName(ExampleMGraphS,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g2p,[Default]), UsedName(g3p,[Default]), UsedName(q3,[Default]), UsedName(synchronized,[Default]), UsedName(g2,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(q1,[Default]), UsedName(q4xp,[Default]), UsedName(q1p,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(g1p,[Default]), UsedName(q4x,[Default]), UsedName(q2p,[Default]), UsedName(g3,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.ExampleMGraphS)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.MGraphSim2W...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.MGraphSim2W)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.MGraphSim2W)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.MGraphSim2W,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(test$default$2,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(feasibleMatesW,[Default]), UsedName(MGraphSim2W,[Default]), UsedName(isInstanceOf,[Default]), UsedName(bijections,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(disjoint,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(qRange,[Default]), UsedName(notifyAll,[Default]), UsedName(SELF_LOOPS,[Default]), UsedName(getClass,[Default]), UsedName(LIMIT,[Default]), UsedName(gRange,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(feasibleMates,[Default]), UsedName(CHECK,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(test,[Default]), UsedName(showMappings,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(countMappings,[Default]), UsedName(filterGraph,[Default]), UsedName(prune,[Default]), UsedName(scalation;graph_db;pattern_matching;MGraphSim2W;init;,[Default]), UsedName(mappings,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.MGraphSim2W has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(test$default$2,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(feasibleMatesW,[Default]), UsedName(MGraphSim2W,[Default]), UsedName(isInstanceOf,[Default]), UsedName(bijections,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(disjoint,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(qRange,[Default]), UsedName(notifyAll,[Default]), UsedName(SELF_LOOPS,[Default]), UsedName(getClass,[Default]), UsedName(LIMIT,[Default]), UsedName(gRange,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(feasibleMates,[Default]), UsedName(CHECK,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(test,[Default]), UsedName(showMappings,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(countMappings,[Default]), UsedName(filterGraph,[Default]), UsedName(prune,[Default]), UsedName(scalation;graph_db;pattern_matching;MGraphSim2W;init;,[Default]), UsedName(mappings,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.MGraphSim2W)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.distributed_db.intersect...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.distributed_db.intersect)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.distributed_db.intersect)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.distributed_db.RelationDBMaster: Set(UsedName(intersect,[Default]), UsedName(isInstanceOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(==,[Default]), UsedName(apply,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(r,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.distributed_db.intersect,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(copy$default$1,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(intersect,[Default]), UsedName(canEqual,[Default]), UsedName(curried,[Default]), UsedName(productPrefix,[Default]), UsedName(tupled,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(copy$default$2,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(unapply,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(apply,[Default]), UsedName(synchronized,[Default]), UsedName(scalation;distributed_db;intersect;init;,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(r,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 2 classes due to The scalation.distributed_db.intersect has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(copy$default$1,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(intersect,[Default]), UsedName(canEqual,[Default]), UsedName(curried,[Default]), UsedName(productPrefix,[Default]), UsedName(tupled,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(copy$default$2,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(unapply,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(apply,[Default]), UsedName(synchronized,[Default]), UsedName(scalation;distributed_db;intersect;init;,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(r,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.distributed_db.intersect)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> by member reference: Set(scalation.distributed_db.RelationDBMaster)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.columnar_db.ImputeMovingAverage...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.columnar_db.ImputeMovingAverage)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.columnar_db.ImputeMovingAverage)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.columnar_db.ImputeMovingAverage,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(impute,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(ImputeMovingAverage,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.columnar_db.ImputeMovingAverage has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(impute,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(ImputeMovingAverage,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.columnar_db.ImputeMovingAverage)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.columnar_db.Interpolate...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.columnar_db.Interpolate)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.columnar_db.Interpolate)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.columnar_db.Interpolate,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(impute,[Default]), UsedName(Interpolate,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.columnar_db.Interpolate has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(impute,[Default]), UsedName(Interpolate,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.columnar_db.Interpolate)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.MTightSimTest3...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.MTightSimTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.MTightSimTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.MTightSimTest3,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(MTightSimTest3,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.MTightSimTest3 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(MTightSimTest3,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.MTightSimTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.StrictSimTest5...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.StrictSimTest5)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.StrictSimTest5)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.StrictSimTest5,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(StrictSimTest5,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.StrictSimTest5 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(StrictSimTest5,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.StrictSimTest5)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graphalytics.LabelType...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graphalytics.LabelType)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graphalytics.LabelType)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graphalytics.LabelType,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(sTLabel,[Default]), UsedName(TLabel,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(LabelType,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(TLabel_MAX,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(TLabel_DEFAULT,[Default]), UsedName(synchronized,[Default]), UsedName(toTLabel,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.graphalytics.LabelType has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(sTLabel,[Default]), UsedName(TLabel,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(LabelType,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(TLabel_MAX,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(TLabel_DEFAULT,[Default]), UsedName(synchronized,[Default]), UsedName(toTLabel,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graphalytics.LabelType)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.MinSpanningTree...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.MinSpanningTree)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.MinSpanningTree)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.MinSpanningTree,ModifiedNames(changes = UsedName(setStackTrace,[Default]), UsedName(equals,[Default]), UsedName(NodeOrder2,[Default]), UsedName(getStackTrace,[Default]), UsedName(hashCode,[Default]), UsedName(makeITree,[Default]), UsedName(getLocalizedMessage,[Default]), UsedName(initCause,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(Elem,[Default]), UsedName(MinSpanningTree,[Default]), UsedName(isInstanceOf,[Default]), UsedName(getStackTraceDepth,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(span,[Default]), UsedName(getMessage,[Default]), UsedName(getStackTraceElement,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(printSTree,[Default]), UsedName(getSuppressed,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(getCause,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(printStackTrace,[Default]), UsedName(wait,[Default]), UsedName(NodeOrder,[Default]), UsedName(ne,[Default]), UsedName(addSuppressed,[Default]), UsedName(fillInStackTrace,[Default]), UsedName(scalation;graph_db;MinSpanningTree;init;,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.graph_db.MinSpanningTree has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(setStackTrace,[Default]), UsedName(equals,[Default]), UsedName(NodeOrder2,[Default]), UsedName(getStackTrace,[Default]), UsedName(hashCode,[Default]), UsedName(makeITree,[Default]), UsedName(getLocalizedMessage,[Default]), UsedName(initCause,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(Elem,[Default]), UsedName(MinSpanningTree,[Default]), UsedName(isInstanceOf,[Default]), UsedName(getStackTraceDepth,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(span,[Default]), UsedName(getMessage,[Default]), UsedName(getStackTraceElement,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(printSTree,[Default]), UsedName(getSuppressed,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(getCause,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(printStackTrace,[Default]), UsedName(wait,[Default]), UsedName(NodeOrder,[Default]), UsedName(ne,[Default]), UsedName(addSuppressed,[Default]), UsedName(fillInStackTrace,[Default]), UsedName(scalation;graph_db;MinSpanningTree;init;,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.MinSpanningTree)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.DualSimCARTest5...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.DualSimCARTest5)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.DualSimCARTest5)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.DualSimCARTest5,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(DualSimCARTest5,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.DualSimCARTest5 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(DualSimCARTest5,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.DualSimCARTest5)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graphalytics.DualIsoTest3...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graphalytics.DualIsoTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graphalytics.DualIsoTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graphalytics.DualIsoTest3,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(matcher,[Default]), UsedName(DualIsoTest3,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(qAvDegree,[Default]), UsedName(qSize,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(gAvDegree,[Default]), UsedName(nLabels,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(gSize,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(psi,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graphalytics.DualIsoTest3 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(matcher,[Default]), UsedName(DualIsoTest3,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(qAvDegree,[Default]), UsedName(qSize,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(gAvDegree,[Default]), UsedName(nLabels,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(gSize,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(psi,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graphalytics.DualIsoTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.test.GraphPattern_STest3...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.test.GraphPattern_STest3)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.test.GraphPattern_STest3)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.test.GraphPattern_STest3,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(gLabels,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(gDegree,[Default]), UsedName(inverse,[Default]), UsedName(UNIFORM,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(qSize,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(GraphPattern_STest3,[Default]), UsedName(qDegree,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.test.GraphPattern_STest3 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(gLabels,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(gDegree,[Default]), UsedName(inverse,[Default]), UsedName(UNIFORM,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(qSize,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(GraphPattern_STest3,[Default]), UsedName(qDegree,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.test.GraphPattern_STest3)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.MGraphSimCARTest2...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.MGraphSimCARTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.MGraphSimCARTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.MGraphSimCARTest2,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(MGraphSimCARTest2,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.MGraphSimCARTest2 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(MGraphSimCARTest2,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.MGraphSimCARTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.graph_algebra.PathType...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.graph_algebra.PathType)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.graph_algebra.PathType)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.graph_algebra.PathType,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(Path,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(Rows,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(Rows_lab,[Default]), UsedName(Path_Lab,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(PathType,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.graph_db.graph_algebra.PathType has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(Path,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(Rows,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(Rows_lab,[Default]), UsedName(Path_Lab,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(PathType,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.graph_algebra.PathType)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.MGraphSim...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.MGraphSim)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.MGraphSim)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.MGraphSim,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(test$default$2,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(feasibleMatesW,[Default]), UsedName(scalation;graph_db;pattern_matching;MGraphSim;init;,[Default]), UsedName(isInstanceOf,[Default]), UsedName(bijections,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(disjoint,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(qRange,[Default]), UsedName(notifyAll,[Default]), UsedName(SELF_LOOPS,[Default]), UsedName(getClass,[Default]), UsedName(LIMIT,[Default]), UsedName(gRange,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(feasibleMates,[Default]), UsedName(CHECK,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(test,[Default]), UsedName(showMappings,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(countMappings,[Default]), UsedName(filterGraph,[Default]), UsedName(prune,[Default]), UsedName(mappings,[Default]), UsedName(eq,[Default]), UsedName(MGraphSim,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.MGraphSim has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(test$default$2,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(feasibleMatesW,[Default]), UsedName(scalation;graph_db;pattern_matching;MGraphSim;init;,[Default]), UsedName(isInstanceOf,[Default]), UsedName(bijections,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(disjoint,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(qRange,[Default]), UsedName(notifyAll,[Default]), UsedName(SELF_LOOPS,[Default]), UsedName(getClass,[Default]), UsedName(LIMIT,[Default]), UsedName(gRange,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(feasibleMates,[Default]), UsedName(CHECK,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(test,[Default]), UsedName(showMappings,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(countMappings,[Default]), UsedName(filterGraph,[Default]), UsedName(prune,[Default]), UsedName(mappings,[Default]), UsedName(eq,[Default]), UsedName(MGraphSim,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.MGraphSim)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.image.ChessTrackerTest3...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.image.ChessTrackerTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.image.ChessTrackerTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.image.ChessTrackerTest3,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(dq,[Default]), UsedName(tr_q,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(ChessTrackerTest3,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(er,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(w,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(dr,[Default]), UsedName(synchronized,[Default]), UsedName(u,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(tr_r,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.image.ChessTrackerTest3 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(dq,[Default]), UsedName(tr_q,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(ChessTrackerTest3,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(er,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(w,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(dr,[Default]), UsedName(synchronized,[Default]), UsedName(u,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(tr_r,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.image.ChessTrackerTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.DualSimTest2...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.DualSimTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.DualSimTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.DualSimTest2,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(DualSimTest2,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.DualSimTest2 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(DualSimTest2,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.DualSimTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.columnar_db.MissingValuesTest3...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.columnar_db.MissingValuesTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.columnar_db.MissingValuesTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.columnar_db.MissingValuesTest3,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]), UsedName(MissingValuesTest3,[Default]))) invalidates 1 classes due to The scalation.columnar_db.MissingValuesTest3 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]), UsedName(MissingValuesTest3,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.columnar_db.MissingValuesTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.distributed_db.createIn...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.distributed_db.createIn)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.distributed_db.createIn)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.distributed_db.RelationDBMaster: Set(UsedName(isInstanceOf,[Default]), UsedName(name,[Default]), UsedName(asInstanceOf,[Default]), UsedName(colname,[Default]), UsedName(key,[Default]), UsedName(domain,[Default]), UsedName(==,[Default]), UsedName(createIn,[Default]), UsedName(apply,[Default]), UsedName(ne,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.distributed_db.RelationDBWorker: Set(UsedName(isInstanceOf,[Default]), UsedName(name,[Default]), UsedName(asInstanceOf,[Default]), UsedName(colname,[Default]), UsedName(key,[Default]), UsedName(domain,[Default]), UsedName(==,[Default]), UsedName(createIn,[Default]), UsedName(apply,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.distributed_db.createIn,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(copy$default$1,[Default]), UsedName(hashCode,[Default]), UsedName(scalation;distributed_db;createIn;init;,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(canEqual,[Default]), UsedName(curried,[Default]), UsedName(productPrefix,[Default]), UsedName(tupled,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(name,[Default]), UsedName(asInstanceOf,[Default]), UsedName(colname,[Default]), UsedName($asInstanceOf,[Default]), UsedName(key,[Default]), UsedName(copy$default$2,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(domain,[Default]), UsedName(getClass,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(unapply,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(createIn,[Default]), UsedName(copy$default$4,[Default]), UsedName(apply,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(copy$default$3,[Default]), UsedName(ne,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 3 classes due to The scalation.distributed_db.createIn has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(copy$default$1,[Default]), UsedName(hashCode,[Default]), UsedName(scalation;distributed_db;createIn;init;,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(canEqual,[Default]), UsedName(curried,[Default]), UsedName(productPrefix,[Default]), UsedName(tupled,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(name,[Default]), UsedName(asInstanceOf,[Default]), UsedName(colname,[Default]), UsedName($asInstanceOf,[Default]), UsedName(key,[Default]), UsedName(copy$default$2,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(domain,[Default]), UsedName(getClass,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(unapply,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(createIn,[Default]), UsedName(copy$default$4,[Default]), UsedName(apply,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(copy$default$3,[Default]), UsedName(ne,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.distributed_db.createIn)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> by member reference: Set(scalation.distributed_db.RelationDBMaster, scalation.distributed_db.RelationDBWorker)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.distributed_db.product...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.distributed_db.product)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.distributed_db.product)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.distributed_db.RelationDBMaster: Set(UsedName(isInstanceOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(product,[Default]), UsedName(==,[Default]), UsedName(apply,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(r,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.distributed_db.product,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(copy$default$1,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(scalation;distributed_db;product;init;,[Default]), UsedName(canEqual,[Default]), UsedName(curried,[Default]), UsedName(productPrefix,[Default]), UsedName(tupled,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(copy$default$2,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(product,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(unapply,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(apply,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(r,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 2 classes due to The scalation.distributed_db.product has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(copy$default$1,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(scalation;distributed_db;product;init;,[Default]), UsedName(canEqual,[Default]), UsedName(curried,[Default]), UsedName(productPrefix,[Default]), UsedName(tupled,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(copy$default$2,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(product,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(unapply,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(apply,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(r,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.distributed_db.product)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> by member reference: Set(scalation.distributed_db.RelationDBMaster)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.GraphSimTest3...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.GraphSimTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.GraphSimTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.GraphSimTest3,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(GraphSimTest3,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.GraphSimTest3 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(GraphSimTest3,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.GraphSimTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.graph_algebra.MuGraphSimTest3...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.graph_algebra.MuGraphSimTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.graph_algebra.MuGraphSimTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.graph_algebra.MuGraphSimTest3,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(matcher,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(MuGraphSimTest3,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.graph_algebra.MuGraphSimTest3 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(matcher,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(MuGraphSimTest3,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.graph_algebra.MuGraphSimTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.columnar_db.TableObj...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.columnar_db.TableObj)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.columnar_db.TableObj)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.dist_db.RelDBMaster: Set(UsedName(TableObj,[Default]), UsedName(isInstanceOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(Row,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(ucount,[Default]), UsedName(project,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.dist_db.add: Set(UsedName($isInstanceOf,[Default]), UsedName(TableObj,[Default]), UsedName(isInstanceOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(Row,[Default]), UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(eq,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.dist_db.addIn: Set(UsedName($isInstanceOf,[Default]), UsedName(TableObj,[Default]), UsedName(isInstanceOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(Row,[Default]), UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(eq,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.dist_db.RelDBWorker: Set(UsedName(isInstanceOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(Row,[Default]), UsedName(==,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.distributed_db.package: Set(UsedName(TableObj,[Default]), UsedName(Row,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.distributed_db.RelationDBWorker: Set(UsedName(isInstanceOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(Row,[Default]), UsedName(==,[Default]), UsedName(project,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.distributed_db.RelationDBMaster: Set(UsedName(isInstanceOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(Row,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(project,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.dist_db.RelDBMasterTest: Set(UsedName(Row,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.dist_db.package: Set(UsedName(TableObj,[Default]), UsedName(Row,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.dist_db.RelDBMasterTest2: Set(UsedName(Row,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.distributed_db.RelationDBMasterTest: Set(UsedName(Row,[Default]), UsedName(project,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.distributed_db.addIn: Set(UsedName($isInstanceOf,[Default]), UsedName(TableObj,[Default]), UsedName(isInstanceOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(Row,[Default]), UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(eq,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.distributed_db.add: Set(UsedName($isInstanceOf,[Default]), UsedName(TableObj,[Default]), UsedName(isInstanceOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(Row,[Default]), UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(eq,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.dist_db.RelDBMasterTest4: Set(UsedName(Row,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.columnar_db.TableObj,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName(nullTuple,[Default]), UsedName(SP,[Default]), UsedName($isInstanceOf,[Default]), UsedName(TableObj,[Default]), UsedName(clone,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(Row,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(SER,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(flaw,[Default]), UsedName(sameOn,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(projectD,[Default]), UsedName(JSON,[Default]), UsedName(ucount,[Default]), UsedName(CSV,[Default]), UsedName(project,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 15 classes due to The scalation.columnar_db.TableObj has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName(nullTuple,[Default]), UsedName(SP,[Default]), UsedName($isInstanceOf,[Default]), UsedName(TableObj,[Default]), UsedName(clone,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(Row,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(SER,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(flaw,[Default]), UsedName(sameOn,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(projectD,[Default]), UsedName(JSON,[Default]), UsedName(ucount,[Default]), UsedName(CSV,[Default]), UsedName(project,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.columnar_db.TableObj)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> by member reference: Set(scalation.dist_db.RelDBMaster, scalation.dist_db.add, scalation.dist_db.addIn, scalation.dist_db.RelDBWorker, scalation.distributed_db.package, scalation.distributed_db.RelationDBWorker, scalation.distributed_db.RelationDBMaster, scalation.dist_db.RelDBMasterTest, scalation.dist_db.package, scalation.dist_db.RelDBMasterTest2, scalation.distributed_db.RelationDBMasterTest, scalation.distributed_db.addIn, scalation.distributed_db.add, scalation.dist_db.RelDBMasterTest4)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.graph_algebra.MuGraphTest3...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.graph_algebra.MuGraphTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.graph_algebra.MuGraphTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.graph_algebra.MuGraphTest3,ModifiedNames(changes = UsedName(MuGraphTest3,[Default]), UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(mgGen,[Default]), UsedName(mGraph,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.graph_algebra.MuGraphTest3 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(MuGraphTest3,[Default]), UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(mgGen,[Default]), UsedName(mGraph,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.graph_algebra.MuGraphTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.GraphTest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.GraphTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.GraphTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.GraphTest,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(GraphTest,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.GraphTest has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(GraphTest,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.GraphTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graphalytics.package...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graphalytics.package)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graphalytics.package)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graphalytics.package,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName(EXT,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(Pair,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(package,[Default]), UsedName(ne,[Default]), UsedName(BASE_DIR,[Default]), UsedName(stringArray,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.graphalytics.package has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName(EXT,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(Pair,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(package,[Default]), UsedName(ne,[Default]), UsedName(BASE_DIR,[Default]), UsedName(stringArray,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graphalytics.package)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.GraphIOTest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.GraphIOTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.GraphIOTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.GraphIOTest,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(avDegree,[Default]), UsedName(GraphIOTest,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(gGen,[Default]), UsedName(inverse,[Default]), UsedName(name,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(nLabels,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(size,[Default]), UsedName(wait,[Default]), UsedName(ran_graph,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(gIO,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.GraphIOTest has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(avDegree,[Default]), UsedName(GraphIOTest,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(gGen,[Default]), UsedName(inverse,[Default]), UsedName(name,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(nLabels,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(size,[Default]), UsedName(wait,[Default]), UsedName(ran_graph,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(gIO,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.GraphIOTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.columnar_db.MM_Relation...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.columnar_db.MM_Relation)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.columnar_db.MM_Relation)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.columnar_db.MM_Relation,ModifiedNames(changes = UsedName(fromMatriD,[Default]), UsedName(σ,[Default]), UsedName(equals,[Default]), UsedName(union,[Default]), UsedName(pisigmaR,[Default]), UsedName(reverseOrderBy,[Default]), UsedName(hashCode,[Default]), UsedName(leftJoin,[Default]), UsedName(row,[Default]), UsedName(toMatriII$default$3,[Default]), UsedName(toMatriDD,[Default]), UsedName(writeJSON,[Default]), UsedName(eproject,[Default]), UsedName($isInstanceOf,[Default]), UsedName(corr,[Default]), UsedName(fromMatriD_$default$6,[Default]), UsedName(sigmaD,[Default]), UsedName(toMatriD,[Default]), UsedName(clone,[Default]), UsedName(intersect,[Default]), UsedName(delete,[Default]), UsedName(Ɛ,[Default]), UsedName(show,[Default]), UsedName(sigmaR,[Default]), UsedName(uncompress,[Default]), UsedName(disambiguate,[Default]), UsedName(-,[Default]), UsedName(ωω,[Default]), UsedName(groupBy,[Default]), UsedName(selectL,[Default]), UsedName(isInstanceOf,[Default]), UsedName(fromMatriI,[Default]), UsedName(max,[Default]), UsedName(π,[Default]), UsedName(mean,[Default]), UsedName(finalize,[Default]), UsedName(⋈,[Default]), UsedName(name,[Default]), UsedName(toMatriDD$default$3,[Default]), UsedName(asInstanceOf,[Default]), UsedName(update,[Default]), UsedName(pisigmaI,[Default]), UsedName($asInstanceOf,[Default]), UsedName(fromMatriII$default$5,[Default]), UsedName(key,[Default]), UsedName(cols,[Default]), UsedName(pi,[Default]), UsedName(!=,[Default]), UsedName(add_2,[Default]), UsedName(toMatriI,[Default]), UsedName(sigmaC,[Default]), UsedName(notifyAll,[Default]), UsedName(show$default$1,[Default]), UsedName(×,[Default]), UsedName(epi,[Default]), UsedName(domain,[Default]), UsedName(getClass,[Default]), UsedName(⋉$default$1,[Default]), UsedName(select,[Default]), UsedName(product,[Default]), UsedName(selectS,[Default]), UsedName(ζζ,[Default]), UsedName(toMatriDI$default$3,[Default]), UsedName(contains,[Default]), UsedName(colNames,[Default]), UsedName(⋊,[Default]), UsedName(sigmaQ,[Default]), UsedName(compress,[Default]), UsedName(count,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(join,[Default]), UsedName(π$default$2,[Default]), UsedName(colsMap,[Default]), UsedName(orderBy,[Default]), UsedName(selectAt,[Default]), UsedName(apply,[Default]), UsedName(rows,[Default]), UsedName(sigmaS,[Default]), UsedName(corr$default$2,[Default]), UsedName(writeCSV,[Default]), UsedName(pisigmaL,[Default]), UsedName(MM_Relation,[Default]), UsedName(selectI,[Default]), UsedName(selectC,[Default]), UsedName(column,[Default]), UsedName(selectD,[Default]), UsedName(fromMatriD$default$5,[Default]), UsedName(synchronized,[Default]), UsedName(Ʋ,[Default]), UsedName(<init>$default$6,[Default]), UsedName(pisigmaS,[Default]), UsedName(Π,[Default]), UsedName(toString,[Default]), UsedName(sigmaL,[Default]), UsedName(##,[Default]), UsedName(minus,[Default]), UsedName(fromMatriD_,[Default]), UsedName(toMatriI$default$2,[Default]), UsedName(flaw,[Default]), UsedName(⋂,[Default]), UsedName(<init>$default$5,[Default]), UsedName(pisigmaD,[Default]), UsedName(sigmaI,[Default]), UsedName(wait,[Default]), UsedName(fromMatriII$default$6,[Default]), UsedName(fromMatriII,[Default]), UsedName(⋃,[Default]), UsedName(uniq_union,[Default]), UsedName(fromMatriD$default$4,[Default]), UsedName(sigma,[Default]), UsedName(rename,[Default]), UsedName(toMatriII,[Default]), UsedName(indices,[Default]), UsedName(ne,[Default]), UsedName(domains,[Default]), UsedName(sum,[Default]), UsedName(corr$default$3,[Default]), UsedName(leftJoin$default$1,[Default]), UsedName(min,[Default]), UsedName(<init>$default$7,[Default]), UsedName(colName,[Default]), UsedName(pisigmaQ,[Default]), UsedName(pi$default$2,[Default]), UsedName(incompatible,[Default]), UsedName(toMatriD$default$2,[Default]), UsedName(γ,[Default]), UsedName(project$default$2,[Default]), UsedName(save,[Default]), UsedName(col,[Default]), UsedName(variance,[Default]), UsedName(selectQ,[Default]), UsedName(add,[Default]), UsedName(columns,[Default]), UsedName(fKeys,[Default]), UsedName(⋉,[Default]), UsedName(project,[Default]), UsedName(fromMatriI$default$5,[Default]), UsedName(selectR,[Default]), UsedName(ζ,[Default]), UsedName(pisigmaC,[Default]), UsedName(scalation;columnar_db;MM_Relation;init;,[Default]), UsedName(<init>$default$4,[Default]), UsedName(fromMatriD_$default$5,[Default]), UsedName(fromMatriI$default$4,[Default]), UsedName(ω,[Default]), UsedName(toMatriDI,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]), UsedName(rightJoin,[Default]))) invalidates 1 classes due to The scalation.columnar_db.MM_Relation has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(fromMatriD,[Default]), UsedName(σ,[Default]), UsedName(equals,[Default]), UsedName(union,[Default]), UsedName(pisigmaR,[Default]), UsedName(reverseOrderBy,[Default]), UsedName(hashCode,[Default]), UsedName(leftJoin,[Default]), UsedName(row,[Default]), UsedName(toMatriII$default$3,[Default]), UsedName(toMatriDD,[Default]), UsedName(writeJSON,[Default]), UsedName(eproject,[Default]), UsedName($isInstanceOf,[Default]), UsedName(corr,[Default]), UsedName(fromMatriD_$default$6,[Default]), UsedName(sigmaD,[Default]), UsedName(toMatriD,[Default]), UsedName(clone,[Default]), UsedName(intersect,[Default]), UsedName(delete,[Default]), UsedName(Ɛ,[Default]), UsedName(show,[Default]), UsedName(sigmaR,[Default]), UsedName(uncompress,[Default]), UsedName(disambiguate,[Default]), UsedName(-,[Default]), UsedName(ωω,[Default]), UsedName(groupBy,[Default]), UsedName(selectL,[Default]), UsedName(isInstanceOf,[Default]), UsedName(fromMatriI,[Default]), UsedName(max,[Default]), UsedName(π,[Default]), UsedName(mean,[Default]), UsedName(finalize,[Default]), UsedName(⋈,[Default]), UsedName(name,[Default]), UsedName(toMatriDD$default$3,[Default]), UsedName(asInstanceOf,[Default]), UsedName(update,[Default]), UsedName(pisigmaI,[Default]), UsedName($asInstanceOf,[Default]), UsedName(fromMatriII$default$5,[Default]), UsedName(key,[Default]), UsedName(cols,[Default]), UsedName(pi,[Default]), UsedName(!=,[Default]), UsedName(add_2,[Default]), UsedName(toMatriI,[Default]), UsedName(sigmaC,[Default]), UsedName(notifyAll,[Default]), UsedName(show$default$1,[Default]), UsedName(×,[Default]), UsedName(epi,[Default]), UsedName(domain,[Default]), UsedName(getClass,[Default]), UsedName(⋉$default$1,[Default]), UsedName(select,[Default]), UsedName(product,[Default]), UsedName(selectS,[Default]), UsedName(ζζ,[Default]), UsedName(toMatriDI$default$3,[Default]), UsedName(contains,[Default]), UsedName(colNames,[Default]), UsedName(⋊,[Default]), UsedName(sigmaQ,[Default]), UsedName(compress,[Default]), UsedName(count,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(join,[Default]), UsedName(π$default$2,[Default]), UsedName(colsMap,[Default]), UsedName(orderBy,[Default]), UsedName(selectAt,[Default]), UsedName(apply,[Default]), UsedName(rows,[Default]), UsedName(sigmaS,[Default]), UsedName(corr$default$2,[Default]), UsedName(writeCSV,[Default]), UsedName(pisigmaL,[Default]), UsedName(MM_Relation,[Default]), UsedName(selectI,[Default]), UsedName(selectC,[Default]), UsedName(column,[Default]), UsedName(selectD,[Default]), UsedName(fromMatriD$default$5,[Default]), UsedName(synchronized,[Default]), UsedName(Ʋ,[Default]), UsedName(<init>$default$6,[Default]), UsedName(pisigmaS,[Default]), UsedName(Π,[Default]), UsedName(toString,[Default]), UsedName(sigmaL,[Default]), UsedName(##,[Default]), UsedName(minus,[Default]), UsedName(fromMatriD_,[Default]), UsedName(toMatriI$default$2,[Default]), UsedName(flaw,[Default]), UsedName(⋂,[Default]), UsedName(<init>$default$5,[Default]), UsedName(pisigmaD,[Default]), UsedName(sigmaI,[Default]), UsedName(wait,[Default]), UsedName(fromMatriII$default$6,[Default]), UsedName(fromMatriII,[Default]), UsedName(⋃,[Default]), UsedName(uniq_union,[Default]), UsedName(fromMatriD$default$4,[Default]), UsedName(sigma,[Default]), UsedName(rename,[Default]), UsedName(toMatriII,[Default]), UsedName(indices,[Default]), UsedName(ne,[Default]), UsedName(domains,[Default]), UsedName(sum,[Default]), UsedName(corr$default$3,[Default]), UsedName(leftJoin$default$1,[Default]), UsedName(min,[Default]), UsedName(<init>$default$7,[Default]), UsedName(colName,[Default]), UsedName(pisigmaQ,[Default]), UsedName(pi$default$2,[Default]), UsedName(incompatible,[Default]), UsedName(toMatriD$default$2,[Default]), UsedName(γ,[Default]), UsedName(project$default$2,[Default]), UsedName(save,[Default]), UsedName(col,[Default]), UsedName(variance,[Default]), UsedName(selectQ,[Default]), UsedName(add,[Default]), UsedName(columns,[Default]), UsedName(fKeys,[Default]), UsedName(⋉,[Default]), UsedName(project,[Default]), UsedName(fromMatriI$default$5,[Default]), UsedName(selectR,[Default]), UsedName(ζ,[Default]), UsedName(pisigmaC,[Default]), UsedName(scalation;columnar_db;MM_Relation;init;,[Default]), UsedName(<init>$default$4,[Default]), UsedName(fromMatriD_$default$5,[Default]), UsedName(fromMatriI$default$4,[Default]), UsedName(ω,[Default]), UsedName(toMatriDI,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]), UsedName(rightJoin,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.columnar_db.MM_Relation)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graphalytics.TopSortTest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graphalytics.TopSortTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graphalytics.TopSortTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graphalytics.TopSortTest,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(pg2,[Default]), UsedName(clone,[Default]), UsedName(TopSortTest,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(pg1,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graphalytics.TopSortTest has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(pg2,[Default]), UsedName(clone,[Default]), UsedName(TopSortTest,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(pg1,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graphalytics.TopSortTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graphalytics.GraphSimTest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graphalytics.GraphSimTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graphalytics.GraphSimTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graphalytics.GraphSimTest,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(GraphSimTest,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graphalytics.GraphSimTest has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(GraphSimTest,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graphalytics.GraphSimTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.dist_db.join...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.dist_db.join)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.dist_db.join)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.dist_db.RelDBMaster: Set(UsedName(isInstanceOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(rName,[Default]), UsedName(==,[Default]), UsedName(join,[Default]), UsedName(apply,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(r,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.dist_db.join,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(copy$default$1,[Default]), UsedName(hashCode,[Default]), UsedName(scalation;dist_db;join;init;,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(canEqual,[Default]), UsedName(curried,[Default]), UsedName(productPrefix,[Default]), UsedName(tupled,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(copy$default$2,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(rName,[Default]), UsedName(getClass,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(unapply,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(join,[Default]), UsedName(apply,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(copy$default$3,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(r,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 2 classes due to The scalation.dist_db.join has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(copy$default$1,[Default]), UsedName(hashCode,[Default]), UsedName(scalation;dist_db;join;init;,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(canEqual,[Default]), UsedName(curried,[Default]), UsedName(productPrefix,[Default]), UsedName(tupled,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(copy$default$2,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(rName,[Default]), UsedName(getClass,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(unapply,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(join,[Default]), UsedName(apply,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(copy$default$3,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(r,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.dist_db.join)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> by member reference: Set(scalation.dist_db.RelDBMaster)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.GraphSimCARTest5...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.GraphSimCARTest5)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.GraphSimCARTest5)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.GraphSimCARTest5,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(GraphSimCARTest5,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.GraphSimCARTest5 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(GraphSimCARTest5,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.GraphSimCARTest5)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graphalytics.TightSim2...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graphalytics.TightSim2)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graphalytics.TightSim2)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graphalytics.TightSim2,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(test$default$2,[Default]), UsedName(calculateTotalEdges,[Default]), UsedName(overlaps,[Default]), UsedName(hashCode,[Default]), UsedName(selectivityCriteria,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(calculateBallDiameterMetrics,[Default]), UsedName(isInstanceOf,[Default]), UsedName(bijections,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(disjoint,[Default]), UsedName($asInstanceOf,[Default]), UsedName(TightSim2,[Default]), UsedName(!=,[Default]), UsedName(qRange,[Default]), UsedName(notifyAll,[Default]), UsedName(SELF_LOOPS,[Default]), UsedName(getClass,[Default]), UsedName(LIMIT,[Default]), UsedName(scalation;graphalytics;TightSim2;init;,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(feasibleMates,[Default]), UsedName(calculateTotalVertices,[Default]), UsedName(refine,[Default]), UsedName(CHECK,[Default]), UsedName(mappings2,[Default]), UsedName(synchronized,[Default]), UsedName(dualFilter,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(test,[Default]), UsedName(showMappings,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(filterGraph,[Default]), UsedName(prune,[Default]), UsedName(mappings,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.graphalytics.TightSim2 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(test$default$2,[Default]), UsedName(calculateTotalEdges,[Default]), UsedName(overlaps,[Default]), UsedName(hashCode,[Default]), UsedName(selectivityCriteria,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(calculateBallDiameterMetrics,[Default]), UsedName(isInstanceOf,[Default]), UsedName(bijections,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(disjoint,[Default]), UsedName($asInstanceOf,[Default]), UsedName(TightSim2,[Default]), UsedName(!=,[Default]), UsedName(qRange,[Default]), UsedName(notifyAll,[Default]), UsedName(SELF_LOOPS,[Default]), UsedName(getClass,[Default]), UsedName(LIMIT,[Default]), UsedName(scalation;graphalytics;TightSim2;init;,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(feasibleMates,[Default]), UsedName(calculateTotalVertices,[Default]), UsedName(refine,[Default]), UsedName(CHECK,[Default]), UsedName(mappings2,[Default]), UsedName(synchronized,[Default]), UsedName(dualFilter,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(test,[Default]), UsedName(showMappings,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(filterGraph,[Default]), UsedName(prune,[Default]), UsedName(mappings,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graphalytics.TightSim2)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.MinSpanningTreeTest3...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.MinSpanningTreeTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.MinSpanningTreeTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.MinSpanningTreeTest3,ModifiedNames(changes = UsedName(MinSpanningTreeTest3,[Default]), UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(st,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.MinSpanningTreeTest3 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(MinSpanningTreeTest3,[Default]), UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(st,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.MinSpanningTreeTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.columnar_db.MM_RelationTest4...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.columnar_db.MM_RelationTest4)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.columnar_db.MM_RelationTest4)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.columnar_db.MM_RelationTest4,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(mat,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(MM_RelationTest4,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(vec,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.columnar_db.MM_RelationTest4 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(mat,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(MM_RelationTest4,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(vec,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.columnar_db.MM_RelationTest4)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.distributed_db.join...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.distributed_db.join)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.distributed_db.join)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.distributed_db.RelationDBMaster: Set(UsedName(isInstanceOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(==,[Default]), UsedName(join,[Default]), UsedName(apply,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(r,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.distributed_db.join,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(copy$default$1,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(canEqual,[Default]), UsedName(curried,[Default]), UsedName(scalation;distributed_db;join;init;,[Default]), UsedName(productPrefix,[Default]), UsedName(tupled,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(copy$default$2,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(unapply,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(join,[Default]), UsedName(apply,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(r,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 2 classes due to The scalation.distributed_db.join has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(copy$default$1,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(canEqual,[Default]), UsedName(curried,[Default]), UsedName(scalation;distributed_db;join;init;,[Default]), UsedName(productPrefix,[Default]), UsedName(tupled,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(copy$default$2,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(unapply,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(join,[Default]), UsedName(apply,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(r,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.distributed_db.join)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> by member reference: Set(scalation.distributed_db.RelationDBMaster)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.MTightSimTest4...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.MTightSimTest4)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.MTightSimTest4)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.MTightSimTest4,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(MTightSimTest4,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.MTightSimTest4 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(MTightSimTest4,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.MTightSimTest4)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graphalytics.GraphGen...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graphalytics.GraphGen)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graphalytics.GraphGen)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graphalytics.GraphGen,ModifiedNames(changes = UsedName(genRandomGraph_PowLabels$default$4,[Default]), UsedName(equals,[Default]), UsedName(genPowerLawGraph_PowLabels$default$6,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(genRandomGraph,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(extractSubgraph,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(genRandomGraph_PowLabels,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(genBFSQuery$default$5,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(genPowerLawGraph$default$5,[Default]), UsedName(extractSubgraph$default$4,[Default]), UsedName(extractSubgraph$default$3,[Default]), UsedName(synchronized,[Default]), UsedName(genPowerLawGraph$default$6,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(genRandomConnectedGraph,[Default]), UsedName(genPowerLawGraph_PowLabels,[Default]), UsedName(genRandomConnectedGraph$default$4,[Default]), UsedName(wait,[Default]), UsedName(genRandomGraph$default$5,[Default]), UsedName(genRandomGraph_PowLabels$default$5,[Default]), UsedName(genPowerLawGraph,[Default]), UsedName(genBFSQuery$default$4,[Default]), UsedName(ne,[Default]), UsedName(genPowerLawGraph_PowLabels$default$5,[Default]), UsedName(genRandomGraph$default$4,[Default]), UsedName(genRandomConnectedGraph$default$5,[Default]), UsedName(genBFSQuery,[Default]), UsedName(GraphGen,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.graphalytics.GraphGen has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(genRandomGraph_PowLabels$default$4,[Default]), UsedName(equals,[Default]), UsedName(genPowerLawGraph_PowLabels$default$6,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(genRandomGraph,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(extractSubgraph,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(genRandomGraph_PowLabels,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(genBFSQuery$default$5,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(genPowerLawGraph$default$5,[Default]), UsedName(extractSubgraph$default$4,[Default]), UsedName(extractSubgraph$default$3,[Default]), UsedName(synchronized,[Default]), UsedName(genPowerLawGraph$default$6,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(genRandomConnectedGraph,[Default]), UsedName(genPowerLawGraph_PowLabels,[Default]), UsedName(genRandomConnectedGraph$default$4,[Default]), UsedName(wait,[Default]), UsedName(genRandomGraph$default$5,[Default]), UsedName(genRandomGraph_PowLabels$default$5,[Default]), UsedName(genPowerLawGraph,[Default]), UsedName(genBFSQuery$default$4,[Default]), UsedName(ne,[Default]), UsedName(genPowerLawGraph_PowLabels$default$5,[Default]), UsedName(genRandomGraph$default$4,[Default]), UsedName(genRandomConnectedGraph$default$5,[Default]), UsedName(genBFSQuery,[Default]), UsedName(GraphGen,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graphalytics.GraphGen)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.MGraphSimXTest4...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.MGraphSimXTest4)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.MGraphSimXTest4)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.MGraphSimXTest4,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(MGraphSimXTest4,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.MGraphSimXTest4 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(MGraphSimXTest4,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.MGraphSimXTest4)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graphalytics.GraphqlOpt...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graphalytics.GraphqlOpt)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graphalytics.GraphqlOpt)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graphalytics.GraphqlOpt,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(scalation;graphalytics;GraphqlOpt;init;,[Default]), UsedName(clone,[Default]), UsedName(isInstanceOf,[Default]), UsedName(bijections,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(getNeighborProfile,[Default]), UsedName(contains,[Default]), UsedName(getSearchOrder,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(feasibleMates,[Default]), UsedName(synchronized,[Default]), UsedName(GraphqlOpt,[Default]), UsedName(toString,[Default]), UsedName(getNeighbors,[Default]), UsedName(neighborProfilePruning,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(check,[Default]), UsedName(ne,[Default]), UsedName(getMatches,[Default]), UsedName(search,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.graphalytics.GraphqlOpt has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(scalation;graphalytics;GraphqlOpt;init;,[Default]), UsedName(clone,[Default]), UsedName(isInstanceOf,[Default]), UsedName(bijections,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(getNeighborProfile,[Default]), UsedName(contains,[Default]), UsedName(getSearchOrder,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(feasibleMates,[Default]), UsedName(synchronized,[Default]), UsedName(GraphqlOpt,[Default]), UsedName(toString,[Default]), UsedName(getNeighbors,[Default]), UsedName(neighborProfilePruning,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(check,[Default]), UsedName(ne,[Default]), UsedName(getMatches,[Default]), UsedName(search,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graphalytics.GraphqlOpt)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.MGraphSim2...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.MGraphSim2)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.MGraphSim2)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.MGraphSim2,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(test$default$2,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(feasibleMatesW,[Default]), UsedName(isInstanceOf,[Default]), UsedName(bijections,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(MGraphSim2,[Default]), UsedName(disjoint,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(qRange,[Default]), UsedName(notifyAll,[Default]), UsedName(SELF_LOOPS,[Default]), UsedName(getClass,[Default]), UsedName(LIMIT,[Default]), UsedName(gRange,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(feasibleMates,[Default]), UsedName(scalation;graph_db;pattern_matching;MGraphSim2;init;,[Default]), UsedName(CHECK,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(test,[Default]), UsedName(showMappings,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(countMappings,[Default]), UsedName(filterGraph,[Default]), UsedName(prune,[Default]), UsedName(mappings,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.MGraphSim2 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(test$default$2,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(feasibleMatesW,[Default]), UsedName(isInstanceOf,[Default]), UsedName(bijections,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(MGraphSim2,[Default]), UsedName(disjoint,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(qRange,[Default]), UsedName(notifyAll,[Default]), UsedName(SELF_LOOPS,[Default]), UsedName(getClass,[Default]), UsedName(LIMIT,[Default]), UsedName(gRange,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(feasibleMates,[Default]), UsedName(scalation;graph_db;pattern_matching;MGraphSim2;init;,[Default]), UsedName(CHECK,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(test,[Default]), UsedName(showMappings,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(countMappings,[Default]), UsedName(filterGraph,[Default]), UsedName(prune,[Default]), UsedName(mappings,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.MGraphSim2)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.image.KLTTest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.image.KLTTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.image.KLTTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.image.KLTTest,ModifiedNames(changes = UsedName(klt,[Default]), UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(b,[Default]), UsedName(w,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(KLTTest,[Default]), UsedName(synchronized,[Default]), UsedName(u,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(lim,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(a,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.image.KLTTest has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(klt,[Default]), UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(b,[Default]), UsedName(w,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(KLTTest,[Default]), UsedName(synchronized,[Default]), UsedName(u,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(lim,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(a,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.image.KLTTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.DualSim...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.DualSim)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.DualSim)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.DualSim,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(test$default$2,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(feasibleMatesW,[Default]), UsedName(isInstanceOf,[Default]), UsedName(bijections,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(disjoint,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(qRange,[Default]), UsedName(notifyAll,[Default]), UsedName(SELF_LOOPS,[Default]), UsedName(getClass,[Default]), UsedName(LIMIT,[Default]), UsedName(gRange,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(feasibleMates,[Default]), UsedName(CHECK,[Default]), UsedName(DualSim,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(test,[Default]), UsedName(showMappings,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(countMappings,[Default]), UsedName(filterGraph,[Default]), UsedName(prune,[Default]), UsedName(mappings,[Default]), UsedName(scalation;graph_db;pattern_matching;DualSim;init;,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.DualSim has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(test$default$2,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(feasibleMatesW,[Default]), UsedName(isInstanceOf,[Default]), UsedName(bijections,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(disjoint,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(qRange,[Default]), UsedName(notifyAll,[Default]), UsedName(SELF_LOOPS,[Default]), UsedName(getClass,[Default]), UsedName(LIMIT,[Default]), UsedName(gRange,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(feasibleMates,[Default]), UsedName(CHECK,[Default]), UsedName(DualSim,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(test,[Default]), UsedName(showMappings,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(countMappings,[Default]), UsedName(filterGraph,[Default]), UsedName(prune,[Default]), UsedName(mappings,[Default]), UsedName(scalation;graph_db;pattern_matching;DualSim;init;,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.DualSim)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.dist_db.nameAll...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.dist_db.nameAll)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.dist_db.nameAll)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.dist_db.nameAll,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(canEqual,[Default]), UsedName(productPrefix,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(productArity,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(nameAll,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.dist_db.nameAll has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(canEqual,[Default]), UsedName(productPrefix,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(productArity,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(nameAll,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.dist_db.nameAll)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.GraphMetricsTest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.GraphMetricsTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.GraphMetricsTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.GraphMetricsTest,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(dia,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(ctr,[Default]), UsedName(!=,[Default]), UsedName(GraphMetricsTest,[Default]), UsedName(notifyAll,[Default]), UsedName(bfs,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(rd,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.GraphMetricsTest has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(dia,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(ctr,[Default]), UsedName(!=,[Default]), UsedName(GraphMetricsTest,[Default]), UsedName(notifyAll,[Default]), UsedName(bfs,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(rd,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.GraphMetricsTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graphalytics.DualSim2Test3...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graphalytics.DualSim2Test3)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graphalytics.DualSim2Test3)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graphalytics.DualSim2Test3,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(qAvDegree,[Default]), UsedName(qSize,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(gAvDegree,[Default]), UsedName(nLabels,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(gSize,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(DualSim2Test3,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graphalytics.DualSim2Test3 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(qAvDegree,[Default]), UsedName(qSize,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(gAvDegree,[Default]), UsedName(nLabels,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(gSize,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(DualSim2Test3,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graphalytics.DualSim2Test3)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.GraphSimTest5...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.GraphSimTest5)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.GraphSimTest5)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.GraphSimTest5,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(GraphSimTest5,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.GraphSimTest5 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(GraphSimTest5,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.GraphSimTest5)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.MDualSimCARTest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.MDualSimCARTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.MDualSimCARTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.MDualSimCARTest,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(MDualSimCARTest,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.MDualSimCARTest has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(MDualSimCARTest,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.MDualSimCARTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.dist_db.addIn...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.dist_db.addIn)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.dist_db.addIn)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.dist_db.RelDBWorker: Set(UsedName(t,[Default]), UsedName(isInstanceOf,[Default]), UsedName(name,[Default]), UsedName(asInstanceOf,[Default]), UsedName(==,[Default]), UsedName(apply,[Default]), UsedName(addIn,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.dist_db.addIn,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(copy$default$1,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(canEqual,[Default]), UsedName(curried,[Default]), UsedName(productPrefix,[Default]), UsedName(tupled,[Default]), UsedName(t,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(name,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(copy$default$2,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(unapply,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(apply,[Default]), UsedName(addIn,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(scalation;dist_db;addIn;init;,[Default]), UsedName(ne,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 2 classes due to The scalation.dist_db.addIn has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(copy$default$1,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(canEqual,[Default]), UsedName(curried,[Default]), UsedName(productPrefix,[Default]), UsedName(tupled,[Default]), UsedName(t,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(name,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(copy$default$2,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(unapply,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(apply,[Default]), UsedName(addIn,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(scalation;dist_db;addIn;init;,[Default]), UsedName(ne,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.dist_db.addIn)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> by member reference: Set(scalation.dist_db.RelDBWorker)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.graph_algebra.MuGraphSimTest2...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.graph_algebra.MuGraphSimTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.graph_algebra.MuGraphSimTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.graph_algebra.MuGraphSimTest2,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(matcher,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(MuGraphSimTest2,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.graph_algebra.MuGraphSimTest2 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(matcher,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(MuGraphSimTest2,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.graph_algebra.MuGraphSimTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.MGraphSimCARTest6...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.MGraphSimCARTest6)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.MGraphSimCARTest6)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.MGraphSimCARTest6,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(MGraphSimCARTest6,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.MGraphSimCARTest6 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(MGraphSimCARTest6,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.MGraphSimCARTest6)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.GraphSim2Test3...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.GraphSim2Test3)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.GraphSim2Test3)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.GraphSim2Test3,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(GraphSim2Test3,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.GraphSim2Test3 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(GraphSim2Test3,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.GraphSim2Test3)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.DualIso...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.DualIso)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.DualIso)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.DualIso,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(test$default$2,[Default]), UsedName(setLimit,[Default]), UsedName(hashCode,[Default]), UsedName(DualIso,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(feasibleMatesW,[Default]), UsedName(numMatches,[Default]), UsedName(isInstanceOf,[Default]), UsedName(bijections,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(disjoint,[Default]), UsedName($asInstanceOf,[Default]), UsedName(scalation;graph_db;pattern_matching;DualIso;init;,[Default]), UsedName(!=,[Default]), UsedName(qRange,[Default]), UsedName(notifyAll,[Default]), UsedName(SELF_LOOPS,[Default]), UsedName(getClass,[Default]), UsedName(LIMIT,[Default]), UsedName(gRange,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(feasibleMates,[Default]), UsedName(CHECK,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(test,[Default]), UsedName(showMappings,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(countMappings,[Default]), UsedName(filterGraph,[Default]), UsedName(prune,[Default]), UsedName(mappings,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.DualIso has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(test$default$2,[Default]), UsedName(setLimit,[Default]), UsedName(hashCode,[Default]), UsedName(DualIso,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(feasibleMatesW,[Default]), UsedName(numMatches,[Default]), UsedName(isInstanceOf,[Default]), UsedName(bijections,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(disjoint,[Default]), UsedName($asInstanceOf,[Default]), UsedName(scalation;graph_db;pattern_matching;DualIso;init;,[Default]), UsedName(!=,[Default]), UsedName(qRange,[Default]), UsedName(notifyAll,[Default]), UsedName(SELF_LOOPS,[Default]), UsedName(getClass,[Default]), UsedName(LIMIT,[Default]), UsedName(gRange,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(feasibleMates,[Default]), UsedName(CHECK,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(test,[Default]), UsedName(showMappings,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(countMappings,[Default]), UsedName(filterGraph,[Default]), UsedName(prune,[Default]), UsedName(mappings,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.DualIso)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graphalytics.DualSimTest2...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graphalytics.DualSimTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graphalytics.DualSimTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graphalytics.DualSimTest2,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(DualSimTest2,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graphalytics.DualSimTest2 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(DualSimTest2,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graphalytics.DualSimTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.spatial.Vector2DTest2...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.spatial.Vector2DTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.spatial.Vector2DTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.spatial.Vector2DTest2,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(Vector2DTest2,[Default]), UsedName(locs,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.spatial.Vector2DTest2 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(Vector2DTest2,[Default]), UsedName(locs,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.spatial.Vector2DTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.MGraphSimXTest3...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.MGraphSimXTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.MGraphSimXTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.MGraphSimXTest3,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(MGraphSimXTest3,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.MGraphSimXTest3 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(MGraphSimXTest3,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.MGraphSimXTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.graph_algebra.MuStrictSimTest2...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.graph_algebra.MuStrictSimTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.graph_algebra.MuStrictSimTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.graph_algebra.MuStrictSimTest2,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(MuStrictSimTest2,[Default]), UsedName(matcher,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.graph_algebra.MuStrictSimTest2 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(MuStrictSimTest2,[Default]), UsedName(matcher,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.graph_algebra.MuStrictSimTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.TreeNode...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.TreeNode)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.TreeNode)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.TreeNode,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(scalation;graph_db;TreeNode;init;,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(loc,[Default]), UsedName(clone,[Default]), UsedName(rightSibling,[Default]), UsedName(label,[Default]), UsedName(leftSibling,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(isLeaf,[Default]), UsedName(getClass,[Default]), UsedName(ord,[Default]), UsedName(colr,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(nid,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(isAncestor,[Default]), UsedName(ne,[Default]), UsedName(TreeNode,[Default]), UsedName(child,[Default]), UsedName(parent,[Default]), UsedName(lev,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.graph_db.TreeNode has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(scalation;graph_db;TreeNode;init;,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(loc,[Default]), UsedName(clone,[Default]), UsedName(rightSibling,[Default]), UsedName(label,[Default]), UsedName(leftSibling,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(isLeaf,[Default]), UsedName(getClass,[Default]), UsedName(ord,[Default]), UsedName(colr,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(nid,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(isAncestor,[Default]), UsedName(ne,[Default]), UsedName(TreeNode,[Default]), UsedName(child,[Default]), UsedName(parent,[Default]), UsedName(lev,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.TreeNode)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.MGraphSimTest3...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.MGraphSimTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.MGraphSimTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.MGraphSimTest3,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(MGraphSimTest3,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.MGraphSimTest3 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(MGraphSimTest3,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.MGraphSimTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.columnar_db.Table...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.columnar_db.Table)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.columnar_db.Table)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.dist_db.RelDBMaster: Set(UsedName(union,[Default]), UsedName(intersect,[Default]), UsedName(delete,[Default]), UsedName(show,[Default]), UsedName(-,[Default]), UsedName(isInstanceOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(show$default$1,[Default]), UsedName(select,[Default]), UsedName(product,[Default]), UsedName(==,[Default]), UsedName(Table,[Default]), UsedName(join,[Default]), UsedName(rows,[Default]), UsedName(minus,[Default]), UsedName(indices,[Default]), UsedName(ne,[Default]), UsedName(add,[Default]), UsedName(project,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.dist_db.RelDBMasterTest3: Set(UsedName(union,[Default]), UsedName(show,[Default]), UsedName(-,[Default]), UsedName(show$default$1,[Default]), UsedName(Table,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.dist_db.RelDBWorker: Set(UsedName(intersect,[Default]), UsedName(-,[Default]), UsedName(isInstanceOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(select,[Default]), UsedName(product,[Default]), UsedName(==,[Default]), UsedName(Table,[Default]), UsedName(minus,[Default]), UsedName(add,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.preprocessing.replaceMissingValues: Set(UsedName($isInstanceOf,[Default]), UsedName(isInstanceOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(==,[Default]), UsedName(Table,[Default]), UsedName(toString,[Default]), UsedName(eq,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.distributed_db.RelationDBWorker: Set(UsedName(union,[Default]), UsedName(intersect,[Default]), UsedName(-,[Default]), UsedName(isInstanceOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(select,[Default]), UsedName(product,[Default]), UsedName(==,[Default]), UsedName(Table,[Default]), UsedName(join,[Default]), UsedName(minus,[Default]), UsedName(add,[Default]), UsedName(project,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.preprocessing.replaceMissingStrings: Set(UsedName($isInstanceOf,[Default]), UsedName(isInstanceOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(==,[Default]), UsedName(Table,[Default]), UsedName(toString,[Default]), UsedName(eq,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.preprocessing.PreProcessingMaster: Set(UsedName(isInstanceOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(==,[Default]), UsedName(Table,[Default]), UsedName(project,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.distributed_db.RelationDBMaster: Set(UsedName(union,[Default]), UsedName(intersect,[Default]), UsedName(show,[Default]), UsedName(-,[Default]), UsedName(isInstanceOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(show$default$1,[Default]), UsedName(select,[Default]), UsedName(product,[Default]), UsedName(==,[Default]), UsedName(Table,[Default]), UsedName(join,[Default]), UsedName(minus,[Default]), UsedName(ne,[Default]), UsedName(add,[Default]), UsedName(project,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.columnar_db.Table,ModifiedNames(changes = UsedName(σ,[Default]), UsedName(equals,[Default]), UsedName(union,[Default]), UsedName(pisigmaR,[Default]), UsedName(reverseOrderBy,[Default]), UsedName(hashCode,[Default]), UsedName(leftJoin,[Default]), UsedName(row,[Default]), UsedName(writeJSON,[Default]), UsedName(eproject,[Default]), UsedName($isInstanceOf,[Default]), UsedName(sigmaD,[Default]), UsedName(clone,[Default]), UsedName(intersect,[Default]), UsedName(delete,[Default]), UsedName(show,[Default]), UsedName(sigmaR,[Default]), UsedName(uncompress,[Default]), UsedName(disambiguate,[Default]), UsedName(-,[Default]), UsedName(ωω,[Default]), UsedName(groupBy,[Default]), UsedName(selectL,[Default]), UsedName(isInstanceOf,[Default]), UsedName(π,[Default]), UsedName(finalize,[Default]), UsedName(⋈,[Default]), UsedName(asInstanceOf,[Default]), UsedName(update,[Default]), UsedName(pisigmaI,[Default]), UsedName($asInstanceOf,[Default]), UsedName(cols,[Default]), UsedName(pi,[Default]), UsedName(!=,[Default]), UsedName(sigmaC,[Default]), UsedName(notifyAll,[Default]), UsedName(show$default$1,[Default]), UsedName(×,[Default]), UsedName(epi,[Default]), UsedName(getClass,[Default]), UsedName(⋉$default$1,[Default]), UsedName(select,[Default]), UsedName(product,[Default]), UsedName(selectS,[Default]), UsedName(ζζ,[Default]), UsedName(contains,[Default]), UsedName(colNames,[Default]), UsedName(⋊,[Default]), UsedName(sigmaQ,[Default]), UsedName(compress,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(Table,[Default]), UsedName(join,[Default]), UsedName(π$default$2,[Default]), UsedName(colsMap,[Default]), UsedName(orderBy,[Default]), UsedName(selectAt,[Default]), UsedName(rows,[Default]), UsedName(sigmaS,[Default]), UsedName(writeCSV,[Default]), UsedName(pisigmaL,[Default]), UsedName(selectI,[Default]), UsedName(selectC,[Default]), UsedName(column,[Default]), UsedName(selectD,[Default]), UsedName(synchronized,[Default]), UsedName(pisigmaS,[Default]), UsedName(Π,[Default]), UsedName(toString,[Default]), UsedName(sigmaL,[Default]), UsedName(##,[Default]), UsedName(minus,[Default]), UsedName(⋂,[Default]), UsedName(pisigmaD,[Default]), UsedName(sigmaI,[Default]), UsedName(wait,[Default]), UsedName(⋃,[Default]), UsedName(uniq_union,[Default]), UsedName(sigma,[Default]), UsedName(rename,[Default]), UsedName(indices,[Default]), UsedName(ne,[Default]), UsedName(domains,[Default]), UsedName(leftJoin$default$1,[Default]), UsedName(pisigmaQ,[Default]), UsedName(pi$default$2,[Default]), UsedName(incompatible,[Default]), UsedName(γ,[Default]), UsedName(project$default$2,[Default]), UsedName(save,[Default]), UsedName(selectQ,[Default]), UsedName(add,[Default]), UsedName(columns,[Default]), UsedName(⋉,[Default]), UsedName(project,[Default]), UsedName(selectR,[Default]), UsedName(ζ,[Default]), UsedName(pisigmaC,[Default]), UsedName(ω,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]), UsedName(rightJoin,[Default]))) invalidates 9 classes due to The scalation.columnar_db.Table has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(σ,[Default]), UsedName(equals,[Default]), UsedName(union,[Default]), UsedName(pisigmaR,[Default]), UsedName(reverseOrderBy,[Default]), UsedName(hashCode,[Default]), UsedName(leftJoin,[Default]), UsedName(row,[Default]), UsedName(writeJSON,[Default]), UsedName(eproject,[Default]), UsedName($isInstanceOf,[Default]), UsedName(sigmaD,[Default]), UsedName(clone,[Default]), UsedName(intersect,[Default]), UsedName(delete,[Default]), UsedName(show,[Default]), UsedName(sigmaR,[Default]), UsedName(uncompress,[Default]), UsedName(disambiguate,[Default]), UsedName(-,[Default]), UsedName(ωω,[Default]), UsedName(groupBy,[Default]), UsedName(selectL,[Default]), UsedName(isInstanceOf,[Default]), UsedName(π,[Default]), UsedName(finalize,[Default]), UsedName(⋈,[Default]), UsedName(asInstanceOf,[Default]), UsedName(update,[Default]), UsedName(pisigmaI,[Default]), UsedName($asInstanceOf,[Default]), UsedName(cols,[Default]), UsedName(pi,[Default]), UsedName(!=,[Default]), UsedName(sigmaC,[Default]), UsedName(notifyAll,[Default]), UsedName(show$default$1,[Default]), UsedName(×,[Default]), UsedName(epi,[Default]), UsedName(getClass,[Default]), UsedName(⋉$default$1,[Default]), UsedName(select,[Default]), UsedName(product,[Default]), UsedName(selectS,[Default]), UsedName(ζζ,[Default]), UsedName(contains,[Default]), UsedName(colNames,[Default]), UsedName(⋊,[Default]), UsedName(sigmaQ,[Default]), UsedName(compress,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(Table,[Default]), UsedName(join,[Default]), UsedName(π$default$2,[Default]), UsedName(colsMap,[Default]), UsedName(orderBy,[Default]), UsedName(selectAt,[Default]), UsedName(rows,[Default]), UsedName(sigmaS,[Default]), UsedName(writeCSV,[Default]), UsedName(pisigmaL,[Default]), UsedName(selectI,[Default]), UsedName(selectC,[Default]), UsedName(column,[Default]), UsedName(selectD,[Default]), UsedName(synchronized,[Default]), UsedName(pisigmaS,[Default]), UsedName(Π,[Default]), UsedName(toString,[Default]), UsedName(sigmaL,[Default]), UsedName(##,[Default]), UsedName(minus,[Default]), UsedName(⋂,[Default]), UsedName(pisigmaD,[Default]), UsedName(sigmaI,[Default]), UsedName(wait,[Default]), UsedName(⋃,[Default]), UsedName(uniq_union,[Default]), UsedName(sigma,[Default]), UsedName(rename,[Default]), UsedName(indices,[Default]), UsedName(ne,[Default]), UsedName(domains,[Default]), UsedName(leftJoin$default$1,[Default]), UsedName(pisigmaQ,[Default]), UsedName(pi$default$2,[Default]), UsedName(incompatible,[Default]), UsedName(γ,[Default]), UsedName(project$default$2,[Default]), UsedName(save,[Default]), UsedName(selectQ,[Default]), UsedName(add,[Default]), UsedName(columns,[Default]), UsedName(⋉,[Default]), UsedName(project,[Default]), UsedName(selectR,[Default]), UsedName(ζ,[Default]), UsedName(pisigmaC,[Default]), UsedName(ω,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]), UsedName(rightJoin,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.columnar_db.Table)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> by member reference: Set(scalation.dist_db.RelDBMaster, scalation.dist_db.RelDBMasterTest3, scalation.dist_db.RelDBWorker, scalation.preprocessing.replaceMissingValues, scalation.distributed_db.RelationDBWorker, scalation.preprocessing.replaceMissingStrings, scalation.preprocessing.PreProcessingMaster, scalation.distributed_db.RelationDBMaster)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.MDualSim2Test5...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.MDualSim2Test5)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.MDualSim2Test5)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.MDualSim2Test5,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(MDualSim2Test5,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.MDualSim2Test5 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(MDualSim2Test5,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.MDualSim2Test5)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.dist_db.createIn...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.dist_db.createIn)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.dist_db.createIn)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.dist_db.RelDBWorker: Set(UsedName(isInstanceOf,[Default]), UsedName(name,[Default]), UsedName(asInstanceOf,[Default]), UsedName(colname,[Default]), UsedName(key,[Default]), UsedName(domain,[Default]), UsedName(==,[Default]), UsedName(createIn,[Default]), UsedName(apply,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.dist_db.createIn,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(copy$default$1,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(canEqual,[Default]), UsedName(curried,[Default]), UsedName(productPrefix,[Default]), UsedName(tupled,[Default]), UsedName(scalation;dist_db;createIn;init;,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(name,[Default]), UsedName(asInstanceOf,[Default]), UsedName(colname,[Default]), UsedName($asInstanceOf,[Default]), UsedName(key,[Default]), UsedName(copy$default$2,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(domain,[Default]), UsedName(getClass,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(unapply,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(createIn,[Default]), UsedName(copy$default$4,[Default]), UsedName(apply,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(copy$default$3,[Default]), UsedName(ne,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 2 classes due to The scalation.dist_db.createIn has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(copy$default$1,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(canEqual,[Default]), UsedName(curried,[Default]), UsedName(productPrefix,[Default]), UsedName(tupled,[Default]), UsedName(scalation;dist_db;createIn;init;,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(name,[Default]), UsedName(asInstanceOf,[Default]), UsedName(colname,[Default]), UsedName($asInstanceOf,[Default]), UsedName(key,[Default]), UsedName(copy$default$2,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(domain,[Default]), UsedName(getClass,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(unapply,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(createIn,[Default]), UsedName(copy$default$4,[Default]), UsedName(apply,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(copy$default$3,[Default]), UsedName(ne,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.dist_db.createIn)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> by member reference: Set(scalation.dist_db.RelDBWorker)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.MGraphSimXTest7...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.MGraphSimXTest7)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.MGraphSimXTest7)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.MGraphSimXTest7,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(MGraphSimXTest7,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.MGraphSimXTest7 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(MGraphSimXTest7,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.MGraphSimXTest7)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.DualSim2Test4...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.DualSim2Test4)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.DualSim2Test4)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.DualSim2Test4,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(DualSim2Test4,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.DualSim2Test4 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(DualSim2Test4,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.DualSim2Test4)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.BiconnectedCompTest2...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.BiconnectedCompTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.BiconnectedCompTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.BiconnectedCompTest2,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(BiconnectedCompTest2,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(g1,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(bcc,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.BiconnectedCompTest2 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(BiconnectedCompTest2,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(g1,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(bcc,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.BiconnectedCompTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.distributed_db.unionIn...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.distributed_db.unionIn)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.distributed_db.unionIn)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.distributed_db.RelationDBMaster: Set(UsedName(isInstanceOf,[Default]), UsedName(unionIn,[Default]), UsedName(asInstanceOf,[Default]), UsedName(==,[Default]), UsedName(apply,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(r,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.distributed_db.RelationDBWorker: Set(UsedName(isInstanceOf,[Default]), UsedName(unionIn,[Default]), UsedName(asInstanceOf,[Default]), UsedName(uc,[Default]), UsedName(==,[Default]), UsedName(apply,[Default]), UsedName(q,[Default]), UsedName(r,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.distributed_db.unionIn,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(copy$default$1,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(canEqual,[Default]), UsedName(curried,[Default]), UsedName(productPrefix,[Default]), UsedName(tupled,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(unionIn,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(copy$default$2,[Default]), UsedName(uc,[Default]), UsedName(!=,[Default]), UsedName(scalation;distributed_db;unionIn;init;,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(unapply,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(apply,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(copy$default$3,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(r,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 3 classes due to The scalation.distributed_db.unionIn has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(copy$default$1,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(canEqual,[Default]), UsedName(curried,[Default]), UsedName(productPrefix,[Default]), UsedName(tupled,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(unionIn,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(copy$default$2,[Default]), UsedName(uc,[Default]), UsedName(!=,[Default]), UsedName(scalation;distributed_db;unionIn;init;,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(unapply,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(apply,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(copy$default$3,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(r,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.distributed_db.unionIn)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> by member reference: Set(scalation.distributed_db.RelationDBMaster, scalation.distributed_db.RelationDBWorker)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.TopSortTest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.TopSortTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.TopSortTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.TopSortTest,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(pg2,[Default]), UsedName(clone,[Default]), UsedName(TopSortTest,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(pg1,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.TopSortTest has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(pg2,[Default]), UsedName(clone,[Default]), UsedName(TopSortTest,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(pg1,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.TopSortTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graphalytics.StrictSim2Test2...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graphalytics.StrictSim2Test2)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graphalytics.StrictSim2Test2)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graphalytics.StrictSim2Test2,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(StrictSim2Test2,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graphalytics.StrictSim2Test2 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(StrictSim2Test2,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graphalytics.StrictSim2Test2)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.test.TightPattern_STest3...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.test.TightPattern_STest3)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.test.TightPattern_STest3)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.test.TightPattern_STest3,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(gLabels,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(gDegree,[Default]), UsedName(inverse,[Default]), UsedName(UNIFORM,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(qSize,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(qDegree,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(TightPattern_STest3,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.test.TightPattern_STest3 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(gLabels,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(gDegree,[Default]), UsedName(inverse,[Default]), UsedName(UNIFORM,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(qSize,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(qDegree,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(TightPattern_STest3,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.test.TightPattern_STest3)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.Cycle...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.Cycle)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.Cycle)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.Cycle,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(Cycle,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(hasCycle,[Default]), UsedName(ne,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.graph_db.Cycle has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(Cycle,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(hasCycle,[Default]), UsedName(ne,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.Cycle)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.BiconnectedComp...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.BiconnectedComp)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.BiconnectedComp)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.BiconnectedComp,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(copy$default$1,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(BiconnectedComp,[Default]), UsedName(canEqual,[Default]), UsedName(productPrefix,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(scalation;graph_db;BiconnectedComp;init;,[Default]), UsedName(cutPoints,[Default]), UsedName(assembleBlockTree,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(findBlocks,[Default]), UsedName(g_,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.BiconnectedComp has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(copy$default$1,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(BiconnectedComp,[Default]), UsedName(canEqual,[Default]), UsedName(productPrefix,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(scalation;graph_db;BiconnectedComp;init;,[Default]), UsedName(cutPoints,[Default]), UsedName(assembleBlockTree,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(findBlocks,[Default]), UsedName(g_,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.BiconnectedComp)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.dist_db.minus...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.dist_db.minus)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.dist_db.minus)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.dist_db.RelDBMaster: Set(UsedName(isInstanceOf,[Default]), UsedName(name,[Default]), UsedName(asInstanceOf,[Default]), UsedName(rName,[Default]), UsedName(==,[Default]), UsedName(apply,[Default]), UsedName(minus,[Default]), UsedName(name2,[Default]), UsedName(ne,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.dist_db.minus,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(copy$default$1,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(canEqual,[Default]), UsedName(curried,[Default]), UsedName(productPrefix,[Default]), UsedName(tupled,[Default]), UsedName(scalation;dist_db;minus;init;,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(name,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(copy$default$2,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(rName,[Default]), UsedName(getClass,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(unapply,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(apply,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(minus,[Default]), UsedName(wait,[Default]), UsedName(name2,[Default]), UsedName(copy$default$3,[Default]), UsedName(ne,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 2 classes due to The scalation.dist_db.minus has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(copy$default$1,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(canEqual,[Default]), UsedName(curried,[Default]), UsedName(productPrefix,[Default]), UsedName(tupled,[Default]), UsedName(scalation;dist_db;minus;init;,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(name,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(copy$default$2,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(rName,[Default]), UsedName(getClass,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(unapply,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(apply,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(minus,[Default]), UsedName(wait,[Default]), UsedName(name2,[Default]), UsedName(copy$default$3,[Default]), UsedName(ne,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.dist_db.minus)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> by member reference: Set(scalation.dist_db.RelDBMaster)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.spatial.Earth...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.spatial.Earth)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.spatial.Earth)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.spatial.Earth,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(equatorialRadius,[Default]), UsedName(isInstanceOf,[Default]), UsedName(miles2Meters,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(e1sq,[Default]), UsedName(getClass,[Default]), UsedName(polarRadius,[Default]), UsedName(k0,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(meters2Miles,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(meanRadius,[Default]), UsedName(meanRadiusEl,[Default]), UsedName(Earth,[Default]), UsedName(e,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.spatial.Earth has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(equatorialRadius,[Default]), UsedName(isInstanceOf,[Default]), UsedName(miles2Meters,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(e1sq,[Default]), UsedName(getClass,[Default]), UsedName(polarRadius,[Default]), UsedName(k0,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(meters2Miles,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(meanRadius,[Default]), UsedName(meanRadiusEl,[Default]), UsedName(Earth,[Default]), UsedName(e,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.spatial.Earth)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.dist_db.RelDBMasterTest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.dist_db.RelDBMasterTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.dist_db.RelDBMasterTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.dist_db.RelDBMasterTest,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(actorSystem,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(RelDBMasterTest,[Default]), UsedName(actor,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.dist_db.RelDBMasterTest has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(actorSystem,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(RelDBMasterTest,[Default]), UsedName(actor,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.dist_db.RelDBMasterTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graphalytics.GraphqlOptTest2...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graphalytics.GraphqlOptTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graphalytics.GraphqlOptTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graphalytics.GraphqlOptTest2,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(matcher,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(GraphqlOptTest2,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graphalytics.GraphqlOptTest2 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(matcher,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(GraphqlOptTest2,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graphalytics.GraphqlOptTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.Answers_g3...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.Answers_g3)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.Answers_g3)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.Answers_g3,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(Answers_g3,[Default]), UsedName(hashCode,[Default]), UsedName(phi3,[Default]), UsedName($isInstanceOf,[Default]), UsedName(phi4,[Default]), UsedName(clone,[Default]), UsedName(phi7,[Default]), UsedName(isInstanceOf,[Default]), UsedName(phi8,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(phi11,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(phi15,[Default]), UsedName(phi16,[Default]), UsedName(phi12,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.Answers_g3 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(Answers_g3,[Default]), UsedName(hashCode,[Default]), UsedName(phi3,[Default]), UsedName($isInstanceOf,[Default]), UsedName(phi4,[Default]), UsedName(clone,[Default]), UsedName(phi7,[Default]), UsedName(isInstanceOf,[Default]), UsedName(phi8,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(phi11,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(phi15,[Default]), UsedName(phi16,[Default]), UsedName(phi12,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.Answers_g3)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.dist_db.tableGenIn...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.dist_db.tableGenIn)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.dist_db.tableGenIn)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.dist_db.RelDBWorker: Set(UsedName(isInstanceOf,[Default]), UsedName(name,[Default]), UsedName(asInstanceOf,[Default]), UsedName(count,[Default]), UsedName(==,[Default]), UsedName(apply,[Default]), UsedName(tableGenIn,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.dist_db.tableGenIn,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(copy$default$1,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(canEqual,[Default]), UsedName(curried,[Default]), UsedName(productPrefix,[Default]), UsedName(tupled,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(name,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(scalation;dist_db;tableGenIn;init;,[Default]), UsedName(copy$default$2,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(count,[Default]), UsedName(unapply,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(apply,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(tableGenIn,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 2 classes due to The scalation.dist_db.tableGenIn has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(copy$default$1,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(canEqual,[Default]), UsedName(curried,[Default]), UsedName(productPrefix,[Default]), UsedName(tupled,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(name,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(scalation;dist_db;tableGenIn;init;,[Default]), UsedName(copy$default$2,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(count,[Default]), UsedName(unapply,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(apply,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(tableGenIn,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.dist_db.tableGenIn)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> by member reference: Set(scalation.dist_db.RelDBWorker)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.columnar_db.QuartileXOutlier...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.columnar_db.QuartileXOutlier)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.columnar_db.QuartileXOutlier)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.columnar_db.QuartileXOutlier,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(rmOutliers,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(DEBUG,[Default]), UsedName(ne,[Default]), UsedName(QuartileXOutlier,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.columnar_db.QuartileXOutlier has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(rmOutliers,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(DEBUG,[Default]), UsedName(ne,[Default]), UsedName(QuartileXOutlier,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.columnar_db.QuartileXOutlier)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graphalytics.GraphGenTest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graphalytics.GraphGenTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graphalytics.GraphGenTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graphalytics.GraphGenTest,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(GraphGenTest,[Default]), UsedName(!=,[Default]), UsedName(g1,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graphalytics.GraphGenTest has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(GraphGenTest,[Default]), UsedName(!=,[Default]), UsedName(g1,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graphalytics.GraphGenTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.MGraphGenTest7...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.MGraphGenTest7)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.MGraphGenTest7)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.MGraphGenTest7,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(MGraphGenTest7,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.MGraphGenTest7 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(MGraphGenTest7,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.MGraphGenTest7)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.MGraphIO...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.MGraphIO)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.MGraphIO)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.MGraphIO,ModifiedNames(changes = UsedName(write2IgraphFiles,[Default]), UsedName(equals,[Default]), UsedName(makeSet,[Default]), UsedName(apply$default$2,[Default]), UsedName(hashCode,[Default]), UsedName(read2Files,[Default]), UsedName(EXT,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(apply$default$3,[Default]), UsedName(MGraphIO,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(write,[Default]), UsedName(makeTuple,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(apply$default$4,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(read2Files$default$3,[Default]), UsedName(apply,[Default]), UsedName(write$default$3,[Default]), UsedName(write$default$2,[Default]), UsedName(toLabel,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(flaw,[Default]), UsedName(scalation;graph_db;MGraphIO;init;,[Default]), UsedName(wait,[Default]), UsedName(write$default$1,[Default]), UsedName(ne,[Default]), UsedName(write2Neo4JFiles,[Default]), UsedName(read2PajekFile,[Default]), UsedName(read2PajekFile$default$3,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.MGraphIO has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(write2IgraphFiles,[Default]), UsedName(equals,[Default]), UsedName(makeSet,[Default]), UsedName(apply$default$2,[Default]), UsedName(hashCode,[Default]), UsedName(read2Files,[Default]), UsedName(EXT,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(apply$default$3,[Default]), UsedName(MGraphIO,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(write,[Default]), UsedName(makeTuple,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(apply$default$4,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(read2Files$default$3,[Default]), UsedName(apply,[Default]), UsedName(write$default$3,[Default]), UsedName(write$default$2,[Default]), UsedName(toLabel,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(flaw,[Default]), UsedName(scalation;graph_db;MGraphIO;init;,[Default]), UsedName(wait,[Default]), UsedName(write$default$1,[Default]), UsedName(ne,[Default]), UsedName(write2Neo4JFiles,[Default]), UsedName(read2PajekFile,[Default]), UsedName(read2PajekFile$default$3,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.MGraphIO)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.Block...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.Block)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.Block)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.Block,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(_id,[Default]), UsedName(copy$default$1,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(canEqual,[Default]), UsedName(productPrefix,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(id,[Default]), UsedName(vertices,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(Block,[Default]), UsedName(wait,[Default]), UsedName(scalation;graph_db;Block;init;,[Default]), UsedName(ne,[Default]), UsedName(parent,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.Block has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(_id,[Default]), UsedName(copy$default$1,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(canEqual,[Default]), UsedName(productPrefix,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(id,[Default]), UsedName(vertices,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(Block,[Default]), UsedName(wait,[Default]), UsedName(scalation;graph_db;Block;init;,[Default]), UsedName(ne,[Default]), UsedName(parent,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.Block)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graphalytics.Graph...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graphalytics.Graph)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graphalytics.Graph)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graphalytics.Graph,ModifiedNames(changes = UsedName(nSelfLoops,[Default]), UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(label,[Default]), UsedName(printG$default$1,[Default]), UsedName(nEdges,[Default]), UsedName(printG,[Default]), UsedName(labelMap,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(inverse,[Default]), UsedName(name,[Default]), UsedName(q2,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(toLine$default$2,[Default]), UsedName(!=,[Default]), UsedName(g1,[Default]), UsedName(notifyAll,[Default]), UsedName(ch,[Default]), UsedName(toLine,[Default]), UsedName(Graph,[Default]), UsedName(getClass,[Default]), UsedName(g44,[Default]), UsedName(q44,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(buildLabelMap,[Default]), UsedName(g2p,[Default]), UsedName(checkEdges,[Default]), UsedName(synchronized,[Default]), UsedName(g2,[Default]), UsedName(same,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(getVerticesWithLabel,[Default]), UsedName(q1,[Default]), UsedName(q1p,[Default]), UsedName(size,[Default]), UsedName(wait,[Default]), UsedName(addPar,[Default]), UsedName(<init>$default$3,[Default]), UsedName(ne,[Default]), UsedName(pa,[Default]), UsedName(g1p,[Default]), UsedName(scalation;graphalytics;Graph;init;,[Default]), UsedName(isConnected,[Default]), UsedName(<init>$default$4,[Default]), UsedName(<init>$default$2,[Default]), UsedName(q2p,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.graphalytics.Graph has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(nSelfLoops,[Default]), UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(label,[Default]), UsedName(printG$default$1,[Default]), UsedName(nEdges,[Default]), UsedName(printG,[Default]), UsedName(labelMap,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(inverse,[Default]), UsedName(name,[Default]), UsedName(q2,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(toLine$default$2,[Default]), UsedName(!=,[Default]), UsedName(g1,[Default]), UsedName(notifyAll,[Default]), UsedName(ch,[Default]), UsedName(toLine,[Default]), UsedName(Graph,[Default]), UsedName(getClass,[Default]), UsedName(g44,[Default]), UsedName(q44,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(buildLabelMap,[Default]), UsedName(g2p,[Default]), UsedName(checkEdges,[Default]), UsedName(synchronized,[Default]), UsedName(g2,[Default]), UsedName(same,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(getVerticesWithLabel,[Default]), UsedName(q1,[Default]), UsedName(q1p,[Default]), UsedName(size,[Default]), UsedName(wait,[Default]), UsedName(addPar,[Default]), UsedName(<init>$default$3,[Default]), UsedName(ne,[Default]), UsedName(pa,[Default]), UsedName(g1p,[Default]), UsedName(scalation;graphalytics;Graph;init;,[Default]), UsedName(isConnected,[Default]), UsedName(<init>$default$4,[Default]), UsedName(<init>$default$2,[Default]), UsedName(q2p,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graphalytics.Graph)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.MGraphIOTest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.MGraphIOTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.MGraphIOTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.MGraphIOTest,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(avDegree,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(MGraphIOTest,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(inverse,[Default]), UsedName(name,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(mgGen,[Default]), UsedName(mgIO,[Default]), UsedName(g,[Default]), UsedName(nLabels,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(size,[Default]), UsedName(wait,[Default]), UsedName(ran_graph,[Default]), UsedName(ne,[Default]), UsedName(eLabels,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.MGraphIOTest has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(avDegree,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(MGraphIOTest,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(inverse,[Default]), UsedName(name,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(mgGen,[Default]), UsedName(mgIO,[Default]), UsedName(g,[Default]), UsedName(nLabels,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(size,[Default]), UsedName(wait,[Default]), UsedName(ran_graph,[Default]), UsedName(ne,[Default]), UsedName(eLabels,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.MGraphIOTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.MDualSim2Test2...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.MDualSim2Test2)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.MDualSim2Test2)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.MDualSim2Test2,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(MDualSim2Test2,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.MDualSim2Test2 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(MDualSim2Test2,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.MDualSim2Test2)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.spatial.LatitudeLongitudeTest3...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.spatial.LatitudeLongitudeTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.spatial.LatitudeLongitudeTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.spatial.LatitudeLongitudeTest3,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(brecken_El,[Default]), UsedName(brecken,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(aspen_El,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(d,[Default]), UsedName(##,[Default]), UsedName(el,[Default]), UsedName(wait,[Default]), UsedName(LatitudeLongitudeTest3,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(aspen,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.spatial.LatitudeLongitudeTest3 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(brecken_El,[Default]), UsedName(brecken,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(aspen_El,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(d,[Default]), UsedName(##,[Default]), UsedName(el,[Default]), UsedName(wait,[Default]), UsedName(LatitudeLongitudeTest3,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(aspen,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.spatial.LatitudeLongitudeTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.preprocessing.replaceMissingStrings...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.preprocessing.replaceMissingStrings)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.preprocessing.replaceMissingStrings)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.preprocessing.PreProcessingMaster: Set(UsedName(missingStr,[Default]), UsedName(fraction,[Default]), UsedName(isInstanceOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(==,[Default]), UsedName(apply,[Default]), UsedName(xy,[Default]), UsedName(funcVal,[Default]), UsedName(missingCol,[Default]), UsedName(replaceMissingStrings,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.preprocessing.replaceMissingStrings,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(apply$default$5,[Default]), UsedName(copy$default$1,[Default]), UsedName(copy$default$5,[Default]), UsedName(hashCode,[Default]), UsedName(missingStr,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(fraction,[Default]), UsedName(canEqual,[Default]), UsedName(curried,[Default]), UsedName(apply$default$3,[Default]), UsedName(productPrefix,[Default]), UsedName(tupled,[Default]), UsedName(scalation;preprocessing;replaceMissingStrings;init;,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(copy$default$2,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(apply$default$4,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(unapply,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(copy$default$4,[Default]), UsedName(apply,[Default]), UsedName(xy,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(<init>$default$5,[Default]), UsedName(wait,[Default]), UsedName(copy$default$3,[Default]), UsedName(funcVal,[Default]), UsedName(<init>$default$3,[Default]), UsedName(ne,[Default]), UsedName(missingCol,[Default]), UsedName(replaceMissingStrings,[Default]), UsedName(<init>$default$4,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 2 classes due to The scalation.preprocessing.replaceMissingStrings has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(apply$default$5,[Default]), UsedName(copy$default$1,[Default]), UsedName(copy$default$5,[Default]), UsedName(hashCode,[Default]), UsedName(missingStr,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(fraction,[Default]), UsedName(canEqual,[Default]), UsedName(curried,[Default]), UsedName(apply$default$3,[Default]), UsedName(productPrefix,[Default]), UsedName(tupled,[Default]), UsedName(scalation;preprocessing;replaceMissingStrings;init;,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(copy$default$2,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(apply$default$4,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(unapply,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(copy$default$4,[Default]), UsedName(apply,[Default]), UsedName(xy,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(<init>$default$5,[Default]), UsedName(wait,[Default]), UsedName(copy$default$3,[Default]), UsedName(funcVal,[Default]), UsedName(<init>$default$3,[Default]), UsedName(ne,[Default]), UsedName(missingCol,[Default]), UsedName(replaceMissingStrings,[Default]), UsedName(<init>$default$4,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.preprocessing.replaceMissingStrings)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> by member reference: Set(scalation.preprocessing.PreProcessingMaster)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graphalytics.DualSim2CARTest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graphalytics.DualSim2CARTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graphalytics.DualSim2CARTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graphalytics.DualSim2CARTest,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(DualSim2CARTest,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(g1,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(q1,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graphalytics.DualSim2CARTest has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(DualSim2CARTest,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(g1,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(q1,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graphalytics.DualSim2CARTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.dist_db.tableGen...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.dist_db.tableGen)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.dist_db.tableGen)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.dist_db.RelDBMasterTest5: Set(UsedName(tableGen,[Default]), UsedName(apply,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.dist_db.RelDBMaster: Set(UsedName(tableGen,[Default]), UsedName(isInstanceOf,[Default]), UsedName(name,[Default]), UsedName(asInstanceOf,[Default]), UsedName(count,[Default]), UsedName(==,[Default]), UsedName(apply,[Default]), UsedName(ne,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.dist_db.tableGen,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(copy$default$1,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(canEqual,[Default]), UsedName(curried,[Default]), UsedName(productPrefix,[Default]), UsedName(tupled,[Default]), UsedName(tableGen,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(name,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(copy$default$2,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(count,[Default]), UsedName(unapply,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(scalation;dist_db;tableGen;init;,[Default]), UsedName(apply,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 3 classes due to The scalation.dist_db.tableGen has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(copy$default$1,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(canEqual,[Default]), UsedName(curried,[Default]), UsedName(productPrefix,[Default]), UsedName(tupled,[Default]), UsedName(tableGen,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(name,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(copy$default$2,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(count,[Default]), UsedName(unapply,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(scalation;dist_db;tableGen;init;,[Default]), UsedName(apply,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.dist_db.tableGen)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> by member reference: Set(scalation.dist_db.RelDBMasterTest5, scalation.dist_db.RelDBMaster)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.ExampleMGraphI...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.ExampleMGraphI)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.ExampleMGraphI)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.ExampleMGraphI,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName(ExampleMGraphI,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(q2,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(g1,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g2p,[Default]), UsedName(synchronized,[Default]), UsedName(g2,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(q1,[Default]), UsedName(q1p,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(g1p,[Default]), UsedName(q2p,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.graph_db.ExampleMGraphI has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName(ExampleMGraphI,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(q2,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(g1,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g2p,[Default]), UsedName(synchronized,[Default]), UsedName(g2,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(q1,[Default]), UsedName(q1p,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(g1p,[Default]), UsedName(q2p,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.ExampleMGraphI)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.GraphMatcher...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.GraphMatcher)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.GraphMatcher)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.GraphMatcher,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(test$default$2,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(feasibleMatesW,[Default]), UsedName(isInstanceOf,[Default]), UsedName(bijections,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(disjoint,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(qRange,[Default]), UsedName(notifyAll,[Default]), UsedName(SELF_LOOPS,[Default]), UsedName(scalation;graph_db;pattern_matching;GraphMatcher;init;,[Default]), UsedName(getClass,[Default]), UsedName(LIMIT,[Default]), UsedName(gRange,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(feasibleMates,[Default]), UsedName(CHECK,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(test,[Default]), UsedName(showMappings,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(countMappings,[Default]), UsedName(filterGraph,[Default]), UsedName(prune,[Default]), UsedName(mappings,[Default]), UsedName(GraphMatcher,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.GraphMatcher has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(test$default$2,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(feasibleMatesW,[Default]), UsedName(isInstanceOf,[Default]), UsedName(bijections,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(disjoint,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(qRange,[Default]), UsedName(notifyAll,[Default]), UsedName(SELF_LOOPS,[Default]), UsedName(scalation;graph_db;pattern_matching;GraphMatcher;init;,[Default]), UsedName(getClass,[Default]), UsedName(LIMIT,[Default]), UsedName(gRange,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(feasibleMates,[Default]), UsedName(CHECK,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(test,[Default]), UsedName(showMappings,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(countMappings,[Default]), UsedName(filterGraph,[Default]), UsedName(prune,[Default]), UsedName(mappings,[Default]), UsedName(GraphMatcher,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.GraphMatcher)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.MStrictSim...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.MStrictSim)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.MStrictSim)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.MStrictSim,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(test$default$2,[Default]), UsedName(hashCode,[Default]), UsedName(selectivityCriteria,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(feasibleMatesW,[Default]), UsedName(isInstanceOf,[Default]), UsedName(bijections,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(disjoint,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(qRange,[Default]), UsedName(scalation;graph_db;pattern_matching;MStrictSim;init;,[Default]), UsedName(notifyAll,[Default]), UsedName(SELF_LOOPS,[Default]), UsedName(getClass,[Default]), UsedName(LIMIT,[Default]), UsedName(gRange,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(feasibleMates,[Default]), UsedName(refine,[Default]), UsedName(CHECK,[Default]), UsedName(mappings2,[Default]), UsedName(synchronized,[Default]), UsedName(dualFilter,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(test,[Default]), UsedName(showMappings,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(MStrictSim,[Default]), UsedName(countMappings,[Default]), UsedName(filterGraph,[Default]), UsedName(prune,[Default]), UsedName(mappings,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.MStrictSim has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(test$default$2,[Default]), UsedName(hashCode,[Default]), UsedName(selectivityCriteria,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(feasibleMatesW,[Default]), UsedName(isInstanceOf,[Default]), UsedName(bijections,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(disjoint,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(qRange,[Default]), UsedName(scalation;graph_db;pattern_matching;MStrictSim;init;,[Default]), UsedName(notifyAll,[Default]), UsedName(SELF_LOOPS,[Default]), UsedName(getClass,[Default]), UsedName(LIMIT,[Default]), UsedName(gRange,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(feasibleMates,[Default]), UsedName(refine,[Default]), UsedName(CHECK,[Default]), UsedName(mappings2,[Default]), UsedName(synchronized,[Default]), UsedName(dualFilter,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(test,[Default]), UsedName(showMappings,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(MStrictSim,[Default]), UsedName(countMappings,[Default]), UsedName(filterGraph,[Default]), UsedName(prune,[Default]), UsedName(mappings,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.MStrictSim)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.test.DualPatternTest_D...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.test.DualPatternTest_D)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.test.DualPatternTest_D)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.test.DualPatternTest_D,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(DualPatternTest_D,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(q2,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(q3,[Default]), UsedName(synchronized,[Default]), UsedName(g2,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(g3,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.test.DualPatternTest_D has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(DualPatternTest_D,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(q2,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(q3,[Default]), UsedName(synchronized,[Default]), UsedName(g2,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(g3,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.test.DualPatternTest_D)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.graph_algebra.MuGraphTest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.graph_algebra.MuGraphTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.graph_algebra.MuGraphTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.graph_algebra.MuGraphTest,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(MuGraphTest,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.graph_algebra.MuGraphTest has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(MuGraphTest,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.graph_algebra.MuGraphTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.QueryTest3...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.QueryTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.QueryTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.QueryTest3,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(QueryTest3,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.QueryTest3 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(QueryTest3,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.QueryTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.MDualSimXTest2...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.MDualSimXTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.MDualSimXTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.MDualSimXTest2,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(MDualSimXTest2,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.MDualSimXTest2 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(MDualSimXTest2,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.MDualSimXTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.MDualSimW...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.MDualSimW)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.MDualSimW)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.MDualSimW,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(test$default$2,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(feasibleMatesW,[Default]), UsedName(isInstanceOf,[Default]), UsedName(bijections,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(disjoint,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(qRange,[Default]), UsedName(notifyAll,[Default]), UsedName(SELF_LOOPS,[Default]), UsedName(getClass,[Default]), UsedName(LIMIT,[Default]), UsedName(gRange,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(feasibleMates,[Default]), UsedName(CHECK,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(test,[Default]), UsedName(MDualSimW,[Default]), UsedName(showMappings,[Default]), UsedName(scalation;graph_db;pattern_matching;MDualSimW;init;,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(countMappings,[Default]), UsedName(filterGraph,[Default]), UsedName(prune,[Default]), UsedName(mappings,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.MDualSimW has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(test$default$2,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(feasibleMatesW,[Default]), UsedName(isInstanceOf,[Default]), UsedName(bijections,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(disjoint,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(qRange,[Default]), UsedName(notifyAll,[Default]), UsedName(SELF_LOOPS,[Default]), UsedName(getClass,[Default]), UsedName(LIMIT,[Default]), UsedName(gRange,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(feasibleMates,[Default]), UsedName(CHECK,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(test,[Default]), UsedName(MDualSimW,[Default]), UsedName(showMappings,[Default]), UsedName(scalation;graph_db;pattern_matching;MDualSimW;init;,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(countMappings,[Default]), UsedName(filterGraph,[Default]), UsedName(prune,[Default]), UsedName(mappings,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.MDualSimW)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.MDualSimXTest4...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.MDualSimXTest4)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.MDualSimXTest4)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.MDualSimXTest4,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(MDualSimXTest4,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.MDualSimXTest4 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(MDualSimXTest4,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.MDualSimXTest4)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.MDualSim2Test3...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.MDualSim2Test3)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.MDualSim2Test3)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.MDualSim2Test3,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(MDualSim2Test3,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.MDualSim2Test3 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(MDualSim2Test3,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.MDualSim2Test3)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.MDualSimXTest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.MDualSimXTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.MDualSimXTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.MDualSimXTest,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(MDualSimXTest,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.MDualSimXTest has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(MDualSimXTest,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.MDualSimXTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graphalytics.TightSim2Test...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graphalytics.TightSim2Test)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graphalytics.TightSim2Test)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graphalytics.TightSim2Test,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(TightSim2Test,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graphalytics.TightSim2Test has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(TightSim2Test,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graphalytics.TightSim2Test)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.TreeTest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.TreeTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.TreeTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.TreeTest,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(ct,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(TreeTest,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.TreeTest has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(ct,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(TreeTest,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.TreeTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.MinSpanningTree.NodeOrder...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.MinSpanningTree.NodeOrder)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.MinSpanningTree.NodeOrder)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.MinSpanningTree.NodeOrder,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(Ops,[Default]), UsedName(hashCode,[Default]), UsedName(lteq,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(on,[Default]), UsedName(isInstanceOf,[Default]), UsedName(max,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(compare,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(reversed,[Default]), UsedName(getClass,[Default]), UsedName(tryCompare,[Default]), UsedName(gt,[Default]), UsedName(reverse,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(equiv,[Default]), UsedName(gteq,[Default]), UsedName(synchronized,[Default]), UsedName(thenComparingInt,[Default]), UsedName(toString,[Default]), UsedName(mkOrderingOps,[Implicit]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(NodeOrder,[Default]), UsedName(ne,[Default]), UsedName(thenComparing,[Default]), UsedName(lt,[Default]), UsedName(min,[Default]), UsedName(thenComparingLong,[Default]), UsedName(thenComparingDouble,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.MinSpanningTree.NodeOrder has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(mkOrderingOps,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.MinSpanningTree.NodeOrder)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.preprocessing.rmOutliers...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.preprocessing.rmOutliers)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.preprocessing.rmOutliers)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.preprocessing.rmOutliers,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(canEqual,[Default]), UsedName(curried,[Default]), UsedName(productPrefix,[Default]), UsedName(tupled,[Default]), UsedName(isInstanceOf,[Default]), UsedName(c,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(productArity,[Default]), UsedName(rmOutliers,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(method,[Default]), UsedName(apply,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(scalation;preprocessing;rmOutliers;init;,[Default]), UsedName(unapplySeq,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.preprocessing.rmOutliers has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(canEqual,[Default]), UsedName(curried,[Default]), UsedName(productPrefix,[Default]), UsedName(tupled,[Default]), UsedName(isInstanceOf,[Default]), UsedName(c,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(productArity,[Default]), UsedName(rmOutliers,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(method,[Default]), UsedName(apply,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(scalation;preprocessing;rmOutliers;init;,[Default]), UsedName(unapplySeq,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.preprocessing.rmOutliers)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.columnar_db.MissingValuesTest2...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.columnar_db.MissingValuesTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.columnar_db.MissingValuesTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.columnar_db.MissingValuesTest2,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(MissingValuesTest2,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.columnar_db.MissingValuesTest2 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(MissingValuesTest2,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.columnar_db.MissingValuesTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graphalytics.DualIsoCARTest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graphalytics.DualIsoCARTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graphalytics.DualIsoCARTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graphalytics.DualIsoCARTest,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(matcher,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(DualIsoCARTest,[Default]), UsedName(!=,[Default]), UsedName(g1,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(psi,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graphalytics.DualIsoCARTest has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(matcher,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(DualIsoCARTest,[Default]), UsedName(!=,[Default]), UsedName(g1,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(psi,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graphalytics.DualIsoCARTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graphalytics.GraphIso...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graphalytics.GraphIso)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graphalytics.GraphIso)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graphalytics.GraphIso,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(graphIsomorphic,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(scalation;graphalytics;GraphIso;init;,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(GraphIso,[Default]), UsedName(ne,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.graphalytics.GraphIso has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(graphIsomorphic,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(scalation;graphalytics;GraphIso;init;,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(GraphIso,[Default]), UsedName(ne,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graphalytics.GraphIso)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.MDualSimCARTest5...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.MDualSimCARTest5)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.MDualSimCARTest5)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.MDualSimCARTest5,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(MDualSimCARTest5,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.MDualSimCARTest5 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(MDualSimCARTest5,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.MDualSimCARTest5)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.MGraphSimXTest5...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.MGraphSimXTest5)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.MGraphSimXTest5)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.MGraphSimXTest5,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(MGraphSimXTest5,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.MGraphSimXTest5 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(MGraphSimXTest5,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.MGraphSimXTest5)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.spatial.LatitudeLongitudeTest4...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.spatial.LatitudeLongitudeTest4)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.spatial.LatitudeLongitudeTest4)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.spatial.LatitudeLongitudeTest4,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(LatitudeLongitudeTest4,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(sensorLoc,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(locs,[Default]), UsedName(delayedInit,[Default]), UsedName(nearest,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.spatial.LatitudeLongitudeTest4 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(LatitudeLongitudeTest4,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(sensorLoc,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(locs,[Default]), UsedName(delayedInit,[Default]), UsedName(nearest,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.spatial.LatitudeLongitudeTest4)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.MDualSimCAR...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.MDualSimCAR)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.MDualSimCAR)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.MDualSimCAR,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(test$default$2,[Default]), UsedName(hashCode,[Default]), UsedName(scalation;graph_db;pattern_matching;MDualSimCAR;init;,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(feasibleMatesW,[Default]), UsedName(isInstanceOf,[Default]), UsedName(bijections,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(disjoint,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(qRange,[Default]), UsedName(notifyAll,[Default]), UsedName(SELF_LOOPS,[Default]), UsedName(getClass,[Default]), UsedName(LIMIT,[Default]), UsedName(gRange,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(feasibleMates,[Default]), UsedName(CHECK,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(test,[Default]), UsedName(showMappings,[Default]), UsedName(wait,[Default]), UsedName(MDualSimCAR,[Default]), UsedName(ne,[Default]), UsedName(countMappings,[Default]), UsedName(filterGraph,[Default]), UsedName(prune,[Default]), UsedName(mappings,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.MDualSimCAR has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(test$default$2,[Default]), UsedName(hashCode,[Default]), UsedName(scalation;graph_db;pattern_matching;MDualSimCAR;init;,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(feasibleMatesW,[Default]), UsedName(isInstanceOf,[Default]), UsedName(bijections,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(disjoint,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(qRange,[Default]), UsedName(notifyAll,[Default]), UsedName(SELF_LOOPS,[Default]), UsedName(getClass,[Default]), UsedName(LIMIT,[Default]), UsedName(gRange,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(feasibleMates,[Default]), UsedName(CHECK,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(test,[Default]), UsedName(showMappings,[Default]), UsedName(wait,[Default]), UsedName(MDualSimCAR,[Default]), UsedName(ne,[Default]), UsedName(countMappings,[Default]), UsedName(filterGraph,[Default]), UsedName(prune,[Default]), UsedName(mappings,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.MDualSimCAR)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.MGraphSimTest4...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.MGraphSimTest4)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.MGraphSimTest4)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.MGraphSimTest4,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(MGraphSimTest4,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.MGraphSimTest4 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(MGraphSimTest4,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.MGraphSimTest4)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.MTightSimTest6...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.MTightSimTest6)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.MTightSimTest6)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.MTightSimTest6,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(MTightSimTest6,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.MTightSimTest6 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(MTightSimTest6,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.MTightSimTest6)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.dist_db.joinIn...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.dist_db.joinIn)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.dist_db.joinIn)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.dist_db.RelDBMaster: Set(UsedName(joinIn,[Default]), UsedName(isInstanceOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(rName,[Default]), UsedName(==,[Default]), UsedName(apply,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(r,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.dist_db.RelDBWorker: Set(UsedName(joinIn,[Default]), UsedName(isInstanceOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(uc,[Default]), UsedName(rName,[Default]), UsedName(==,[Default]), UsedName(apply,[Default]), UsedName(q,[Default]), UsedName(r,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.dist_db.joinIn,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(copy$default$1,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(canEqual,[Default]), UsedName(curried,[Default]), UsedName(productPrefix,[Default]), UsedName(tupled,[Default]), UsedName(joinIn,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(copy$default$2,[Default]), UsedName(uc,[Default]), UsedName(!=,[Default]), UsedName(scalation;dist_db;joinIn;init;,[Default]), UsedName(notifyAll,[Default]), UsedName(rName,[Default]), UsedName(getClass,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(unapply,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(copy$default$4,[Default]), UsedName(apply,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(copy$default$3,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(r,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 3 classes due to The scalation.dist_db.joinIn has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(copy$default$1,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(canEqual,[Default]), UsedName(curried,[Default]), UsedName(productPrefix,[Default]), UsedName(tupled,[Default]), UsedName(joinIn,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(copy$default$2,[Default]), UsedName(uc,[Default]), UsedName(!=,[Default]), UsedName(scalation;dist_db;joinIn;init;,[Default]), UsedName(notifyAll,[Default]), UsedName(rName,[Default]), UsedName(getClass,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(unapply,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(copy$default$4,[Default]), UsedName(apply,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(copy$default$3,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(r,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.dist_db.joinIn)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> by member reference: Set(scalation.dist_db.RelDBMaster, scalation.dist_db.RelDBWorker)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.columnar_db.MissingValuesTest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.columnar_db.MissingValuesTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.columnar_db.MissingValuesTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.columnar_db.MissingValuesTest,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(MissingValuesTest,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.columnar_db.MissingValuesTest has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(MissingValuesTest,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.columnar_db.MissingValuesTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.MGraphSimXTest2...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.MGraphSimXTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.MGraphSimXTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.MGraphSimXTest2,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(MGraphSimXTest2,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.MGraphSimXTest2 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(MGraphSimXTest2,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.MGraphSimXTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.graph_algebra.MuTightSimTest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.graph_algebra.MuTightSimTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.graph_algebra.MuTightSimTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.graph_algebra.MuTightSimTest,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(matcher,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(MuTightSimTest,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.graph_algebra.MuTightSimTest has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(matcher,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(MuTightSimTest,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.graph_algebra.MuTightSimTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.SSShortestPath.Item...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.SSShortestPath.Item)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.SSShortestPath.Item)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.SSShortestPath.Item,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(copy$default$1,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(canEqual,[Default]), UsedName(curried,[Default]), UsedName(productPrefix,[Default]), UsedName(tupled,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(<=,[Default]), UsedName(asInstanceOf,[Default]), UsedName(>,[Default]), UsedName($asInstanceOf,[Default]), UsedName(compare,[Default]), UsedName(copy$default$2,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(compareTo,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(unapply,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(apply,[Default]), UsedName(id,[Default]), UsedName(<,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(Item,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(dd,[Default]), UsedName(>=,[Default]), UsedName(scalation;graph_db;SSShortestPath;Item;init;,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.SSShortestPath.Item has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(copy$default$1,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(canEqual,[Default]), UsedName(curried,[Default]), UsedName(productPrefix,[Default]), UsedName(tupled,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(<=,[Default]), UsedName(asInstanceOf,[Default]), UsedName(>,[Default]), UsedName($asInstanceOf,[Default]), UsedName(compare,[Default]), UsedName(copy$default$2,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(compareTo,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(unapply,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(apply,[Default]), UsedName(id,[Default]), UsedName(<,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(Item,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(dd,[Default]), UsedName(>=,[Default]), UsedName(scalation;graph_db;SSShortestPath;Item;init;,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.SSShortestPath.Item)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.MTightSimTest2...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.MTightSimTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.MTightSimTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.MTightSimTest2,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(MTightSimTest2,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.MTightSimTest2 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(MTightSimTest2,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.MTightSimTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.scala3d.Line3Dend...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.scala3d.Line3Dend)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.scala3d.Line3Dend)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.scala3d.Line3Dend,ModifiedNames(changes = UsedName(autosize,[Default]), UsedName(onKeyTypedProperty,[Default]), UsedName(blendModeProperty,[Default]), UsedName(getId,[Default]), UsedName(getTranslateZ,[Default]), UsedName(materialProperty,[Default]), UsedName(getOnZoom,[Default]), UsedName(getOnSwipeUp,[Default]), UsedName(equals,[Default]), UsedName(getOnDragDone,[Default]), UsedName(impl_getPivotY,[Default]), UsedName(minWidth,[Default]), UsedName(setAccessibleText,[Default]), UsedName(setFocused,[Default]), UsedName(getOnMouseReleased,[Default]), UsedName(getOnZoomFinished,[Default]), UsedName(setStyle,[Default]), UsedName(getOnMouseExited,[Default]), UsedName(Line3Dend,[Default]), UsedName(getLocalToSceneTransform,[Default]), UsedName(onScrollFinishedProperty,[Default]), UsedName(setOnMouseMoved,[Default]), UsedName(maxWidth,[Default]), UsedName(removeEventFilter,[Default]), UsedName(impl_setStyleMap,[Default]), UsedName(maxHeight,[Default]), UsedName(isPressed,[Default]), UsedName(hashCode,[Default]), UsedName(getTransforms,[Default]), UsedName(setOnScrollStarted,[Default]), UsedName(setOnMouseExited,[Default]), UsedName(setRotate,[Default]), UsedName(isFocused,[Default]), UsedName(inputMethodRequestsProperty,[Default]), UsedName(prefWidth,[Default]), UsedName(impl_pickNodeLocal,[Default]), UsedName(setInputMethodRequests,[Default]), UsedName(setOnRotationFinished,[Default]), UsedName(onScrollStartedProperty,[Default]), UsedName(accessibilityProperties,[Default]), UsedName(styleProperty,[Default]), UsedName(setOnContextMenuRequested,[Default]), UsedName(translateXProperty,[Default]), UsedName(getGeomBounds,[Default]), UsedName(rotationAxisProperty,[Default]), UsedName(effectiveNodeOrientationProperty,[Default]), UsedName(onZoomStartedProperty,[Default]), UsedName(setDerivedDepthTest,[Default]), UsedName($isInstanceOf,[Default]), UsedName(resizeRelocate,[Default]), UsedName(manager,[Default]), UsedName(containsBounds,[Default]), UsedName(getOnRotationStarted,[Default]), UsedName(getOnDragOver,[Default]), UsedName(clone,[Default]), UsedName(getBaselineOffset,[Default]), UsedName(cacheHintProperty,[Default]), UsedName(getOnZoomStarted,[Default]), UsedName(onMouseReleasedProperty,[Default]), UsedName(impl_geomChanged,[Default]), UsedName(notifyAccessibleAttributeChanged,[Default]), UsedName(requestFocus,[Default]), UsedName(effectProperty,[Default]), UsedName(onMousePressedProperty,[Default]), UsedName(setOnKeyTyped,[Default]), UsedName(pickOnBoundsProperty,[Default]), UsedName(impl_createPeer,[Default]), UsedName(isVisible,[Default]), UsedName(setOnSwipeDown,[Default]), UsedName(boundsInLocalProperty,[Default]), UsedName(setHeight,[Default]), UsedName(impl_hasTransforms,[Default]), UsedName(onSwipeDownProperty,[Default]), UsedName(setOnKeyReleased,[Default]), UsedName(isDisable,[Default]), UsedName(setOnMouseDragEntered,[Default]), UsedName(getOnTouchPressed,[Default]), UsedName(onMouseDragExitedProperty,[Default]), UsedName(addEventHandler,[Default]), UsedName(pseudoClassStateChanged,[Default]), UsedName(onDragDoneProperty,[Default]), UsedName(disableProperty,[Default]), UsedName(updateGeomBounds,[Default]), UsedName(toFront,[Default]), UsedName(setOnTouchReleased,[Default]), UsedName(impl_processMXNode,[Default]), UsedName(setOnMouseDragged,[Default]), UsedName(angle,[Default]), UsedName(layoutYProperty,[Default]), UsedName(setOnMouseReleased,[Default]), UsedName(boundsInParentProperty,[Default]), UsedName(getLocalToParentTransform,[Default]), UsedName(getSubScene,[Default]), UsedName(impl_isDirty,[Default]), UsedName(impl_notifyLayoutBoundsChanged,[Default]), UsedName(onDragDroppedProperty,[Default]), UsedName(getOnContextMenuRequested,[Default]), UsedName(impl_traverse,[Default]), UsedName(isInstanceOf,[Default]), UsedName(isResizable,[Default]), UsedName(impl_getLeafTransform,[Default]), UsedName(setLayoutX,[Default]), UsedName(setOnMousePressed,[Default]), UsedName(hoverProperty,[Default]), UsedName(getOnScroll,[Default]), UsedName(setCacheHint,[Default]), UsedName(getOnTouchReleased,[Default]), UsedName(setUserData,[Default]), UsedName(boundedSize,[Default]), UsedName(sceneToLocal,[Default]), UsedName(updateBounds,[Default]), UsedName(getCursor,[Default]), UsedName(scaleYProperty,[Default]), UsedName(mouseTransparentProperty,[Default]), UsedName(onMouseClickedProperty,[Default]), UsedName(finalize,[Default]), UsedName(getTransformedBounds,[Default]), UsedName(setScaleX,[Default]), UsedName(localToParent,[Default]), UsedName(getParent,[Default]), UsedName(onContextMenuRequestedProperty,[Default]), UsedName(updateLocalToParentTransform,[Default]), UsedName(setOnScrollFinished,[Default]), UsedName(setOnDragOver,[Default]), UsedName(asInstanceOf,[Default]), UsedName(setDisabled,[Default]), UsedName(FocusedProperty,[Default]), UsedName(getStyle,[Default]), UsedName($asInstanceOf,[Default]), UsedName(prefHeight,[Default]), UsedName(impl_cssGetFocusTraversableInitialValue,[Default]), UsedName(setOnZoom,[Default]), UsedName(getOnKeyReleased,[Default]), UsedName(impl_computeIntersects,[Default]), UsedName(eventDispatcherProperty,[Default]), UsedName(key,[Default]), UsedName(getTranslateY,[Default]), UsedName(sceneProperty,[Default]), UsedName(setOnSwipeLeft,[Default]), UsedName(getAccessible,[Default]), UsedName(pseudoClassStates,[Default]), UsedName(onDragDetectedProperty,[Default]), UsedName(lookup,[Default]), UsedName(setOnSwipeRight,[Default]), UsedName(drawModeProperty,[Default]), UsedName(cacheProperty,[Default]), UsedName(impl_computeGeomBounds,[Default]), UsedName(!=,[Default]), UsedName(notifyParentOfBoundsChange,[Default]), UsedName(parentResolvedOrientationInvalidated,[Default]), UsedName(getSpheres,[Default]), UsedName(impl_treeVisibleProperty,[Default]), UsedName(setCullFace,[Default]), UsedName(executeAccessibleAction,[Default]), UsedName(onInputMethodTextChangedProperty,[Default]), UsedName(impl_computeContains,[Default]), UsedName(getCssMetaData,[Default]), UsedName(getLocalBounds,[Default]), UsedName(notifyAll,[Default]), UsedName(translateZProperty,[Default]), UsedName(getOnMousePressed,[Default]), UsedName(setOnMouseDragOver,[Default]), UsedName(getStyleClass,[Default]), UsedName(cullFaceProperty,[Default]), UsedName(onDragOverProperty,[Default]), UsedName(getOnInputMethodTextChanged,[Default]), UsedName(radiusProperty,[Default]), UsedName(resize,[Default]), UsedName(setFocusTraversable,[Default]), UsedName(setOnMouseDragExited,[Default]), UsedName(onDragExitedProperty,[Default]), UsedName(getClass,[Default]), UsedName(notifyParentsOfInvalidatedCSS,[Default]), UsedName(heightProperty,[Default]), UsedName(getOnMouseDragExited,[Default]), UsedName(getEffect,[Default]), UsedName(setVisible,[Default]), UsedName(impl_layoutBoundsChanged,[Default]), UsedName(setOnTouchMoved,[Default]), UsedName(setOnDragDone,[Default]), UsedName(onSwipeLeftProperty,[Default]), UsedName(markDirtyLayoutBranch,[Default]), UsedName(setOnMouseClicked,[Default]), UsedName(setAccessibleRoleDescription,[Default]), UsedName(setOnDragDropped,[Default]), UsedName(contains,[Default]), UsedName(getClipParent,[Default]), UsedName(styleHelper,[Default]), UsedName(nodeResolvedOrientationChanged,[Default]), UsedName(localToScreen,[Default]), UsedName(startDragAndDrop,[Default]), UsedName(getOnDragDropped,[Default]), UsedName(disabledProperty,[Default]), UsedName(getBoundsInParent,[Default]), UsedName(getBlendMode,[Default]), UsedName(nodeResolvedOrientationInvalidated,[Default]), UsedName(sphere2,[Default]), UsedName(TreeVisiblePropertyReadOnly,[Default]), UsedName(getOnKeyTyped,[Default]), UsedName(onMouseDraggedProperty,[Default]), UsedName(onKeyPressedProperty,[Default]), UsedName(rotation,[Default]), UsedName(getCSSFlags,[Default]), UsedName(localToScene,[Default]), UsedName(setRotationAxis,[Default]), UsedName(translateYProperty,[Default]), UsedName(axis,[Default]), UsedName(snapshot,[Default]), UsedName(accessibleRoleDescriptionProperty,[Default]), UsedName(getOnDragExited,[Default]), UsedName(isCanReceiveFocus,[Default]), UsedName(opacityProperty,[Default]), UsedName(==,[Default]), UsedName(isDisabled,[Default]), UsedName(notify,[Default]), UsedName(isManaged,[Default]), UsedName(minHeight,[Default]), UsedName(idProperty,[Default]), UsedName(getLayoutBounds,[Default]), UsedName(setRadius,[Default]), UsedName(isDerivedDepthTest,[Default]), UsedName(getScene,[Default]), UsedName(setOnTouchPressed,[Default]), UsedName(getNodeOrientation,[Default]), UsedName(getPseudoClassStates,[Default]), UsedName(getRadius,[Default]), UsedName(accessibleHelpProperty,[Default]), UsedName(setParent,[Default]), UsedName(parentProperty,[Default]), UsedName(getLayoutX,[Default]), UsedName(getOpacity,[Default]), UsedName(scalation;scala3d;Line3Dend;init;,[Default]), UsedName(onMouseDragEnteredProperty,[Default]), UsedName(setDepthTest,[Default]), UsedName(setScaleZ,[Default]), UsedName(impl_updatePeer,[Default]), UsedName(setOnDragExited,[Default]), UsedName(setScaleY,[Default]), UsedName(getOnDragEntered,[Default]), UsedName(focusTraversableProperty,[Default]), UsedName(impl_getPivotZ,[Default]), UsedName(getContentBias,[Default]), UsedName(fireEvent,[Default]), UsedName(accessibleTextProperty,[Default]), UsedName(getOnMouseEntered,[Default]), UsedName(buildEventDispatchChain,[Default]), UsedName(impl_isTreeVisible,[Default]), UsedName(setCursor,[Default]), UsedName(usesMirroring,[Default]), UsedName(hasProperties,[Default]), UsedName(getMaterial,[Default]), UsedName(getAccessibleHelp,[Default]), UsedName(impl_intersectsBounds,[Default]), UsedName(focusedProperty,[Default]), UsedName(synchronized,[Default]), UsedName(setScenes,[Default]), UsedName(accessible,[Default]), UsedName(hasMirroring,[Default]), UsedName(onMouseDragOverProperty,[Default]), UsedName(queryAccessibleAttribute,[Default]), UsedName(onMouseMovedProperty,[Default]), UsedName(getDepthTest,[Default]), UsedName(setOnRotate,[Default]), UsedName(impl_markDirty,[Default]), UsedName(getCacheHint,[Default]), UsedName(getOnMouseDragEntered,[Default]), UsedName(getOnDragDetected,[Default]), UsedName(nodeOrientationProperty,[Default]), UsedName(getOnSwipeDown,[Default]), UsedName(setOnKeyPressed,[Default]), UsedName(toString,[Default]), UsedName(getScaleX,[Default]), UsedName(getOnRotationFinished,[Default]), UsedName(getOnTouchStationary,[Default]), UsedName(isHover,[Default]), UsedName(localBoundsChanged,[Default]), UsedName(getInputMethodRequests,[Default]), UsedName(##,[Default]), UsedName(setPickOnBounds,[Default]), UsedName(midPt,[Default]), UsedName(getBoundsInLocal,[Default]), UsedName(getProperties,[Default]), UsedName(intersects,[Default]), UsedName(getOnScrollFinished,[Default]), UsedName(releaseAccessible,[Default]), UsedName(setDrawMode,[Default]), UsedName(computeAreaInScreen,[Default]), UsedName(parentToLocal,[Default]), UsedName(translateMidpoint,[Default]), UsedName(getOnRotate,[Default]), UsedName(setTreeVisible,[Default]), UsedName(impl_isDirtyEmpty,[Default]), UsedName(isMouseTransparent,[Default]), UsedName(processCSS,[Default]), UsedName(setClip,[Default]), UsedName(getAccessibleRoleDescription,[Default]), UsedName(getStyleableParent,[Default]), UsedName(getScaleY,[Default]), UsedName(wait,[Default]), UsedName(setDisable,[Default]), UsedName(impl_syncPeer,[Default]), UsedName(visibleProperty,[Default]), UsedName(getCurrentLocalToSceneTransformState,[Default]), UsedName(getHeight,[Default]), UsedName(setOnSwipeUp,[Default]), UsedName(setId,[Default]), UsedName(startFullDrag,[Default]), UsedName(getScaleZ,[Default]), UsedName(impl_computeLayoutBounds,[Default]), UsedName(onSwipeUpProperty,[Default]), UsedName(scenesChanged,[Default]), UsedName(sphere1,[Default]), UsedName(getRotate,[Default]), UsedName(setMouseTransparent,[Default]), UsedName(isCache,[Default]), UsedName(setAccessibleHelp,[Default]), UsedName(notifyManagedChanged,[Default]), UsedName(onKeyReleasedProperty,[Default]), UsedName(impl_showMnemonicsProperty,[Default]), UsedName(setOnInputMethodTextChanged,[Default]), UsedName(layoutBoundsProperty,[Default]), UsedName(getTypeSelector,[Default]), UsedName(getEffectiveNodeOrientation,[Default]), UsedName(getUserData,[Default]), UsedName(isPickOnBounds,[Default]), UsedName(setOnScroll,[Default]), UsedName(onRotationStartedProperty,[Default]), UsedName(impl_getPivotX,[Default]), UsedName(getAccessibleRole,[Default]), UsedName(ne,[Default]), UsedName(getRotationAxis,[Default]), UsedName(managedProperty,[Default]), UsedName(getOnTouchMoved,[Default]), UsedName(localToSceneTransformProperty,[Default]), UsedName(onRotateProperty,[Default]), UsedName(screenToLocal,[Default]), UsedName(onScrollProperty,[Default]), UsedName(indent,[Default]), UsedName(getClip,[Default]), UsedName(relocate,[Default]), UsedName(impl_getPeer,[Default]), UsedName(getOnSwipeLeft,[Default]), UsedName(updateTxBounds,[Default]), UsedName(setManaged,[Default]), UsedName(setOnDragDetected,[Default]), UsedName(setNodeOrientation,[Default]), UsedName(setOnMouseEntered,[Default]), UsedName(getOnMouseClicked,[Default]), UsedName(setOnZoomStarted,[Default]), UsedName(impl_findStyles,[Default]), UsedName(onTouchStationaryProperty,[Default]), UsedName(setTranslateZ,[Default]), UsedName(impl_reapplyCSS,[Default]), UsedName(impl_clearDirty,[Default]), UsedName(getOnMouseDragged,[Default]), UsedName(layoutXProperty,[Default]), UsedName(getOnMouseDragReleased,[Default]), UsedName(onMouseDragReleasedProperty,[Default]), UsedName(impl_transformsChanged,[Default]), UsedName(setOnRotationStarted,[Default]), UsedName(setEventHandler,[Default]), UsedName(getCullFace,[Default]), UsedName(getEventDispatcher,[Default]), UsedName(accessibleRoleProperty,[Default]), UsedName(depthTestProperty,[Default]), UsedName(applyCss,[Default]), UsedName(getOnSwipeRight,[Default]), UsedName(computeDerivedDepthTest,[Default]), UsedName(onSwipeRightProperty,[Default]), UsedName(setEventDispatcher,[Default]), UsedName(setOnDragEntered,[Default]), UsedName(removeEventHandler,[Default]), UsedName(impl_setShowMnemonics,[Default]), UsedName(onRotationFinishedProperty,[Default]), UsedName(impl_cssGetCursorInitialValue,[Default]), UsedName(setOnTouchStationary,[Default]), UsedName(impl_pickNode,[Default]), UsedName(setLayoutY,[Default]), UsedName(lookupAll,[Default]), UsedName(scaleZProperty,[Default]), UsedName(rotateProperty,[Default]), UsedName(onTouchReleasedProperty,[Default]), UsedName(pressedProperty,[Default]), UsedName(setCache,[Default]), UsedName(onZoomProperty,[Default]), UsedName(setMaterial,[Default]), UsedName(boundsChanged,[Default]), UsedName(impl_processCSS,[Default]), UsedName(setAccessibleRole,[Default]), UsedName(setPressed,[Default]), UsedName(getAccessibleText,[Default]), UsedName(isConnected,[Default]), UsedName(onTouchMovedProperty,[Default]), UsedName(setOpacity,[Default]), UsedName(impl_isShowMnemonics,[Default]), UsedName(onDragEnteredProperty,[Default]), UsedName(clipProperty,[Default]), UsedName(scaleXProperty,[Default]), UsedName(cursorProperty,[Default]), UsedName(toBack,[Default]), UsedName(setEffect,[Default]), UsedName(setOnMouseDragReleased,[Default]), UsedName(getOnMouseMoved,[Default]), UsedName(onMouseExitedProperty,[Default]), UsedName(getDrawMode,[Default]), UsedName(wouldCreateCycle,[Default]), UsedName(setTranslateX,[Default]), UsedName(getLayoutY,[Default]), UsedName(getDivisions,[Default]), UsedName(setTranslateY,[Default]), UsedName(setOnZoomFinished,[Default]), UsedName(onMouseEnteredProperty,[Default]), UsedName(cssFlag,[Default]), UsedName(impl_intersects,[Default]), UsedName(getOnKeyPressed,[Default]), UsedName(getOnMouseDragOver,[Default]), UsedName(onTouchPressedProperty,[Default]), UsedName(getOnScrollStarted,[Default]), UsedName(setHover,[Default]), UsedName(getTranslateX,[Default]), UsedName(onZoomFinishedProperty,[Default]), UsedName(setBlendMode,[Default]), UsedName(addEventFilter,[Default]), UsedName(transformedBoundsChanged,[Default]), UsedName(eq,[Default]), UsedName(impl_getStyleMap,[Default]), UsedName(localToParentTransformProperty,[Default]), UsedName(isFocusTraversable,[Default]))) invalidates 1 classes due to The scalation.scala3d.Line3Dend has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(autosize,[Default]), UsedName(onKeyTypedProperty,[Default]), UsedName(blendModeProperty,[Default]), UsedName(getId,[Default]), UsedName(getTranslateZ,[Default]), UsedName(materialProperty,[Default]), UsedName(getOnZoom,[Default]), UsedName(getOnSwipeUp,[Default]), UsedName(equals,[Default]), UsedName(getOnDragDone,[Default]), UsedName(impl_getPivotY,[Default]), UsedName(minWidth,[Default]), UsedName(setAccessibleText,[Default]), UsedName(setFocused,[Default]), UsedName(getOnMouseReleased,[Default]), UsedName(getOnZoomFinished,[Default]), UsedName(setStyle,[Default]), UsedName(getOnMouseExited,[Default]), UsedName(Line3Dend,[Default]), UsedName(getLocalToSceneTransform,[Default]), UsedName(onScrollFinishedProperty,[Default]), UsedName(setOnMouseMoved,[Default]), UsedName(maxWidth,[Default]), UsedName(removeEventFilter,[Default]), UsedName(impl_setStyleMap,[Default]), UsedName(maxHeight,[Default]), UsedName(isPressed,[Default]), UsedName(hashCode,[Default]), UsedName(getTransforms,[Default]), UsedName(setOnScrollStarted,[Default]), UsedName(setOnMouseExited,[Default]), UsedName(setRotate,[Default]), UsedName(isFocused,[Default]), UsedName(inputMethodRequestsProperty,[Default]), UsedName(prefWidth,[Default]), UsedName(impl_pickNodeLocal,[Default]), UsedName(setInputMethodRequests,[Default]), UsedName(setOnRotationFinished,[Default]), UsedName(onScrollStartedProperty,[Default]), UsedName(accessibilityProperties,[Default]), UsedName(styleProperty,[Default]), UsedName(setOnContextMenuRequested,[Default]), UsedName(translateXProperty,[Default]), UsedName(getGeomBounds,[Default]), UsedName(rotationAxisProperty,[Default]), UsedName(effectiveNodeOrientationProperty,[Default]), UsedName(onZoomStartedProperty,[Default]), UsedName(setDerivedDepthTest,[Default]), UsedName($isInstanceOf,[Default]), UsedName(resizeRelocate,[Default]), UsedName(manager,[Default]), UsedName(containsBounds,[Default]), UsedName(getOnRotationStarted,[Default]), UsedName(getOnDragOver,[Default]), UsedName(clone,[Default]), UsedName(getBaselineOffset,[Default]), UsedName(cacheHintProperty,[Default]), UsedName(getOnZoomStarted,[Default]), UsedName(onMouseReleasedProperty,[Default]), UsedName(impl_geomChanged,[Default]), UsedName(notifyAccessibleAttributeChanged,[Default]), UsedName(requestFocus,[Default]), UsedName(effectProperty,[Default]), UsedName(onMousePressedProperty,[Default]), UsedName(setOnKeyTyped,[Default]), UsedName(pickOnBoundsProperty,[Default]), UsedName(impl_createPeer,[Default]), UsedName(isVisible,[Default]), UsedName(setOnSwipeDown,[Default]), UsedName(boundsInLocalProperty,[Default]), UsedName(setHeight,[Default]), UsedName(impl_hasTransforms,[Default]), UsedName(onSwipeDownProperty,[Default]), UsedName(setOnKeyReleased,[Default]), UsedName(isDisable,[Default]), UsedName(setOnMouseDragEntered,[Default]), UsedName(getOnTouchPressed,[Default]), UsedName(onMouseDragExitedProperty,[Default]), UsedName(addEventHandler,[Default]), UsedName(pseudoClassStateChanged,[Default]), UsedName(onDragDoneProperty,[Default]), UsedName(disableProperty,[Default]), UsedName(updateGeomBounds,[Default]), UsedName(toFront,[Default]), UsedName(setOnTouchReleased,[Default]), UsedName(impl_processMXNode,[Default]), UsedName(setOnMouseDragged,[Default]), UsedName(angle,[Default]), UsedName(layoutYProperty,[Default]), UsedName(setOnMouseReleased,[Default]), UsedName(boundsInParentProperty,[Default]), UsedName(getLocalToParentTransform,[Default]), UsedName(getSubScene,[Default]), UsedName(impl_isDirty,[Default]), UsedName(impl_notifyLayoutBoundsChanged,[Default]), UsedName(onDragDroppedProperty,[Default]), UsedName(getOnContextMenuRequested,[Default]), UsedName(impl_traverse,[Default]), UsedName(isInstanceOf,[Default]), UsedName(isResizable,[Default]), UsedName(impl_getLeafTransform,[Default]), UsedName(setLayoutX,[Default]), UsedName(setOnMousePressed,[Default]), UsedName(hoverProperty,[Default]), UsedName(getOnScroll,[Default]), UsedName(setCacheHint,[Default]), UsedName(getOnTouchReleased,[Default]), UsedName(setUserData,[Default]), UsedName(boundedSize,[Default]), UsedName(sceneToLocal,[Default]), UsedName(updateBounds,[Default]), UsedName(getCursor,[Default]), UsedName(scaleYProperty,[Default]), UsedName(mouseTransparentProperty,[Default]), UsedName(onMouseClickedProperty,[Default]), UsedName(finalize,[Default]), UsedName(getTransformedBounds,[Default]), UsedName(setScaleX,[Default]), UsedName(localToParent,[Default]), UsedName(getParent,[Default]), UsedName(onContextMenuRequestedProperty,[Default]), UsedName(updateLocalToParentTransform,[Default]), UsedName(setOnScrollFinished,[Default]), UsedName(setOnDragOver,[Default]), UsedName(asInstanceOf,[Default]), UsedName(setDisabled,[Default]), UsedName(FocusedProperty,[Default]), UsedName(getStyle,[Default]), UsedName($asInstanceOf,[Default]), UsedName(prefHeight,[Default]), UsedName(impl_cssGetFocusTraversableInitialValue,[Default]), UsedName(setOnZoom,[Default]), UsedName(getOnKeyReleased,[Default]), UsedName(impl_computeIntersects,[Default]), UsedName(eventDispatcherProperty,[Default]), UsedName(key,[Default]), UsedName(getTranslateY,[Default]), UsedName(sceneProperty,[Default]), UsedName(setOnSwipeLeft,[Default]), UsedName(getAccessible,[Default]), UsedName(pseudoClassStates,[Default]), UsedName(onDragDetectedProperty,[Default]), UsedName(lookup,[Default]), UsedName(setOnSwipeRight,[Default]), UsedName(drawModeProperty,[Default]), UsedName(cacheProperty,[Default]), UsedName(impl_computeGeomBounds,[Default]), UsedName(!=,[Default]), UsedName(notifyParentOfBoundsChange,[Default]), UsedName(parentResolvedOrientationInvalidated,[Default]), UsedName(getSpheres,[Default]), UsedName(impl_treeVisibleProperty,[Default]), UsedName(setCullFace,[Default]), UsedName(executeAccessibleAction,[Default]), UsedName(onInputMethodTextChangedProperty,[Default]), UsedName(impl_computeContains,[Default]), UsedName(getCssMetaData,[Default]), UsedName(getLocalBounds,[Default]), UsedName(notifyAll,[Default]), UsedName(translateZProperty,[Default]), UsedName(getOnMousePressed,[Default]), UsedName(setOnMouseDragOver,[Default]), UsedName(getStyleClass,[Default]), UsedName(cullFaceProperty,[Default]), UsedName(onDragOverProperty,[Default]), UsedName(getOnInputMethodTextChanged,[Default]), UsedName(radiusProperty,[Default]), UsedName(resize,[Default]), UsedName(setFocusTraversable,[Default]), UsedName(setOnMouseDragExited,[Default]), UsedName(onDragExitedProperty,[Default]), UsedName(getClass,[Default]), UsedName(notifyParentsOfInvalidatedCSS,[Default]), UsedName(heightProperty,[Default]), UsedName(getOnMouseDragExited,[Default]), UsedName(getEffect,[Default]), UsedName(setVisible,[Default]), UsedName(impl_layoutBoundsChanged,[Default]), UsedName(setOnTouchMoved,[Default]), UsedName(setOnDragDone,[Default]), UsedName(onSwipeLeftProperty,[Default]), UsedName(markDirtyLayoutBranch,[Default]), UsedName(setOnMouseClicked,[Default]), UsedName(setAccessibleRoleDescription,[Default]), UsedName(setOnDragDropped,[Default]), UsedName(contains,[Default]), UsedName(getClipParent,[Default]), UsedName(styleHelper,[Default]), UsedName(nodeResolvedOrientationChanged,[Default]), UsedName(localToScreen,[Default]), UsedName(startDragAndDrop,[Default]), UsedName(getOnDragDropped,[Default]), UsedName(disabledProperty,[Default]), UsedName(getBoundsInParent,[Default]), UsedName(getBlendMode,[Default]), UsedName(nodeResolvedOrientationInvalidated,[Default]), UsedName(sphere2,[Default]), UsedName(TreeVisiblePropertyReadOnly,[Default]), UsedName(getOnKeyTyped,[Default]), UsedName(onMouseDraggedProperty,[Default]), UsedName(onKeyPressedProperty,[Default]), UsedName(rotation,[Default]), UsedName(getCSSFlags,[Default]), UsedName(localToScene,[Default]), UsedName(setRotationAxis,[Default]), UsedName(translateYProperty,[Default]), UsedName(axis,[Default]), UsedName(snapshot,[Default]), UsedName(accessibleRoleDescriptionProperty,[Default]), UsedName(getOnDragExited,[Default]), UsedName(isCanReceiveFocus,[Default]), UsedName(opacityProperty,[Default]), UsedName(==,[Default]), UsedName(isDisabled,[Default]), UsedName(notify,[Default]), UsedName(isManaged,[Default]), UsedName(minHeight,[Default]), UsedName(idProperty,[Default]), UsedName(getLayoutBounds,[Default]), UsedName(setRadius,[Default]), UsedName(isDerivedDepthTest,[Default]), UsedName(getScene,[Default]), UsedName(setOnTouchPressed,[Default]), UsedName(getNodeOrientation,[Default]), UsedName(getPseudoClassStates,[Default]), UsedName(getRadius,[Default]), UsedName(accessibleHelpProperty,[Default]), UsedName(setParent,[Default]), UsedName(parentProperty,[Default]), UsedName(getLayoutX,[Default]), UsedName(getOpacity,[Default]), UsedName(scalation;scala3d;Line3Dend;init;,[Default]), UsedName(onMouseDragEnteredProperty,[Default]), UsedName(setDepthTest,[Default]), UsedName(setScaleZ,[Default]), UsedName(impl_updatePeer,[Default]), UsedName(setOnDragExited,[Default]), UsedName(setScaleY,[Default]), UsedName(getOnDragEntered,[Default]), UsedName(focusTraversableProperty,[Default]), UsedName(impl_getPivotZ,[Default]), UsedName(getContentBias,[Default]), UsedName(fireEvent,[Default]), UsedName(accessibleTextProperty,[Default]), UsedName(getOnMouseEntered,[Default]), UsedName(buildEventDispatchChain,[Default]), UsedName(impl_isTreeVisible,[Default]), UsedName(setCursor,[Default]), UsedName(usesMirroring,[Default]), UsedName(hasProperties,[Default]), UsedName(getMaterial,[Default]), UsedName(getAccessibleHelp,[Default]), UsedName(impl_intersectsBounds,[Default]), UsedName(focusedProperty,[Default]), UsedName(synchronized,[Default]), UsedName(setScenes,[Default]), UsedName(accessible,[Default]), UsedName(hasMirroring,[Default]), UsedName(onMouseDragOverProperty,[Default]), UsedName(queryAccessibleAttribute,[Default]), UsedName(onMouseMovedProperty,[Default]), UsedName(getDepthTest,[Default]), UsedName(setOnRotate,[Default]), UsedName(impl_markDirty,[Default]), UsedName(getCacheHint,[Default]), UsedName(getOnMouseDragEntered,[Default]), UsedName(getOnDragDetected,[Default]), UsedName(nodeOrientationProperty,[Default]), UsedName(getOnSwipeDown,[Default]), UsedName(setOnKeyPressed,[Default]), UsedName(toString,[Default]), UsedName(getScaleX,[Default]), UsedName(getOnRotationFinished,[Default]), UsedName(getOnTouchStationary,[Default]), UsedName(isHover,[Default]), UsedName(localBoundsChanged,[Default]), UsedName(getInputMethodRequests,[Default]), UsedName(##,[Default]), UsedName(setPickOnBounds,[Default]), UsedName(midPt,[Default]), UsedName(getBoundsInLocal,[Default]), UsedName(getProperties,[Default]), UsedName(intersects,[Default]), UsedName(getOnScrollFinished,[Default]), UsedName(releaseAccessible,[Default]), UsedName(setDrawMode,[Default]), UsedName(computeAreaInScreen,[Default]), UsedName(parentToLocal,[Default]), UsedName(translateMidpoint,[Default]), UsedName(getOnRotate,[Default]), UsedName(setTreeVisible,[Default]), UsedName(impl_isDirtyEmpty,[Default]), UsedName(isMouseTransparent,[Default]), UsedName(processCSS,[Default]), UsedName(setClip,[Default]), UsedName(getAccessibleRoleDescription,[Default]), UsedName(getStyleableParent,[Default]), UsedName(getScaleY,[Default]), UsedName(wait,[Default]), UsedName(setDisable,[Default]), UsedName(impl_syncPeer,[Default]), UsedName(visibleProperty,[Default]), UsedName(getCurrentLocalToSceneTransformState,[Default]), UsedName(getHeight,[Default]), UsedName(setOnSwipeUp,[Default]), UsedName(setId,[Default]), UsedName(startFullDrag,[Default]), UsedName(getScaleZ,[Default]), UsedName(impl_computeLayoutBounds,[Default]), UsedName(onSwipeUpProperty,[Default]), UsedName(scenesChanged,[Default]), UsedName(sphere1,[Default]), UsedName(getRotate,[Default]), UsedName(setMouseTransparent,[Default]), UsedName(isCache,[Default]), UsedName(setAccessibleHelp,[Default]), UsedName(notifyManagedChanged,[Default]), UsedName(onKeyReleasedProperty,[Default]), UsedName(impl_showMnemonicsProperty,[Default]), UsedName(setOnInputMethodTextChanged,[Default]), UsedName(layoutBoundsProperty,[Default]), UsedName(getTypeSelector,[Default]), UsedName(getEffectiveNodeOrientation,[Default]), UsedName(getUserData,[Default]), UsedName(isPickOnBounds,[Default]), UsedName(setOnScroll,[Default]), UsedName(onRotationStartedProperty,[Default]), UsedName(impl_getPivotX,[Default]), UsedName(getAccessibleRole,[Default]), UsedName(ne,[Default]), UsedName(getRotationAxis,[Default]), UsedName(managedProperty,[Default]), UsedName(getOnTouchMoved,[Default]), UsedName(localToSceneTransformProperty,[Default]), UsedName(onRotateProperty,[Default]), UsedName(screenToLocal,[Default]), UsedName(onScrollProperty,[Default]), UsedName(indent,[Default]), UsedName(getClip,[Default]), UsedName(relocate,[Default]), UsedName(impl_getPeer,[Default]), UsedName(getOnSwipeLeft,[Default]), UsedName(updateTxBounds,[Default]), UsedName(setManaged,[Default]), UsedName(setOnDragDetected,[Default]), UsedName(setNodeOrientation,[Default]), UsedName(setOnMouseEntered,[Default]), UsedName(getOnMouseClicked,[Default]), UsedName(setOnZoomStarted,[Default]), UsedName(impl_findStyles,[Default]), UsedName(onTouchStationaryProperty,[Default]), UsedName(setTranslateZ,[Default]), UsedName(impl_reapplyCSS,[Default]), UsedName(impl_clearDirty,[Default]), UsedName(getOnMouseDragged,[Default]), UsedName(layoutXProperty,[Default]), UsedName(getOnMouseDragReleased,[Default]), UsedName(onMouseDragReleasedProperty,[Default]), UsedName(impl_transformsChanged,[Default]), UsedName(setOnRotationStarted,[Default]), UsedName(setEventHandler,[Default]), UsedName(getCullFace,[Default]), UsedName(getEventDispatcher,[Default]), UsedName(accessibleRoleProperty,[Default]), UsedName(depthTestProperty,[Default]), UsedName(applyCss,[Default]), UsedName(getOnSwipeRight,[Default]), UsedName(computeDerivedDepthTest,[Default]), UsedName(onSwipeRightProperty,[Default]), UsedName(setEventDispatcher,[Default]), UsedName(setOnDragEntered,[Default]), UsedName(removeEventHandler,[Default]), UsedName(impl_setShowMnemonics,[Default]), UsedName(onRotationFinishedProperty,[Default]), UsedName(impl_cssGetCursorInitialValue,[Default]), UsedName(setOnTouchStationary,[Default]), UsedName(impl_pickNode,[Default]), UsedName(setLayoutY,[Default]), UsedName(lookupAll,[Default]), UsedName(scaleZProperty,[Default]), UsedName(rotateProperty,[Default]), UsedName(onTouchReleasedProperty,[Default]), UsedName(pressedProperty,[Default]), UsedName(setCache,[Default]), UsedName(onZoomProperty,[Default]), UsedName(setMaterial,[Default]), UsedName(boundsChanged,[Default]), UsedName(impl_processCSS,[Default]), UsedName(setAccessibleRole,[Default]), UsedName(setPressed,[Default]), UsedName(getAccessibleText,[Default]), UsedName(isConnected,[Default]), UsedName(onTouchMovedProperty,[Default]), UsedName(setOpacity,[Default]), UsedName(impl_isShowMnemonics,[Default]), UsedName(onDragEnteredProperty,[Default]), UsedName(clipProperty,[Default]), UsedName(scaleXProperty,[Default]), UsedName(cursorProperty,[Default]), UsedName(toBack,[Default]), UsedName(setEffect,[Default]), UsedName(setOnMouseDragReleased,[Default]), UsedName(getOnMouseMoved,[Default]), UsedName(onMouseExitedProperty,[Default]), UsedName(getDrawMode,[Default]), UsedName(wouldCreateCycle,[Default]), UsedName(setTranslateX,[Default]), UsedName(getLayoutY,[Default]), UsedName(getDivisions,[Default]), UsedName(setTranslateY,[Default]), UsedName(setOnZoomFinished,[Default]), UsedName(onMouseEnteredProperty,[Default]), UsedName(cssFlag,[Default]), UsedName(impl_intersects,[Default]), UsedName(getOnKeyPressed,[Default]), UsedName(getOnMouseDragOver,[Default]), UsedName(onTouchPressedProperty,[Default]), UsedName(getOnScrollStarted,[Default]), UsedName(setHover,[Default]), UsedName(getTranslateX,[Default]), UsedName(onZoomFinishedProperty,[Default]), UsedName(setBlendMode,[Default]), UsedName(addEventFilter,[Default]), UsedName(transformedBoundsChanged,[Default]), UsedName(eq,[Default]), UsedName(impl_getStyleMap,[Default]), UsedName(localToParentTransformProperty,[Default]), UsedName(isFocusTraversable,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.scala3d.Line3Dend)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.MDualSim2WTest3...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.MDualSim2WTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.MDualSim2WTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.MDualSim2WTest3,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(MDualSim2WTest3,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.MDualSim2WTest3 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(MDualSim2WTest3,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.MDualSim2WTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.GraphGenTest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.GraphGenTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.GraphGenTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.GraphGenTest,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(gGen,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(GraphGenTest,[Default]), UsedName(!=,[Default]), UsedName(g1,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.GraphGenTest has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(gGen,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(GraphGenTest,[Default]), UsedName(!=,[Default]), UsedName(g1,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.GraphGenTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.distributed_db.createReply...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.distributed_db.createReply)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.distributed_db.createReply)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.distributed_db.RelationDBMaster: Set(UsedName(createReply,[Default]), UsedName(isInstanceOf,[Default]), UsedName(name,[Default]), UsedName(asInstanceOf,[Default]), UsedName(==,[Default]), UsedName(apply,[Default]), UsedName(ne,[Default]), UsedName(n,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.distributed_db.RelationDBWorker: Set(UsedName(createReply,[Default]), UsedName(isInstanceOf,[Default]), UsedName(name,[Default]), UsedName(asInstanceOf,[Default]), UsedName(==,[Default]), UsedName(apply,[Default]), UsedName(n,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.distributed_db.createReply,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(createReply,[Default]), UsedName(copy$default$1,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(canEqual,[Default]), UsedName(curried,[Default]), UsedName(productPrefix,[Default]), UsedName(tupled,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(name,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(copy$default$2,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(unapply,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(apply,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(scalation;distributed_db;createReply;init;,[Default]), UsedName(ne,[Default]), UsedName(n,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 3 classes due to The scalation.distributed_db.createReply has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(createReply,[Default]), UsedName(copy$default$1,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(canEqual,[Default]), UsedName(curried,[Default]), UsedName(productPrefix,[Default]), UsedName(tupled,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(name,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(copy$default$2,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(unapply,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(apply,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(scalation;distributed_db;createReply;init;,[Default]), UsedName(ne,[Default]), UsedName(n,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.distributed_db.createReply)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> by member reference: Set(scalation.distributed_db.RelationDBMaster, scalation.distributed_db.RelationDBWorker)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graphalytics.DualSim2...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graphalytics.DualSim2)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graphalytics.DualSim2)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graphalytics.DualSim2,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(test$default$2,[Default]), UsedName(overlaps,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(isInstanceOf,[Default]), UsedName(bijections,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(disjoint,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(qRange,[Default]), UsedName(notifyAll,[Default]), UsedName(SELF_LOOPS,[Default]), UsedName(getClass,[Default]), UsedName(LIMIT,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(feasibleMates,[Default]), UsedName(scalation;graphalytics;DualSim2;init;,[Default]), UsedName(CHECK,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(test,[Default]), UsedName(showMappings,[Default]), UsedName(wait,[Default]), UsedName(DualSim2,[Default]), UsedName(ne,[Default]), UsedName(prune,[Default]), UsedName(mappings,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.graphalytics.DualSim2 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(test$default$2,[Default]), UsedName(overlaps,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(isInstanceOf,[Default]), UsedName(bijections,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(disjoint,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(qRange,[Default]), UsedName(notifyAll,[Default]), UsedName(SELF_LOOPS,[Default]), UsedName(getClass,[Default]), UsedName(LIMIT,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(feasibleMates,[Default]), UsedName(scalation;graphalytics;DualSim2;init;,[Default]), UsedName(CHECK,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(test,[Default]), UsedName(showMappings,[Default]), UsedName(wait,[Default]), UsedName(DualSim2,[Default]), UsedName(ne,[Default]), UsedName(prune,[Default]), UsedName(mappings,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graphalytics.DualSim2)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graphalytics.GraphTest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graphalytics.GraphTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graphalytics.GraphTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graphalytics.GraphTest,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(GraphTest,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graphalytics.GraphTest has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(GraphTest,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graphalytics.GraphTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.MinSpanningTreeTest2...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.MinSpanningTreeTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.MinSpanningTreeTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.MinSpanningTreeTest2,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(st,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(MinSpanningTreeTest2,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.MinSpanningTreeTest2 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(st,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(MinSpanningTreeTest2,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.MinSpanningTreeTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.image.package...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.image.package)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.image.package)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.image.package,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(package,[Default]), UsedName(ne,[Default]), UsedName(BASE_DIR,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.image.package has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(package,[Default]), UsedName(ne,[Default]), UsedName(BASE_DIR,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.image.package)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.MGraphSimWTest5...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.MGraphSimWTest5)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.MGraphSimWTest5)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.MGraphSimWTest5,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(MGraphSimWTest5,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.MGraphSimWTest5 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(MGraphSimWTest5,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.MGraphSimWTest5)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.MDualSim2XTest5...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.MDualSim2XTest5)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.MDualSim2XTest5)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.MDualSim2XTest5,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(MDualSim2XTest5,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.MDualSim2XTest5 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(MDualSim2XTest5,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.MDualSim2XTest5)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graphalytics.ColorDAG...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graphalytics.ColorDAG)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graphalytics.ColorDAG)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graphalytics.ColorDAG,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName(Edge,[Default]), UsedName(randCol,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(nColors,[Default]), UsedName(printColors,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(scalation;graphalytics;ColorDAG;init;,[Default]), UsedName(!=,[Default]), UsedName(genNodes,[Default]), UsedName(notifyAll,[Default]), UsedName(printInOut,[Default]), UsedName(getClass,[Default]), UsedName(nodes,[Default]), UsedName(printColorTree,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(randOut,[Default]), UsedName(connect,[Default]), UsedName(stages,[Default]), UsedName(ColorDAG,[Default]), UsedName(popInOut,[Default]), UsedName(synchronized,[Default]), UsedName(genUniqueColor,[Default]), UsedName(toString,[Default]), UsedName(edges,[Default]), UsedName(##,[Default]), UsedName(randIn,[Default]), UsedName(colors,[Default]), UsedName(printDAG,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(DagNode,[Default]), UsedName(checkIO,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.graphalytics.ColorDAG has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName(Edge,[Default]), UsedName(randCol,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(nColors,[Default]), UsedName(printColors,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(scalation;graphalytics;ColorDAG;init;,[Default]), UsedName(!=,[Default]), UsedName(genNodes,[Default]), UsedName(notifyAll,[Default]), UsedName(printInOut,[Default]), UsedName(getClass,[Default]), UsedName(nodes,[Default]), UsedName(printColorTree,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(randOut,[Default]), UsedName(connect,[Default]), UsedName(stages,[Default]), UsedName(ColorDAG,[Default]), UsedName(popInOut,[Default]), UsedName(synchronized,[Default]), UsedName(genUniqueColor,[Default]), UsedName(toString,[Default]), UsedName(edges,[Default]), UsedName(##,[Default]), UsedName(randIn,[Default]), UsedName(colors,[Default]), UsedName(printDAG,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(DagNode,[Default]), UsedName(checkIO,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graphalytics.ColorDAG)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.DualIsoTest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.DualIsoTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.DualIsoTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.DualIsoTest,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(matcher,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(DualIsoTest,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(psi,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.DualIsoTest has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(matcher,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(DualIsoTest,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(psi,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.DualIsoTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.MDualSim2WTest2...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.MDualSim2WTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.MDualSim2WTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.MDualSim2WTest2,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(MDualSim2WTest2,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.MDualSim2WTest2 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(MDualSim2WTest2,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.MDualSim2WTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.dist_db.delete...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.dist_db.delete)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.dist_db.delete)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.dist_db.RelDBMaster: Set(UsedName(delete,[Default]), UsedName(isInstanceOf,[Default]), UsedName(name,[Default]), UsedName(asInstanceOf,[Default]), UsedName(==,[Default]), UsedName(apply,[Default]), UsedName(ne,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.dist_db.delete,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(copy$default$1,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(delete,[Default]), UsedName(canEqual,[Default]), UsedName(productPrefix,[Default]), UsedName(compose,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(name,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(andThen,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(unapply,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(apply,[Default]), UsedName(scalation;dist_db;delete;init;,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 2 classes due to The scalation.dist_db.delete has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(copy$default$1,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(delete,[Default]), UsedName(canEqual,[Default]), UsedName(productPrefix,[Default]), UsedName(compose,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(name,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(andThen,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(unapply,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(apply,[Default]), UsedName(scalation;dist_db;delete;init;,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.dist_db.delete)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> by member reference: Set(scalation.dist_db.RelDBMaster)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.GraphSimTest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.GraphSimTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.GraphSimTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.GraphSimTest,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(GraphSimTest,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.GraphSimTest has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(GraphSimTest,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.GraphSimTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.MDualIsoTest3...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.MDualIsoTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.MDualIsoTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.MDualIsoTest3,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(matcher,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(qAvDegree,[Default]), UsedName(qSize,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(mgGen,[Default]), UsedName(g,[Default]), UsedName(gAvDegree,[Default]), UsedName(nLabels,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(gSize,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(MDualIsoTest3,[Default]), UsedName(ne,[Default]), UsedName(psi,[Default]), UsedName(eLabels,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.MDualIsoTest3 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(matcher,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(qAvDegree,[Default]), UsedName(qSize,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(mgGen,[Default]), UsedName(g,[Default]), UsedName(gAvDegree,[Default]), UsedName(nLabels,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(gSize,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(MDualIsoTest3,[Default]), UsedName(ne,[Default]), UsedName(psi,[Default]), UsedName(eLabels,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.MDualIsoTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graphalytics.DualSim2Test...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graphalytics.DualSim2Test)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graphalytics.DualSim2Test)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graphalytics.DualSim2Test,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(DualSim2Test,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graphalytics.DualSim2Test has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(DualSim2Test,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graphalytics.DualSim2Test)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.preprocessing.package...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.preprocessing.package)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.preprocessing.package)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.preprocessing.PreProcessingMaster: Set(UsedName(isInstanceOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(==,[Default]), UsedName(package,[Default]), UsedName(mapToInt,[Default]), UsedName(replaceMissingValues,[Default]), UsedName(replaceMissingStrings,[Default]), UsedName(project,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.preprocessing.package,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(rmOutliers,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(package,[Default]), UsedName(ne,[Default]), UsedName(mapToInt,[Default]), UsedName(replaceMissingValues,[Default]), UsedName(replaceMissingStrings,[Default]), UsedName(project,[Default]), UsedName(eq,[Default]))) invalidates 2 classes due to The scalation.preprocessing.package has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(rmOutliers,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(package,[Default]), UsedName(ne,[Default]), UsedName(mapToInt,[Default]), UsedName(replaceMissingValues,[Default]), UsedName(replaceMissingStrings,[Default]), UsedName(project,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.preprocessing.package)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> by member reference: Set(scalation.preprocessing.PreProcessingMaster)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graphalytics.GraphSim...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graphalytics.GraphSim)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graphalytics.GraphSim)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graphalytics.GraphSim,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(test$default$2,[Default]), UsedName(overlaps,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(scalation;graphalytics;GraphSim;init;,[Default]), UsedName(isInstanceOf,[Default]), UsedName(bijections,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(disjoint,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(qRange,[Default]), UsedName(notifyAll,[Default]), UsedName(SELF_LOOPS,[Default]), UsedName(getClass,[Default]), UsedName(LIMIT,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(feasibleMates,[Default]), UsedName(CHECK,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(test,[Default]), UsedName(showMappings,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(prune,[Default]), UsedName(GraphSim,[Default]), UsedName(mappings,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.graphalytics.GraphSim has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(test$default$2,[Default]), UsedName(overlaps,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(scalation;graphalytics;GraphSim;init;,[Default]), UsedName(isInstanceOf,[Default]), UsedName(bijections,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(disjoint,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(qRange,[Default]), UsedName(notifyAll,[Default]), UsedName(SELF_LOOPS,[Default]), UsedName(getClass,[Default]), UsedName(LIMIT,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(feasibleMates,[Default]), UsedName(CHECK,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(test,[Default]), UsedName(showMappings,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(prune,[Default]), UsedName(GraphSim,[Default]), UsedName(mappings,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graphalytics.GraphSim)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.TreeTest2...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.TreeTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.TreeTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.TreeTest2,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(ct,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(TreeTest2,[Default]), UsedName(synchronized,[Default]), UsedName(FANOUT,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(root,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.TreeTest2 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(ct,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(TreeTest2,[Default]), UsedName(synchronized,[Default]), UsedName(FANOUT,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(root,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.TreeTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.spatial.LatitudeLongitudeTest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.spatial.LatitudeLongitudeTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.spatial.LatitudeLongitudeTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.spatial.LatitudeLongitudeTest,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(uTM,[Default]), UsedName(latLong,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(LatitudeLongitudeTest,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.spatial.LatitudeLongitudeTest has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(uTM,[Default]), UsedName(latLong,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(LatitudeLongitudeTest,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.spatial.LatitudeLongitudeTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.columnar_db.OutlierTest2...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.columnar_db.OutlierTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.columnar_db.OutlierTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.columnar_db.OutlierTest2,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(ps,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(OutlierTest2,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(p,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.columnar_db.OutlierTest2 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(ps,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(OutlierTest2,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(p,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.columnar_db.OutlierTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.BoundedTreeWidthChains...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.BoundedTreeWidthChains)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.BoundedTreeWidthChains)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.BoundedTreeWidthChains,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(edgeUpdate,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(learnChain,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(BoundedTreeWidthChains,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.graph_db.BoundedTreeWidthChains has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(edgeUpdate,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(learnChain,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(BoundedTreeWidthChains,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.BoundedTreeWidthChains)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.MDualSim2XTest2...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.MDualSim2XTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.MDualSim2XTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.MDualSim2XTest2,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(MDualSim2XTest2,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.MDualSim2XTest2 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(MDualSim2XTest2,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.MDualSim2XTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.dist_db.createReply...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.dist_db.createReply)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.dist_db.createReply)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.dist_db.RelDBMaster: Set(UsedName(createReply,[Default]), UsedName(isInstanceOf,[Default]), UsedName(name,[Default]), UsedName(asInstanceOf,[Default]), UsedName(==,[Default]), UsedName(apply,[Default]), UsedName(ne,[Default]), UsedName(n,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.dist_db.RelDBWorker: Set(UsedName(createReply,[Default]), UsedName(isInstanceOf,[Default]), UsedName(name,[Default]), UsedName(asInstanceOf,[Default]), UsedName(==,[Default]), UsedName(apply,[Default]), UsedName(n,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.dist_db.createReply,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(createReply,[Default]), UsedName(copy$default$1,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(canEqual,[Default]), UsedName(curried,[Default]), UsedName(productPrefix,[Default]), UsedName(tupled,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(name,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(copy$default$2,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(scalation;dist_db;createReply;init;,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(unapply,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(apply,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(n,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 3 classes due to The scalation.dist_db.createReply has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(createReply,[Default]), UsedName(copy$default$1,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(canEqual,[Default]), UsedName(curried,[Default]), UsedName(productPrefix,[Default]), UsedName(tupled,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(name,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(copy$default$2,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(scalation;dist_db;createReply;init;,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(unapply,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(apply,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(n,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.dist_db.createReply)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> by member reference: Set(scalation.dist_db.RelDBMaster, scalation.dist_db.RelDBWorker)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.MStrictSimTest2...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.MStrictSimTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.MStrictSimTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.MStrictSimTest2,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(MStrictSimTest2,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.MStrictSimTest2 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(MStrictSimTest2,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.MStrictSimTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graphalytics.GraphIO...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graphalytics.GraphIO)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graphalytics.GraphIO)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graphalytics.GraphIO,ModifiedNames(changes = UsedName(write2IgraphFiles,[Default]), UsedName(equals,[Default]), UsedName(makeSet,[Default]), UsedName(apply$default$2,[Default]), UsedName(hashCode,[Default]), UsedName(read2Files,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(apply$default$3,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(write,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(apply$default$4,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(read2Files$default$3,[Default]), UsedName(apply,[Default]), UsedName(write$default$3,[Default]), UsedName(write$default$2,[Default]), UsedName(synchronized,[Default]), UsedName(scalation;graphalytics;GraphIO;init;,[Default]), UsedName(toString,[Default]), UsedName(GraphIO,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(write$default$1,[Default]), UsedName(ne,[Default]), UsedName(write2Neo4JFiles,[Default]), UsedName(read2PajekFile,[Default]), UsedName(read2PajekFile$default$3,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.graphalytics.GraphIO has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(write2IgraphFiles,[Default]), UsedName(equals,[Default]), UsedName(makeSet,[Default]), UsedName(apply$default$2,[Default]), UsedName(hashCode,[Default]), UsedName(read2Files,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(apply$default$3,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(write,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(apply$default$4,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(read2Files$default$3,[Default]), UsedName(apply,[Default]), UsedName(write$default$3,[Default]), UsedName(write$default$2,[Default]), UsedName(synchronized,[Default]), UsedName(scalation;graphalytics;GraphIO;init;,[Default]), UsedName(toString,[Default]), UsedName(GraphIO,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(write$default$1,[Default]), UsedName(ne,[Default]), UsedName(write2Neo4JFiles,[Default]), UsedName(read2PajekFile,[Default]), UsedName(read2PajekFile$default$3,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graphalytics.GraphIO)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.MGraphSimCARTest4...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.MGraphSimCARTest4)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.MGraphSimCARTest4)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.MGraphSimCARTest4,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(MGraphSimCARTest4,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.MGraphSimCARTest4 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(MGraphSimCARTest4,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.MGraphSimCARTest4)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graphalytics.GraphTest2...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graphalytics.GraphTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graphalytics.GraphTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graphalytics.GraphTest2,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(GraphTest2,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graphalytics.GraphTest2 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(GraphTest2,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graphalytics.GraphTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.dist_db.DistUtil...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.dist_db.DistUtil)[0m
[0m[[0m[0mdebug[0m] [0m[0mIncluding scalation.dist_db.RelDBMaster by scalation.dist_db.DistUtil[0m
[0m[[0m[0mdebug[0m] [0m[0mIncluding scalation.dist_db.RelDBWorker by scalation.dist_db.DistUtil[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.dist_db.RelDBMaster, scalation.dist_db.DistUtil, scalation.dist_db.RelDBWorker)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.dist_db.RelDBMaster: Set(UsedName(rSeq,[Default]), UsedName(randomSeed,[Default]), UsedName(numOfRoutees,[Default]), UsedName(retTableMap,[Default]), UsedName(ri,[Default]), UsedName(isInstanceOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(updating,[Default]), UsedName(DistUtil,[Default]), UsedName(==,[Default]), UsedName(tableMap,[Default]), UsedName(ne,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.dist_db.RelDBWorker: Set(UsedName(rSeq,[Default]), UsedName(isInstanceOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(DistUtil,[Default]), UsedName(==,[Default]), UsedName(tableMap,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.dist_db.RelDBMaster: Set(UsedName(rSeq,[Default]), UsedName(randomSeed,[Default]), UsedName(numOfRoutees,[Default]), UsedName(retTableMap,[Default]), UsedName(ri,[Default]), UsedName(isInstanceOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(updating,[Default]), UsedName(DistUtil,[Default]), UsedName(==,[Default]), UsedName(tableMap,[Default]), UsedName(ne,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.dist_db.DistUtil,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(rSeq,[Default]), UsedName(hashCode,[Default]), UsedName(randomSeed,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(numOfRoutees,[Default]), UsedName(retTableMap,[Default]), UsedName(ri,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(updating,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(DistUtil,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(tableMap,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 3 classes due to The scalation.dist_db.DistUtil has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(rSeq,[Default]), UsedName(hashCode,[Default]), UsedName(randomSeed,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(numOfRoutees,[Default]), UsedName(retTableMap,[Default]), UsedName(ri,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(updating,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(DistUtil,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(tableMap,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.dist_db.RelDBMaster, scalation.dist_db.DistUtil, scalation.dist_db.RelDBWorker)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> by member reference: Set(scalation.dist_db.RelDBMaster, scalation.dist_db.RelDBWorker)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.dist_db.RelDBWorker...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.dist_db.RelDBWorker)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.dist_db.RelDBWorker)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following member ref dependencies of scalation.dist_db.RelDBWorker are invalidated:[0m
[0m[[0m[0mdebug[0m] [0m[0m	scalation.dist_db.RelDBMaster[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.dist_db.RelDBWorker,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(rSeq,[Default]), UsedName(hashCode,[Default]), UsedName(randomSeed,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(numOfRoutees,[Default]), UsedName(retTableMap,[Default]), UsedName(receive,[Default]), UsedName(ri,[Default]), UsedName(isInstanceOf,[Default]), UsedName(self,[Implicit]), UsedName(finalize,[Default]), UsedName(preRestart,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(updating,[Default]), UsedName(aroundPreStart,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(postStop,[Default]), UsedName(getClass,[Default]), UsedName(postRestart,[Default]), UsedName(aroundPreRestart,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(tableMap,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(sender,[Default]), UsedName(wait,[Default]), UsedName(supervisorStrategy,[Default]), UsedName(aroundPostStop,[Default]), UsedName(ne,[Default]), UsedName(context,[Implicit]), UsedName(scalation;dist_db;RelDBWorker;init;,[Default]), UsedName(RelDBWorker,[Default]), UsedName(unhandled,[Default]), UsedName(DBWorker,[Default]), UsedName(Receive,[Default]), UsedName(aroundPostRestart,[Default]), UsedName(aroundReceive,[Default]), UsedName(preStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 2 classes due to The scalation.dist_db.RelDBWorker has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(self,[Implicit]), UsedName(context,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.dist_db.RelDBWorker)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> by member reference: Set(scalation.dist_db.RelDBMaster)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.preprocessing.PreProcessingMaster...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.preprocessing.PreProcessingMaster)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.preprocessing.PreProcessingMaster)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.preprocessing.PreProcessingMaster,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(receive,[Default]), UsedName(isInstanceOf,[Default]), UsedName(self,[Implicit]), UsedName(finalize,[Default]), UsedName(preRestart,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(scalation;preprocessing;PreProcessingMaster;init;,[Default]), UsedName(aroundPreStart,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(postStop,[Default]), UsedName(getClass,[Default]), UsedName(postRestart,[Default]), UsedName(aroundPreRestart,[Default]), UsedName(PreProcessingMaster,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(sender,[Default]), UsedName(wait,[Default]), UsedName(supervisorStrategy,[Default]), UsedName(aroundPostStop,[Default]), UsedName(ne,[Default]), UsedName(context,[Implicit]), UsedName(unhandled,[Default]), UsedName(Receive,[Default]), UsedName(aroundPostRestart,[Default]), UsedName(aroundReceive,[Default]), UsedName(PPHandler,[Default]), UsedName(preStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.preprocessing.PreProcessingMaster has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(self,[Implicit]), UsedName(context,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.preprocessing.PreProcessingMaster)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graphalytics.DualSim...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graphalytics.DualSim)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graphalytics.DualSim)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graphalytics.DualSim,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(test$default$2,[Default]), UsedName(overlaps,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(scalation;graphalytics;DualSim;init;,[Default]), UsedName(clone,[Default]), UsedName(isInstanceOf,[Default]), UsedName(bijections,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(disjoint,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(qRange,[Default]), UsedName(notifyAll,[Default]), UsedName(SELF_LOOPS,[Default]), UsedName(getClass,[Default]), UsedName(LIMIT,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(feasibleMates,[Default]), UsedName(CHECK,[Default]), UsedName(DualSim,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(test,[Default]), UsedName(showMappings,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(prune,[Default]), UsedName(mappings,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.graphalytics.DualSim has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(test$default$2,[Default]), UsedName(overlaps,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(scalation;graphalytics;DualSim;init;,[Default]), UsedName(clone,[Default]), UsedName(isInstanceOf,[Default]), UsedName(bijections,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(disjoint,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(qRange,[Default]), UsedName(notifyAll,[Default]), UsedName(SELF_LOOPS,[Default]), UsedName(getClass,[Default]), UsedName(LIMIT,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(feasibleMates,[Default]), UsedName(CHECK,[Default]), UsedName(DualSim,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(test,[Default]), UsedName(showMappings,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(prune,[Default]), UsedName(mappings,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graphalytics.DualSim)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.PartitionTest2...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.PartitionTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.PartitionTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.PartitionTest2,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(dp,[Default]), UsedName(hashCode,[Default]), UsedName(PartitionTest2,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(edgeSum,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.PartitionTest2 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(dp,[Default]), UsedName(hashCode,[Default]), UsedName(PartitionTest2,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(edgeSum,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.PartitionTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graphalytics.GraphSimTest2...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graphalytics.GraphSimTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graphalytics.GraphSimTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graphalytics.GraphSimTest2,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(GraphSimTest2,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graphalytics.GraphSimTest2 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(GraphSimTest2,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graphalytics.GraphSimTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graphalytics.TreeTest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graphalytics.TreeTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graphalytics.TreeTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graphalytics.TreeTest,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(ct,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(TreeTest,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graphalytics.TreeTest has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(ct,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(TreeTest,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graphalytics.TreeTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.preprocessing.project...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.preprocessing.project)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.preprocessing.project)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.preprocessing.PreProcessingMaster: Set(UsedName(cNames,[Default]), UsedName(isInstanceOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(==,[Default]), UsedName(apply,[Default]), UsedName(r,[Default]), UsedName(project,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.preprocessing.project,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(copy$default$1,[Default]), UsedName(hashCode,[Default]), UsedName(cNames,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(canEqual,[Default]), UsedName(scalation;preprocessing;project;init;,[Default]), UsedName(curried,[Default]), UsedName(productPrefix,[Default]), UsedName(tupled,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(copy$default$2,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(unapply,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(apply,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(r,[Default]), UsedName(project,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 2 classes due to The scalation.preprocessing.project has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(copy$default$1,[Default]), UsedName(hashCode,[Default]), UsedName(cNames,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(canEqual,[Default]), UsedName(scalation;preprocessing;project;init;,[Default]), UsedName(curried,[Default]), UsedName(productPrefix,[Default]), UsedName(tupled,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(copy$default$2,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(unapply,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(apply,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(r,[Default]), UsedName(project,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.preprocessing.project)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> by member reference: Set(scalation.preprocessing.PreProcessingMaster)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.MDualSim2X...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.MDualSim2X)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.MDualSim2X)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.MDualSim2X,ModifiedNames(changes = UsedName(MDualSim2X,[Default]), UsedName(equals,[Default]), UsedName(test$default$2,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(feasibleMatesW,[Default]), UsedName(isInstanceOf,[Default]), UsedName(bijections,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(disjoint,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(qRange,[Default]), UsedName(notifyAll,[Default]), UsedName(SELF_LOOPS,[Default]), UsedName(getClass,[Default]), UsedName(LIMIT,[Default]), UsedName(gRange,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(feasibleMates,[Default]), UsedName(CHECK,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(test,[Default]), UsedName(showMappings,[Default]), UsedName(wait,[Default]), UsedName(scalation;graph_db;pattern_matching;MDualSim2X;init;,[Default]), UsedName(ne,[Default]), UsedName(countMappings,[Default]), UsedName(filterGraph,[Default]), UsedName(prune,[Default]), UsedName(mappings,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.MDualSim2X has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(MDualSim2X,[Default]), UsedName(equals,[Default]), UsedName(test$default$2,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(feasibleMatesW,[Default]), UsedName(isInstanceOf,[Default]), UsedName(bijections,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(disjoint,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(qRange,[Default]), UsedName(notifyAll,[Default]), UsedName(SELF_LOOPS,[Default]), UsedName(getClass,[Default]), UsedName(LIMIT,[Default]), UsedName(gRange,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(feasibleMates,[Default]), UsedName(CHECK,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(test,[Default]), UsedName(showMappings,[Default]), UsedName(wait,[Default]), UsedName(scalation;graph_db;pattern_matching;MDualSim2X;init;,[Default]), UsedName(ne,[Default]), UsedName(countMappings,[Default]), UsedName(filterGraph,[Default]), UsedName(prune,[Default]), UsedName(mappings,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.MDualSim2X)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.columnar_db.RelationSQLTest2...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.columnar_db.RelationSQLTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.columnar_db.RelationSQLTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.columnar_db.RelationSQLTest2,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(RelationSQLTest2,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(professor,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.columnar_db.RelationSQLTest2 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(RelationSQLTest2,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(professor,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.columnar_db.RelationSQLTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.DualIsoTest2...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.DualIsoTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.DualIsoTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.DualIsoTest2,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(matcher,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(DualIsoTest2,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(psi,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.DualIsoTest2 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(matcher,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(DualIsoTest2,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(psi,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.DualIsoTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.distributed_db.RelationDBMasterTest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.distributed_db.RelationDBMasterTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.distributed_db.RelationDBMasterTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.distributed_db.RelationDBMasterTest,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(actorSystem,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(actor,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(RelationDBMasterTest,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.distributed_db.RelationDBMasterTest has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(actorSystem,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(actor,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(RelationDBMasterTest,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.distributed_db.RelationDBMasterTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.columnar_db.RelationSQL...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.columnar_db.RelationSQL)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.columnar_db.RelationSQL)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.columnar_db.RelationSQL,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(union,[Default]), UsedName(repr,[Default]), UsedName(reverseOrderBy,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(intersect,[Default]), UsedName(show,[Default]), UsedName(groupBy,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(show$default$1,[Default]), UsedName(RelationSQL,[Default]), UsedName(getClass,[Default]), UsedName(select,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(join,[Default]), UsedName(orderBy,[Default]), UsedName(apply,[Default]), UsedName(synchronized,[Default]), UsedName(<init>$default$6,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(minus,[Default]), UsedName(<init>$default$5,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(save,[Default]), UsedName(from,[Default]), UsedName(<init>$default$4,[Default]), UsedName(where,[Default]), UsedName(scalation;columnar_db;RelationSQL;init;,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.columnar_db.RelationSQL has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(union,[Default]), UsedName(repr,[Default]), UsedName(reverseOrderBy,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(intersect,[Default]), UsedName(show,[Default]), UsedName(groupBy,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(show$default$1,[Default]), UsedName(RelationSQL,[Default]), UsedName(getClass,[Default]), UsedName(select,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(join,[Default]), UsedName(orderBy,[Default]), UsedName(apply,[Default]), UsedName(synchronized,[Default]), UsedName(<init>$default$6,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(minus,[Default]), UsedName(<init>$default$5,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(save,[Default]), UsedName(from,[Default]), UsedName(<init>$default$4,[Default]), UsedName(where,[Default]), UsedName(scalation;columnar_db;RelationSQL;init;,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.columnar_db.RelationSQL)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.TightSimTest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.TightSimTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.TightSimTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.TightSimTest,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(TightSimTest,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.TightSimTest has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(TightSimTest,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.TightSimTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.MDualSimTest6...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.MDualSimTest6)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.MDualSimTest6)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.MDualSimTest6,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(MDualSimTest6,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.MDualSimTest6 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(MDualSimTest6,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.MDualSimTest6)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graphalytics.ColorDAG.DagNode...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graphalytics.ColorDAG.DagNode)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graphalytics.ColorDAG.DagNode)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graphalytics.ColorDAG.DagNode,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(outDegree,[Default]), UsedName(hashCode,[Default]), UsedName(unused,[Default]), UsedName($isInstanceOf,[Default]), UsedName(inColors,[Default]), UsedName(clone,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(out,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(isSink,[Default]), UsedName(getClass,[Default]), UsedName(scalation;graphalytics;ColorDAG;DagNode;init;,[Default]), UsedName(in,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(id,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(isSource,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(used,[Default]), UsedName(inDegree,[Default]), UsedName(DagNode,[Default]), UsedName(outColors,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.graphalytics.ColorDAG.DagNode has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(outDegree,[Default]), UsedName(hashCode,[Default]), UsedName(unused,[Default]), UsedName($isInstanceOf,[Default]), UsedName(inColors,[Default]), UsedName(clone,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(out,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(isSink,[Default]), UsedName(getClass,[Default]), UsedName(scalation;graphalytics;ColorDAG;DagNode;init;,[Default]), UsedName(in,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(id,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(isSource,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(used,[Default]), UsedName(inDegree,[Default]), UsedName(DagNode,[Default]), UsedName(outColors,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graphalytics.ColorDAG.DagNode)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.test.StrictPattern_STest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.test.StrictPattern_STest)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.test.StrictPattern_STest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.test.StrictPattern_STest,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(q4w,[Default]), UsedName(finalize,[Default]), UsedName(g4,[Default]), UsedName(q2,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(q3,[Default]), UsedName(synchronized,[Default]), UsedName(g2,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(StrictPattern_STest,[Default]), UsedName(q4x,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(g3,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.test.StrictPattern_STest has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(q4w,[Default]), UsedName(finalize,[Default]), UsedName(g4,[Default]), UsedName(q2,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(q3,[Default]), UsedName(synchronized,[Default]), UsedName(g2,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(StrictPattern_STest,[Default]), UsedName(q4x,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(g3,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.test.StrictPattern_STest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graphalytics.StrictSimTest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graphalytics.StrictSimTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graphalytics.StrictSimTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graphalytics.StrictSimTest,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(StrictSimTest,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graphalytics.StrictSimTest has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(StrictSimTest,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graphalytics.StrictSimTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.graph_algebra.RelationshipQuery...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.graph_algebra.RelationshipQuery)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.graph_algebra.RelationshipQuery)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.graph_algebra.RelationshipQuery,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(g1,[Default]), UsedName(neo4jQuery8,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(RelationshipQuery,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(neo4jQuery6,[Default]), UsedName(θ,[Default]), UsedName(wait,[Default]), UsedName(neo4jQuery5,[Default]), UsedName(ne,[Default]), UsedName(neo4jQuery7,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.graph_algebra.RelationshipQuery has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(g1,[Default]), UsedName(neo4jQuery8,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(RelationshipQuery,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(neo4jQuery6,[Default]), UsedName(θ,[Default]), UsedName(wait,[Default]), UsedName(neo4jQuery5,[Default]), UsedName(ne,[Default]), UsedName(neo4jQuery7,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.graph_algebra.RelationshipQuery)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graphalytics.GraphSimIsoTest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graphalytics.GraphSimIsoTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graphalytics.GraphSimIsoTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graphalytics.GraphSimIsoTest,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(matcher,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(qAvDegree,[Default]), UsedName(qSize,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(gAvDegree,[Default]), UsedName(nLabels,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(gSize,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(GraphSimIsoTest,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graphalytics.GraphSimIsoTest has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(matcher,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(qAvDegree,[Default]), UsedName(qSize,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(gAvDegree,[Default]), UsedName(nLabels,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(gSize,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(GraphSimIsoTest,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graphalytics.GraphSimIsoTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.LabelVer...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.LabelVer)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.LabelVer)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.LabelVer,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(readResolve,[Default]), UsedName(Wildcard,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(ValueSet,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(apply,[Default]), UsedName(nextName,[Default]), UsedName(nextId,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(version,[Default]), UsedName(##,[Default]), UsedName(ValueOrdering,[Default]), UsedName(wait,[Default]), UsedName(Value,[Default]), UsedName(Regex,[Default]), UsedName(ne,[Default]), UsedName(Normal,[Default]), UsedName(maxId,[Default]), UsedName(LabelVer,[Default]), UsedName(Val,[Default]), UsedName(values,[Default]), UsedName(withName,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.LabelVer has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(readResolve,[Default]), UsedName(Wildcard,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(ValueSet,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(apply,[Default]), UsedName(nextName,[Default]), UsedName(nextId,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(version,[Default]), UsedName(##,[Default]), UsedName(ValueOrdering,[Default]), UsedName(wait,[Default]), UsedName(Value,[Default]), UsedName(Regex,[Default]), UsedName(ne,[Default]), UsedName(Normal,[Default]), UsedName(maxId,[Default]), UsedName(LabelVer,[Default]), UsedName(Val,[Default]), UsedName(values,[Default]), UsedName(withName,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.LabelVer)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.scala3d.MoleculeSampleApp...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.scala3d.MoleculeSampleApp)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.scala3d.MoleculeSampleApp)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.scala3d.MoleculeSampleApp,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(init,[Default]), UsedName(scalation;scala3d;MoleculeSampleApp;init;,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(getHostServices,[Default]), UsedName(getParameters,[Default]), UsedName(notifyPreloader,[Default]), UsedName(moleculeGroup,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(cameraXform3,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(world,[Default]), UsedName(stop,[Default]), UsedName(MoleculeSampleApp,[Default]), UsedName(cameraXform,[Default]), UsedName(synchronized,[Default]), UsedName(start,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(cameraXform2,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(camera,[Default]), UsedName(root,[Default]), UsedName(axisGroup,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.scala3d.MoleculeSampleApp has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(init,[Default]), UsedName(scalation;scala3d;MoleculeSampleApp;init;,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(getHostServices,[Default]), UsedName(getParameters,[Default]), UsedName(notifyPreloader,[Default]), UsedName(moleculeGroup,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(cameraXform3,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(world,[Default]), UsedName(stop,[Default]), UsedName(MoleculeSampleApp,[Default]), UsedName(cameraXform,[Default]), UsedName(synchronized,[Default]), UsedName(start,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(cameraXform2,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(camera,[Default]), UsedName(root,[Default]), UsedName(axisGroup,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.scala3d.MoleculeSampleApp)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graphalytics.DualSimTest3...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graphalytics.DualSimTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graphalytics.DualSimTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graphalytics.DualSimTest3,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(DualSimTest3,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graphalytics.DualSimTest3 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(DualSimTest3,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graphalytics.DualSimTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graphalytics.GraphSim2Test3...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graphalytics.GraphSim2Test3)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graphalytics.GraphSim2Test3)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graphalytics.GraphSim2Test3,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(GraphSim2Test3,[Default]), UsedName($asInstanceOf,[Default]), UsedName(qAvDegree,[Default]), UsedName(qSize,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(gAvDegree,[Default]), UsedName(nLabels,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(gSize,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graphalytics.GraphSim2Test3 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(GraphSim2Test3,[Default]), UsedName($asInstanceOf,[Default]), UsedName(qAvDegree,[Default]), UsedName(qSize,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(gAvDegree,[Default]), UsedName(nLabels,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(gSize,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graphalytics.GraphSim2Test3)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.scala3d.PerspectiveCamera...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.scala3d.PerspectiveCamera)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.scala3d.PerspectiveCamera)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.scala3d.PerspectiveCamera,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(CAMERA_INITIAL_Y_ANGLE,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(apply,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(buildCamera,[Default]), UsedName(##,[Default]), UsedName(CAMERA_INITIAL_X_ANGLE,[Default]), UsedName(wait,[Default]), UsedName(CAMERA_INITIAL_DISTANCE,[Default]), UsedName(ne,[Default]), UsedName(PerspectiveCamera,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.scala3d.PerspectiveCamera has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(CAMERA_INITIAL_Y_ANGLE,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(apply,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(buildCamera,[Default]), UsedName(##,[Default]), UsedName(CAMERA_INITIAL_X_ANGLE,[Default]), UsedName(wait,[Default]), UsedName(CAMERA_INITIAL_DISTANCE,[Default]), UsedName(ne,[Default]), UsedName(PerspectiveCamera,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.scala3d.PerspectiveCamera)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.distributed_db.RelationDBMaster...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.distributed_db.RelationDBMaster)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.distributed_db.RelationDBMaster)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.distributed_db.RelationDBMaster,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(rSeq,[Default]), UsedName(hashCode,[Default]), UsedName(randomSeed,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(numOfRoutees,[Default]), UsedName(retTableMap,[Default]), UsedName(RelationDBMaster,[Default]), UsedName(receive,[Default]), UsedName(ri,[Default]), UsedName(isInstanceOf,[Default]), UsedName(self,[Implicit]), UsedName(finalize,[Default]), UsedName(preRestart,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(aroundPreStart,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(postStop,[Default]), UsedName(getClass,[Default]), UsedName(postRestart,[Default]), UsedName(aroundPreRestart,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(DBHandler,[Default]), UsedName(tableMap,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(sender,[Default]), UsedName(wait,[Default]), UsedName(supervisorStrategy,[Default]), UsedName(scalation;distributed_db;RelationDBMaster;init;,[Default]), UsedName(aroundPostStop,[Default]), UsedName(ne,[Default]), UsedName(context,[Implicit]), UsedName(unhandled,[Default]), UsedName(Receive,[Default]), UsedName(aroundPostRestart,[Default]), UsedName(router,[Default]), UsedName(aroundReceive,[Default]), UsedName(preStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.distributed_db.RelationDBMaster has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(self,[Implicit]), UsedName(context,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.distributed_db.RelationDBMaster)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.GraphGenTest8...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.GraphGenTest8)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.GraphGenTest8)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.GraphGenTest8,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(GraphGenTest8,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.GraphGenTest8 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(GraphGenTest8,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.GraphGenTest8)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.columnar_db.MM_RelationTest2...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.columnar_db.MM_RelationTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.columnar_db.MM_RelationTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.columnar_db.MM_RelationTest2,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(MM_RelationTest2,[Default]), UsedName(hashCode,[Default]), UsedName(weekend,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(week,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(weekdays,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.columnar_db.MM_RelationTest2 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(MM_RelationTest2,[Default]), UsedName(hashCode,[Default]), UsedName(weekend,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(week,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(weekdays,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.columnar_db.MM_RelationTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.dist_db.product...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.dist_db.product)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.dist_db.product)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.dist_db.RelDBMaster: Set(UsedName(isInstanceOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(rName,[Default]), UsedName(product,[Default]), UsedName(==,[Default]), UsedName(apply,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(r,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.dist_db.product,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(copy$default$1,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(canEqual,[Default]), UsedName(curried,[Default]), UsedName(scalation;dist_db;product;init;,[Default]), UsedName(productPrefix,[Default]), UsedName(tupled,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(copy$default$2,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(rName,[Default]), UsedName(getClass,[Default]), UsedName(product,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(unapply,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(apply,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(copy$default$3,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(r,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 2 classes due to The scalation.dist_db.product has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(copy$default$1,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(canEqual,[Default]), UsedName(curried,[Default]), UsedName(scalation;dist_db;product;init;,[Default]), UsedName(productPrefix,[Default]), UsedName(tupled,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(copy$default$2,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(rName,[Default]), UsedName(getClass,[Default]), UsedName(product,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(unapply,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(apply,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(copy$default$3,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(r,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.dist_db.product)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> by member reference: Set(scalation.dist_db.RelDBMaster)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.columnar_db.Outlier...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.columnar_db.Outlier)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.columnar_db.Outlier)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.columnar_db.Outlier,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(Outlier,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(rmOutliers,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(DEBUG,[Default]), UsedName(ne,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.columnar_db.Outlier has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(Outlier,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(rmOutliers,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(DEBUG,[Default]), UsedName(ne,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.columnar_db.Outlier)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.MStrictSimTest6...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.MStrictSimTest6)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.MStrictSimTest6)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.MStrictSimTest6,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(MStrictSimTest6,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.MStrictSimTest6 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(MStrictSimTest6,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.MStrictSimTest6)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.GraphDFS...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.GraphDFS)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.GraphDFS)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.GraphDFS,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName(find,[Default]), UsedName(scalation;graph_db;GraphDFS;init;,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(strongComps,[Default]), UsedName(isInstanceOf,[Default]), UsedName(GraphDFS,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(reach,[Default]), UsedName(!=,[Default]), UsedName(pred2,[Default]), UsedName(QUEUE,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(pred1,[Default]), UsedName(synchronized,[Default]), UsedName(visit,[Default]), UsedName(weakComps,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(STACK,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.graph_db.GraphDFS has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName(find,[Default]), UsedName(scalation;graph_db;GraphDFS;init;,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(strongComps,[Default]), UsedName(isInstanceOf,[Default]), UsedName(GraphDFS,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(reach,[Default]), UsedName(!=,[Default]), UsedName(pred2,[Default]), UsedName(QUEUE,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(pred1,[Default]), UsedName(synchronized,[Default]), UsedName(visit,[Default]), UsedName(weakComps,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(STACK,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.GraphDFS)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.MGraphSim2XTest2...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.MGraphSim2XTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.MGraphSim2XTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.MGraphSim2XTest2,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(MGraphSim2XTest2,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.MGraphSim2XTest2 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(MGraphSim2XTest2,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.MGraphSim2XTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graphalytics.DualIsoCAR...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graphalytics.DualIsoCAR)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graphalytics.DualIsoCAR)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graphalytics.DualIsoCAR,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(test$default$2,[Default]), UsedName(overlaps,[Default]), UsedName(setLimit,[Default]), UsedName(DualIsoCAR,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(bijectionsWithSets,[Default]), UsedName(clone,[Default]), UsedName(numMatches,[Default]), UsedName(isInstanceOf,[Default]), UsedName(bijections,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(disjoint,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(qRange,[Default]), UsedName(notifyAll,[Default]), UsedName(SELF_LOOPS,[Default]), UsedName(getClass,[Default]), UsedName(LIMIT,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(feasibleMates,[Default]), UsedName(scalation;graphalytics;DualIsoCAR;init;,[Default]), UsedName(CHECK,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(test,[Default]), UsedName(showMappings,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(prune,[Default]), UsedName(mappings,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.graphalytics.DualIsoCAR has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(test$default$2,[Default]), UsedName(overlaps,[Default]), UsedName(setLimit,[Default]), UsedName(DualIsoCAR,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(bijectionsWithSets,[Default]), UsedName(clone,[Default]), UsedName(numMatches,[Default]), UsedName(isInstanceOf,[Default]), UsedName(bijections,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(disjoint,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(qRange,[Default]), UsedName(notifyAll,[Default]), UsedName(SELF_LOOPS,[Default]), UsedName(getClass,[Default]), UsedName(LIMIT,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(feasibleMates,[Default]), UsedName(scalation;graphalytics;DualIsoCAR;init;,[Default]), UsedName(CHECK,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(test,[Default]), UsedName(showMappings,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(prune,[Default]), UsedName(mappings,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graphalytics.DualIsoCAR)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graphalytics.DualIsoTest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graphalytics.DualIsoTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graphalytics.DualIsoTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graphalytics.DualIsoTest,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(matcher,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(DualIsoTest,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(psi,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graphalytics.DualIsoTest has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(matcher,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(DualIsoTest,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(psi,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graphalytics.DualIsoTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.spatial.UTM2LatLong...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.spatial.UTM2LatLong)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.spatial.UTM2LatLong)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.spatial.UTM2LatLong,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(uTM2LatLong,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(getHemisphere,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(UTM2LatLong,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.spatial.UTM2LatLong has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(uTM2LatLong,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(getHemisphere,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(UTM2LatLong,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.spatial.UTM2LatLong)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.PartitionTest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.PartitionTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.PartitionTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.PartitionTest,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(dp,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(edgeSum,[Default]), UsedName(getClass,[Default]), UsedName(PartitionTest,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.PartitionTest has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(dp,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(edgeSum,[Default]), UsedName(getClass,[Default]), UsedName(PartitionTest,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.PartitionTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.MGraphSim2Test...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.MGraphSim2Test)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.MGraphSim2Test)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.MGraphSim2Test,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(MGraphSim2Test,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.MGraphSim2Test has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(MGraphSim2Test,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.MGraphSim2Test)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.scala3d.Line3DHelper...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.scala3d.Line3DHelper)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.scala3d.Line3DHelper)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.scala3d.Line3DHelper,ModifiedNames(changes = UsedName(anchorAngle,[Default]), UsedName(equals,[Default]), UsedName(init,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(Line3DHelper,[Default]), UsedName(getHostServices,[Default]), UsedName(getParameters,[Default]), UsedName(canEqual,[Default]), UsedName(notifyPreloader,[Default]), UsedName(productPrefix,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(anchorY,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(stop,[Default]), UsedName(synchronized,[Default]), UsedName(start,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(scalation;scala3d;Line3DHelper;init;,[Default]), UsedName(ne,[Default]), UsedName(mkEventHandler,[Default]), UsedName(camera,[Default]), UsedName(root,[Default]), UsedName(productIterator,[Default]), UsedName(anchorX,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.scala3d.Line3DHelper has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(anchorAngle,[Default]), UsedName(equals,[Default]), UsedName(init,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(Line3DHelper,[Default]), UsedName(getHostServices,[Default]), UsedName(getParameters,[Default]), UsedName(canEqual,[Default]), UsedName(notifyPreloader,[Default]), UsedName(productPrefix,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(anchorY,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(stop,[Default]), UsedName(synchronized,[Default]), UsedName(start,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(scalation;scala3d;Line3DHelper;init;,[Default]), UsedName(ne,[Default]), UsedName(mkEventHandler,[Default]), UsedName(camera,[Default]), UsedName(root,[Default]), UsedName(productIterator,[Default]), UsedName(anchorX,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.scala3d.Line3DHelper)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.MDualSimTest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.MDualSimTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.MDualSimTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.MDualSimTest,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(MDualSimTest,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.MDualSimTest has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(MDualSimTest,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.MDualSimTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.graph_algebra.TestOperator...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.graph_algebra.TestOperator)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.graph_algebra.TestOperator)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.graph_algebra.TestOperator,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(randGraph,[Default]), UsedName(args,[Default]), UsedName(neo4jQuery2,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(TestOperator,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(g1,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(neo4jQuery3,[Default]), UsedName(ng,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(rLabel,[Default]), UsedName(edgeLabel,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(vertexLabel,[Default]), UsedName(neo4jQuery6,[Default]), UsedName(θ,[Default]), UsedName(neo4jQuery4,[Default]), UsedName(wait,[Default]), UsedName(neo4jQuery1,[Default]), UsedName(neo4jQuery5,[Default]), UsedName(ne,[Default]), UsedName(labelType,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.graph_algebra.TestOperator has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(randGraph,[Default]), UsedName(args,[Default]), UsedName(neo4jQuery2,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(TestOperator,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(g1,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(neo4jQuery3,[Default]), UsedName(ng,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(rLabel,[Default]), UsedName(edgeLabel,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(vertexLabel,[Default]), UsedName(neo4jQuery6,[Default]), UsedName(θ,[Default]), UsedName(neo4jQuery4,[Default]), UsedName(wait,[Default]), UsedName(neo4jQuery1,[Default]), UsedName(neo4jQuery5,[Default]), UsedName(ne,[Default]), UsedName(labelType,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.graph_algebra.TestOperator)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graphalytics.TreeTest3...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graphalytics.TreeTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graphalytics.TreeTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graphalytics.TreeTest3,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(tree,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(FANOUT,[Default]), UsedName(toString,[Default]), UsedName(TreeTest3,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(root,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graphalytics.TreeTest3 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(tree,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(FANOUT,[Default]), UsedName(toString,[Default]), UsedName(TreeTest3,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(root,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graphalytics.TreeTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.MGraphSimCARTest5...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.MGraphSimCARTest5)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.MGraphSimCARTest5)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.MGraphSimCARTest5,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(MGraphSimCARTest5,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.MGraphSimCARTest5 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(MGraphSimCARTest5,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.MGraphSimCARTest5)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.MStrictSimTest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.MStrictSimTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.MStrictSimTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.MStrictSimTest,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(MStrictSimTest,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.MStrictSimTest has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(MStrictSimTest,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.MStrictSimTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.GraphTest5...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.GraphTest5)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.GraphTest5)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.GraphTest5,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(GraphTest5,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(g2im,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.GraphTest5 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(GraphTest5,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(g2im,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.GraphTest5)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.package...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.package)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.package)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.package,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName(EXT,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(Pair,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(package,[Default]), UsedName(ne,[Default]), UsedName(BASE_DIR,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.graph_db.package has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName(EXT,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(Pair,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(package,[Default]), UsedName(ne,[Default]), UsedName(BASE_DIR,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.package)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.columnar_db.RelationF...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.columnar_db.RelationF)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.columnar_db.RelationF)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.columnar_db.RelationF,ModifiedNames(changes = UsedName(σ,[Default]), UsedName(equals,[Default]), UsedName(union,[Default]), UsedName(pisigmaR,[Default]), UsedName(indextoKey,[Default]), UsedName(reverseOrderBy,[Default]), UsedName(fold,[Default]), UsedName(sigmaDpar,[Default]), UsedName(hashCode,[Default]), UsedName(leftJoin,[Default]), UsedName(row,[Default]), UsedName(toMatriII$default$3,[Default]), UsedName(intersect2,[Default]), UsedName(toMatriDD,[Default]), UsedName(writeJSON,[Default]), UsedName(eproject,[Default]), UsedName($isInstanceOf,[Default]), UsedName(sigmaD,[Default]), UsedName(generateIndex$default$1,[Default]), UsedName(toMatriD,[Default]), UsedName(clone,[Default]), UsedName(intersect,[Default]), UsedName(delete,[Default]), UsedName(show,[Default]), UsedName(sigmaR,[Default]), UsedName(uncompress,[Default]), UsedName(disambiguate,[Default]), UsedName(-,[Default]), UsedName(ωω,[Default]), UsedName(groupBy,[Default]), UsedName(selectL,[Default]), UsedName(isInstanceOf,[Default]), UsedName(toRleVectorD,[Default]), UsedName(toVectorD,[Default]), UsedName(max,[Default]), UsedName(π,[Default]), UsedName(rightJoinApx,[Default]), UsedName(mean,[Default]), UsedName(finalize,[Default]), UsedName(leftJoinApx,[Default]), UsedName(⋈,[Default]), UsedName(name,[Default]), UsedName(toMatriDD$default$3,[Default]), UsedName(asInstanceOf,[Default]), UsedName(update,[Default]), UsedName(pisigmaI,[Default]), UsedName(map,[Default]), UsedName($asInstanceOf,[Default]), UsedName(key,[Default]), UsedName(cols,[Default]), UsedName(pi,[Default]), UsedName(orderedIndex,[Default]), UsedName(filter,[Default]), UsedName(!=,[Default]), UsedName(toVectorS,[Default]), UsedName(toMatriI,[Default]), UsedName(epiAny,[Default]), UsedName(sigmaC,[Default]), UsedName(notifyAll,[Default]), UsedName(show$default$1,[Default]), UsedName(materialize,[Default]), UsedName(×,[Default]), UsedName(selectT,[Default]), UsedName(toVectorI,[Default]), UsedName(epi,[Default]), UsedName(domain,[Default]), UsedName(generateIndex,[Default]), UsedName(getClass,[Default]), UsedName(⋉$default$1,[Default]), UsedName(select,[Default]), UsedName(product,[Default]), UsedName(selectS,[Default]), UsedName(ζζ,[Default]), UsedName(toMatriI2$default$2,[Default]), UsedName(toMatriDI$default$3,[Default]), UsedName(contains,[Default]), UsedName(colNames,[Default]), UsedName(⋊,[Default]), UsedName(sigmaQ,[Default]), UsedName(compress,[Default]), UsedName(count,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(scalation;columnar_db;RelationF;init;,[Default]), UsedName(toMatriI2$default$1,[Default]), UsedName(join,[Default]), UsedName(π$default$2,[Default]), UsedName(colsMap,[Default]), UsedName(orderBy,[Default]), UsedName(materialize1,[Default]), UsedName(selectAt,[Default]), UsedName(apply,[Default]), UsedName(rows,[Default]), UsedName(sigmaS,[Default]), UsedName(writeCSV,[Default]), UsedName(pisigmaL,[Default]), UsedName(materialize2,[Default]), UsedName(selectI,[Default]), UsedName(selectC,[Default]), UsedName(column,[Default]), UsedName(RelationF,[Default]), UsedName(selectD,[Default]), UsedName(reduce,[Default]), UsedName(synchronized,[Default]), UsedName(<init>$default$6,[Default]), UsedName(pisigmaS,[Default]), UsedName(Π,[Default]), UsedName(toString,[Default]), UsedName(sigmaL,[Default]), UsedName(##,[Default]), UsedName(minus,[Default]), UsedName(toMatriI$default$2,[Default]), UsedName(flaw,[Default]), UsedName(⋂,[Default]), UsedName(<init>$default$5,[Default]), UsedName(pisigmaD,[Default]), UsedName(sigmaI,[Default]), UsedName(wait,[Default]), UsedName(toMatriI2,[Default]), UsedName(joinindex,[Default]), UsedName(⋃,[Default]), UsedName(uniq_union,[Default]), UsedName(parjoin,[Default]), UsedName(sigma,[Default]), UsedName(rename,[Default]), UsedName(toMatriII,[Default]), UsedName(indices,[Default]), UsedName(ne,[Default]), UsedName(toRleVectorI,[Default]), UsedName(domains,[Default]), UsedName(sum,[Default]), UsedName(toRleVectorS,[Default]), UsedName(toMap,[Default]), UsedName(leftJoin$default$1,[Default]), UsedName(min,[Default]), UsedName(index,[Default]), UsedName(colMap,[Default]), UsedName(colName,[Default]), UsedName(pisigmaQ,[Default]), UsedName(pi$default$2,[Default]), UsedName(incompatible,[Default]), UsedName(showFk,[Default]), UsedName(toMatriD$default$2,[Default]), UsedName(γ,[Default]), UsedName(project$default$2,[Default]), UsedName(avg,[Default]), UsedName(save,[Default]), UsedName(col,[Default]), UsedName(variance,[Default]), UsedName(selectQ,[Default]), UsedName(add,[Default]), UsedName(columns,[Default]), UsedName(fKeys,[Default]), UsedName(⋉,[Default]), UsedName(project,[Default]), UsedName(selectR,[Default]), UsedName(ζ,[Default]), UsedName(pisigmaC,[Default]), UsedName(<init>$default$4,[Default]), UsedName(ω,[Default]), UsedName(toMatriDI,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]), UsedName(rightJoin,[Default]))) invalidates 1 classes due to The scalation.columnar_db.RelationF has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(σ,[Default]), UsedName(equals,[Default]), UsedName(union,[Default]), UsedName(pisigmaR,[Default]), UsedName(indextoKey,[Default]), UsedName(reverseOrderBy,[Default]), UsedName(fold,[Default]), UsedName(sigmaDpar,[Default]), UsedName(hashCode,[Default]), UsedName(leftJoin,[Default]), UsedName(row,[Default]), UsedName(toMatriII$default$3,[Default]), UsedName(intersect2,[Default]), UsedName(toMatriDD,[Default]), UsedName(writeJSON,[Default]), UsedName(eproject,[Default]), UsedName($isInstanceOf,[Default]), UsedName(sigmaD,[Default]), UsedName(generateIndex$default$1,[Default]), UsedName(toMatriD,[Default]), UsedName(clone,[Default]), UsedName(intersect,[Default]), UsedName(delete,[Default]), UsedName(show,[Default]), UsedName(sigmaR,[Default]), UsedName(uncompress,[Default]), UsedName(disambiguate,[Default]), UsedName(-,[Default]), UsedName(ωω,[Default]), UsedName(groupBy,[Default]), UsedName(selectL,[Default]), UsedName(isInstanceOf,[Default]), UsedName(toRleVectorD,[Default]), UsedName(toVectorD,[Default]), UsedName(max,[Default]), UsedName(π,[Default]), UsedName(rightJoinApx,[Default]), UsedName(mean,[Default]), UsedName(finalize,[Default]), UsedName(leftJoinApx,[Default]), UsedName(⋈,[Default]), UsedName(name,[Default]), UsedName(toMatriDD$default$3,[Default]), UsedName(asInstanceOf,[Default]), UsedName(update,[Default]), UsedName(pisigmaI,[Default]), UsedName(map,[Default]), UsedName($asInstanceOf,[Default]), UsedName(key,[Default]), UsedName(cols,[Default]), UsedName(pi,[Default]), UsedName(orderedIndex,[Default]), UsedName(filter,[Default]), UsedName(!=,[Default]), UsedName(toVectorS,[Default]), UsedName(toMatriI,[Default]), UsedName(epiAny,[Default]), UsedName(sigmaC,[Default]), UsedName(notifyAll,[Default]), UsedName(show$default$1,[Default]), UsedName(materialize,[Default]), UsedName(×,[Default]), UsedName(selectT,[Default]), UsedName(toVectorI,[Default]), UsedName(epi,[Default]), UsedName(domain,[Default]), UsedName(generateIndex,[Default]), UsedName(getClass,[Default]), UsedName(⋉$default$1,[Default]), UsedName(select,[Default]), UsedName(product,[Default]), UsedName(selectS,[Default]), UsedName(ζζ,[Default]), UsedName(toMatriI2$default$2,[Default]), UsedName(toMatriDI$default$3,[Default]), UsedName(contains,[Default]), UsedName(colNames,[Default]), UsedName(⋊,[Default]), UsedName(sigmaQ,[Default]), UsedName(compress,[Default]), UsedName(count,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(scalation;columnar_db;RelationF;init;,[Default]), UsedName(toMatriI2$default$1,[Default]), UsedName(join,[Default]), UsedName(π$default$2,[Default]), UsedName(colsMap,[Default]), UsedName(orderBy,[Default]), UsedName(materialize1,[Default]), UsedName(selectAt,[Default]), UsedName(apply,[Default]), UsedName(rows,[Default]), UsedName(sigmaS,[Default]), UsedName(writeCSV,[Default]), UsedName(pisigmaL,[Default]), UsedName(materialize2,[Default]), UsedName(selectI,[Default]), UsedName(selectC,[Default]), UsedName(column,[Default]), UsedName(RelationF,[Default]), UsedName(selectD,[Default]), UsedName(reduce,[Default]), UsedName(synchronized,[Default]), UsedName(<init>$default$6,[Default]), UsedName(pisigmaS,[Default]), UsedName(Π,[Default]), UsedName(toString,[Default]), UsedName(sigmaL,[Default]), UsedName(##,[Default]), UsedName(minus,[Default]), UsedName(toMatriI$default$2,[Default]), UsedName(flaw,[Default]), UsedName(⋂,[Default]), UsedName(<init>$default$5,[Default]), UsedName(pisigmaD,[Default]), UsedName(sigmaI,[Default]), UsedName(wait,[Default]), UsedName(toMatriI2,[Default]), UsedName(joinindex,[Default]), UsedName(⋃,[Default]), UsedName(uniq_union,[Default]), UsedName(parjoin,[Default]), UsedName(sigma,[Default]), UsedName(rename,[Default]), UsedName(toMatriII,[Default]), UsedName(indices,[Default]), UsedName(ne,[Default]), UsedName(toRleVectorI,[Default]), UsedName(domains,[Default]), UsedName(sum,[Default]), UsedName(toRleVectorS,[Default]), UsedName(toMap,[Default]), UsedName(leftJoin$default$1,[Default]), UsedName(min,[Default]), UsedName(index,[Default]), UsedName(colMap,[Default]), UsedName(colName,[Default]), UsedName(pisigmaQ,[Default]), UsedName(pi$default$2,[Default]), UsedName(incompatible,[Default]), UsedName(showFk,[Default]), UsedName(toMatriD$default$2,[Default]), UsedName(γ,[Default]), UsedName(project$default$2,[Default]), UsedName(avg,[Default]), UsedName(save,[Default]), UsedName(col,[Default]), UsedName(variance,[Default]), UsedName(selectQ,[Default]), UsedName(add,[Default]), UsedName(columns,[Default]), UsedName(fKeys,[Default]), UsedName(⋉,[Default]), UsedName(project,[Default]), UsedName(selectR,[Default]), UsedName(ζ,[Default]), UsedName(pisigmaC,[Default]), UsedName(<init>$default$4,[Default]), UsedName(ω,[Default]), UsedName(toMatriDI,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]), UsedName(rightJoin,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.columnar_db.RelationF)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graphalytics.TightSimTest2...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graphalytics.TightSimTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graphalytics.TightSimTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graphalytics.TightSimTest2,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(TightSimTest2,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graphalytics.TightSimTest2 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(TightSimTest2,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graphalytics.TightSimTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.DualSim2CAR...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.DualSim2CAR)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.DualSim2CAR)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.DualSim2CAR,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(DualSim2CAR,[Default]), UsedName(test$default$2,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(feasibleMatesW,[Default]), UsedName(isInstanceOf,[Default]), UsedName(bijections,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(disjoint,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(qRange,[Default]), UsedName(notifyAll,[Default]), UsedName(SELF_LOOPS,[Default]), UsedName(getClass,[Default]), UsedName(LIMIT,[Default]), UsedName(gRange,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(scalation;graph_db;pattern_matching;DualSim2CAR;init;,[Default]), UsedName(feasibleMates,[Default]), UsedName(CHECK,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(test,[Default]), UsedName(showMappings,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(feasibleMatesWithSets,[Default]), UsedName(countMappings,[Default]), UsedName(filterGraph,[Default]), UsedName(prune,[Default]), UsedName(mappings,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.DualSim2CAR has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(DualSim2CAR,[Default]), UsedName(test$default$2,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(feasibleMatesW,[Default]), UsedName(isInstanceOf,[Default]), UsedName(bijections,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(disjoint,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(qRange,[Default]), UsedName(notifyAll,[Default]), UsedName(SELF_LOOPS,[Default]), UsedName(getClass,[Default]), UsedName(LIMIT,[Default]), UsedName(gRange,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(scalation;graph_db;pattern_matching;DualSim2CAR;init;,[Default]), UsedName(feasibleMates,[Default]), UsedName(CHECK,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(test,[Default]), UsedName(showMappings,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(feasibleMatesWithSets,[Default]), UsedName(countMappings,[Default]), UsedName(filterGraph,[Default]), UsedName(prune,[Default]), UsedName(mappings,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.DualSim2CAR)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.MDualIsoTest2...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.MDualIsoTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.MDualIsoTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.MDualIsoTest2,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(matcher,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(MDualIsoTest2,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(psi,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.MDualIsoTest2 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(matcher,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(MDualIsoTest2,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(psi,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.MDualIsoTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.MDualSimWTest6...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.MDualSimWTest6)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.MDualSimWTest6)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.MDualSimWTest6,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(MDualSimWTest6,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.MDualSimWTest6 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(MDualSimWTest6,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.MDualSimWTest6)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graphalytics.GraphqlOptTest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graphalytics.GraphqlOptTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graphalytics.GraphqlOptTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graphalytics.GraphqlOptTest,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(matcher,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(qAvDegree,[Default]), UsedName(qSize,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(gAvDegree,[Default]), UsedName(nLabels,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(gSize,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(GraphqlOptTest,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graphalytics.GraphqlOptTest has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(matcher,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(qAvDegree,[Default]), UsedName(qSize,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(gAvDegree,[Default]), UsedName(nLabels,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(gSize,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(GraphqlOptTest,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graphalytics.GraphqlOptTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.StrictSim...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.StrictSim)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.StrictSim)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.StrictSim,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(test$default$2,[Default]), UsedName(hashCode,[Default]), UsedName(selectivityCriteria,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(feasibleMatesW,[Default]), UsedName(isInstanceOf,[Default]), UsedName(bijections,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(disjoint,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(qRange,[Default]), UsedName(notifyAll,[Default]), UsedName(SELF_LOOPS,[Default]), UsedName(getClass,[Default]), UsedName(LIMIT,[Default]), UsedName(StrictSim,[Default]), UsedName(gRange,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(feasibleMates,[Default]), UsedName(refine,[Default]), UsedName(CHECK,[Default]), UsedName(mappings2,[Default]), UsedName(synchronized,[Default]), UsedName(dualFilter,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(test,[Default]), UsedName(showMappings,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(countMappings,[Default]), UsedName(scalation;graph_db;pattern_matching;StrictSim;init;,[Default]), UsedName(filterGraph,[Default]), UsedName(prune,[Default]), UsedName(mappings,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.StrictSim has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(test$default$2,[Default]), UsedName(hashCode,[Default]), UsedName(selectivityCriteria,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(feasibleMatesW,[Default]), UsedName(isInstanceOf,[Default]), UsedName(bijections,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(disjoint,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(qRange,[Default]), UsedName(notifyAll,[Default]), UsedName(SELF_LOOPS,[Default]), UsedName(getClass,[Default]), UsedName(LIMIT,[Default]), UsedName(StrictSim,[Default]), UsedName(gRange,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(feasibleMates,[Default]), UsedName(refine,[Default]), UsedName(CHECK,[Default]), UsedName(mappings2,[Default]), UsedName(synchronized,[Default]), UsedName(dualFilter,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(test,[Default]), UsedName(showMappings,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(countMappings,[Default]), UsedName(scalation;graph_db;pattern_matching;StrictSim;init;,[Default]), UsedName(filterGraph,[Default]), UsedName(prune,[Default]), UsedName(mappings,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.StrictSim)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.MGraphSimCARTest3...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.MGraphSimCARTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.MGraphSimCARTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.MGraphSimCARTest3,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(MGraphSimCARTest3,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.MGraphSimCARTest3 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(MGraphSimCARTest3,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.MGraphSimCARTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.GraphGenTest3...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.GraphGenTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.GraphGenTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.GraphGenTest3,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(GraphGenTest3,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(gGen,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(g1,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.GraphGenTest3 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(GraphGenTest3,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(gGen,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(g1,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.GraphGenTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graphalytics.TreeTest2...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graphalytics.TreeTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graphalytics.TreeTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graphalytics.TreeTest2,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(ct,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(TreeTest2,[Default]), UsedName(synchronized,[Default]), UsedName(FANOUT,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(root,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graphalytics.TreeTest2 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(ct,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(TreeTest2,[Default]), UsedName(synchronized,[Default]), UsedName(FANOUT,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(root,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graphalytics.TreeTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graphalytics.GraphIsoTest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graphalytics.GraphIsoTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graphalytics.GraphIsoTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graphalytics.GraphIsoTest,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(matcher,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(GraphIsoTest,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graphalytics.GraphIsoTest has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(matcher,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(GraphIsoTest,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graphalytics.GraphIsoTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.columnar_db.MakeSchema...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.columnar_db.MakeSchema)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.columnar_db.MakeSchema)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.columnar_db.MakeSchema,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(analyzeType$default$3,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(mm_analyzeType$default$3,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(MakeSchema,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(apply,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(analyzeType$default$2,[Default]), UsedName(wait,[Default]), UsedName(mm_analyzeType$default$2,[Default]), UsedName(ne,[Default]), UsedName(mm_analyzeType,[Default]), UsedName(analyzeType,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.columnar_db.MakeSchema has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(analyzeType$default$3,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(mm_analyzeType$default$3,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(MakeSchema,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(apply,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(analyzeType$default$2,[Default]), UsedName(wait,[Default]), UsedName(mm_analyzeType$default$2,[Default]), UsedName(ne,[Default]), UsedName(mm_analyzeType,[Default]), UsedName(analyzeType,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.columnar_db.MakeSchema)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.graph_algebra.ExampleMuGraphS...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.graph_algebra.ExampleMuGraphS)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.graph_algebra.ExampleMuGraphS)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.graph_algebra.ExampleMuGraphS,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(q2,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(g1,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g2p,[Default]), UsedName(synchronized,[Default]), UsedName(g2,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(q1,[Default]), UsedName(q1p,[Default]), UsedName(ExampleMuGraphS,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(g1p,[Default]), UsedName(q2p,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.graph_db.graph_algebra.ExampleMuGraphS has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(q2,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(g1,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g2p,[Default]), UsedName(synchronized,[Default]), UsedName(g2,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(q1,[Default]), UsedName(q1p,[Default]), UsedName(ExampleMuGraphS,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(g1p,[Default]), UsedName(q2p,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.graph_algebra.ExampleMuGraphS)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.Answers...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.Answers)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.Answers)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.Answers,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(Answers,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(convert,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.Answers has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(Answers,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(convert,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.Answers)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graphalytics.TightSimTest3...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graphalytics.TightSimTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graphalytics.TightSimTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graphalytics.TightSimTest3,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(TightSimTest3,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graphalytics.TightSimTest3 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(TightSimTest3,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graphalytics.TightSimTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.dist_db.materialize...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.dist_db.materialize)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.dist_db.materialize)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.dist_db.RelDBMasterTest4: Set(UsedName(materialize,[Default]), UsedName(apply,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.dist_db.RelDBMasterTest: Set(UsedName(materialize,[Default]), UsedName(apply,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.dist_db.RelDBMaster: Set(UsedName(isInstanceOf,[Default]), UsedName(name,[Default]), UsedName(asInstanceOf,[Default]), UsedName(materialize,[Default]), UsedName(==,[Default]), UsedName(apply,[Default]), UsedName(ne,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.dist_db.materialize,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(copy$default$1,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(canEqual,[Default]), UsedName(productPrefix,[Default]), UsedName(compose,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(name,[Default]), UsedName(asInstanceOf,[Default]), UsedName(scalation;dist_db;materialize;init;,[Default]), UsedName($asInstanceOf,[Default]), UsedName(andThen,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(materialize,[Default]), UsedName(getClass,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(unapply,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(apply,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 4 classes due to The scalation.dist_db.materialize has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(copy$default$1,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(canEqual,[Default]), UsedName(productPrefix,[Default]), UsedName(compose,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(name,[Default]), UsedName(asInstanceOf,[Default]), UsedName(scalation;dist_db;materialize;init;,[Default]), UsedName($asInstanceOf,[Default]), UsedName(andThen,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(materialize,[Default]), UsedName(getClass,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(unapply,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(apply,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.dist_db.materialize)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> by member reference: Set(scalation.dist_db.RelDBMasterTest4, scalation.dist_db.RelDBMasterTest, scalation.dist_db.RelDBMaster)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.MGraphGenTest4...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.MGraphGenTest4)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.MGraphGenTest4)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.MGraphGenTest4,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(gGen,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(g2,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(MGraphGenTest4,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName(g3,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.MGraphGenTest4 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(gGen,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(g2,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(MGraphGenTest4,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName(g3,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.MGraphGenTest4)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.spatial.Vector2DTest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.spatial.Vector2DTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.spatial.Vector2DTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.spatial.Vector2DTest,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(v,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(w,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(u,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(Vector2DTest,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.spatial.Vector2DTest has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(v,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(w,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(u,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(Vector2DTest,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.spatial.Vector2DTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.StrictSimTest4...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.StrictSimTest4)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.StrictSimTest4)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.StrictSimTest4,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(StrictSimTest4,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.StrictSimTest4 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(StrictSimTest4,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.StrictSimTest4)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.graph_algebra.MuDualSimTest3...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.graph_algebra.MuDualSimTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.graph_algebra.MuDualSimTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.graph_algebra.MuDualSimTest3,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(matcher,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(MuDualSimTest3,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.graph_algebra.MuDualSimTest3 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(matcher,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(MuDualSimTest3,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.graph_algebra.MuDualSimTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graphalytics.TrafficLight...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graphalytics.TrafficLight)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graphalytics.TrafficLight)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graphalytics.TrafficLight,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(readResolve,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(ValueSet,[Default]), UsedName(G_N,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(apply,[Default]), UsedName(nextName,[Default]), UsedName(Y_W,[Default]), UsedName(nextId,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(ValueOrdering,[Default]), UsedName(wait,[Default]), UsedName(TrafficLight,[Default]), UsedName(Value,[Default]), UsedName(ne,[Default]), UsedName(maxId,[Default]), UsedName(R_D,[Default]), UsedName(Val,[Default]), UsedName(values,[Default]), UsedName(withName,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.graphalytics.TrafficLight has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(readResolve,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(ValueSet,[Default]), UsedName(G_N,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(apply,[Default]), UsedName(nextName,[Default]), UsedName(Y_W,[Default]), UsedName(nextId,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(ValueOrdering,[Default]), UsedName(wait,[Default]), UsedName(TrafficLight,[Default]), UsedName(Value,[Default]), UsedName(ne,[Default]), UsedName(maxId,[Default]), UsedName(R_D,[Default]), UsedName(Val,[Default]), UsedName(values,[Default]), UsedName(withName,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graphalytics.TrafficLight)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.distributed_db.nameAll...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.distributed_db.nameAll)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.distributed_db.nameAll)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.distributed_db.RelationDBMasterTest: Set(UsedName(nameAll,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.distributed_db.nameAll,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(canEqual,[Default]), UsedName(productPrefix,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(productArity,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(nameAll,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 2 classes due to The scalation.distributed_db.nameAll has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(canEqual,[Default]), UsedName(productPrefix,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(productArity,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(nameAll,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.distributed_db.nameAll)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> by member reference: Set(scalation.distributed_db.RelationDBMasterTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.test.GraphPattern_STest2...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.test.GraphPattern_STest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.test.GraphPattern_STest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.test.GraphPattern_STest2,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(GraphPattern_STest2,[Default]), UsedName(gLabels,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(gDegree,[Default]), UsedName(inverse,[Default]), UsedName(UNIFORM,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(qSize,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(qDegree,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.test.GraphPattern_STest2 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(GraphPattern_STest2,[Default]), UsedName(gLabels,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(gDegree,[Default]), UsedName(inverse,[Default]), UsedName(UNIFORM,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(qSize,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(qDegree,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.test.GraphPattern_STest2)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.GraphSimCAR...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.GraphSimCAR)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.GraphSimCAR)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.GraphSimCAR,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(test$default$2,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(feasibleMatesW,[Default]), UsedName(isInstanceOf,[Default]), UsedName(bijections,[Default]), UsedName(finalize,[Default]), UsedName(GraphSimCAR,[Default]), UsedName(asInstanceOf,[Default]), UsedName(disjoint,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(qRange,[Default]), UsedName(notifyAll,[Default]), UsedName(SELF_LOOPS,[Default]), UsedName(getClass,[Default]), UsedName(LIMIT,[Default]), UsedName(scalation;graph_db;pattern_matching;GraphSimCAR;init;,[Default]), UsedName(gRange,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(feasibleMates,[Default]), UsedName(CHECK,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(test,[Default]), UsedName(showMappings,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(countMappings,[Default]), UsedName(filterGraph,[Default]), UsedName(prune,[Default]), UsedName(mappings,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.GraphSimCAR has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(test$default$2,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(feasibleMatesW,[Default]), UsedName(isInstanceOf,[Default]), UsedName(bijections,[Default]), UsedName(finalize,[Default]), UsedName(GraphSimCAR,[Default]), UsedName(asInstanceOf,[Default]), UsedName(disjoint,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(qRange,[Default]), UsedName(notifyAll,[Default]), UsedName(SELF_LOOPS,[Default]), UsedName(getClass,[Default]), UsedName(LIMIT,[Default]), UsedName(scalation;graph_db;pattern_matching;GraphSimCAR;init;,[Default]), UsedName(gRange,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(feasibleMates,[Default]), UsedName(CHECK,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(test,[Default]), UsedName(showMappings,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(countMappings,[Default]), UsedName(filterGraph,[Default]), UsedName(prune,[Default]), UsedName(mappings,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.GraphSimCAR)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graphalytics.graph_algebra.package...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graphalytics.graph_algebra.package)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graphalytics.graph_algebra.package)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graphalytics.graph_algebra.package,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(package,[Default]), UsedName(ne,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.graphalytics.graph_algebra.package has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(package,[Default]), UsedName(ne,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graphalytics.graph_algebra.package)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.DualSimTest3...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.DualSimTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.DualSimTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.DualSimTest3,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(DualSimTest3,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.DualSimTest3 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(DualSimTest3,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.DualSimTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.dist_db.productIn...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.dist_db.productIn)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.dist_db.productIn)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.dist_db.RelDBMaster: Set(UsedName(isInstanceOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(productIn,[Default]), UsedName(rName,[Default]), UsedName(==,[Default]), UsedName(apply,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(r,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.dist_db.RelDBWorker: Set(UsedName(isInstanceOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(productIn,[Default]), UsedName(uc,[Default]), UsedName(rName,[Default]), UsedName(==,[Default]), UsedName(apply,[Default]), UsedName(q,[Default]), UsedName(r,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.dist_db.productIn,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(copy$default$1,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(canEqual,[Default]), UsedName(curried,[Default]), UsedName(productPrefix,[Default]), UsedName(tupled,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(productIn,[Default]), UsedName(copy$default$2,[Default]), UsedName(uc,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(rName,[Default]), UsedName(getClass,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(scalation;dist_db;productIn;init;,[Default]), UsedName(unapply,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(copy$default$4,[Default]), UsedName(apply,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(copy$default$3,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(r,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 3 classes due to The scalation.dist_db.productIn has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(copy$default$1,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(canEqual,[Default]), UsedName(curried,[Default]), UsedName(productPrefix,[Default]), UsedName(tupled,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(productIn,[Default]), UsedName(copy$default$2,[Default]), UsedName(uc,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(rName,[Default]), UsedName(getClass,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(scalation;dist_db;productIn;init;,[Default]), UsedName(unapply,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(copy$default$4,[Default]), UsedName(apply,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(copy$default$3,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(r,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.dist_db.productIn)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> by member reference: Set(scalation.dist_db.RelDBMaster, scalation.dist_db.RelDBWorker)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.graph_algebra.MuDualIso...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.graph_algebra.MuDualIso)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.graph_algebra.MuDualIso)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.graph_algebra.MuDualIso,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(test$default$2,[Default]), UsedName(setLimit,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(feasibleMatesW,[Default]), UsedName(numMatches,[Default]), UsedName(isInstanceOf,[Default]), UsedName(bijections,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(disjoint,[Default]), UsedName($asInstanceOf,[Default]), UsedName(scalation;graph_db;graph_algebra;MuDualIso;init;,[Default]), UsedName(!=,[Default]), UsedName(qRange,[Default]), UsedName(notifyAll,[Default]), UsedName(SELF_LOOPS,[Default]), UsedName(getClass,[Default]), UsedName(LIMIT,[Default]), UsedName(gRange,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(feasibleMates,[Default]), UsedName(CHECK,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(test,[Default]), UsedName(showMappings,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(countMappings,[Default]), UsedName(filterGraph,[Default]), UsedName(prune,[Default]), UsedName(MuDualIso,[Default]), UsedName(mappings,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.graph_db.graph_algebra.MuDualIso has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(test$default$2,[Default]), UsedName(setLimit,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(feasibleMatesW,[Default]), UsedName(numMatches,[Default]), UsedName(isInstanceOf,[Default]), UsedName(bijections,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(disjoint,[Default]), UsedName($asInstanceOf,[Default]), UsedName(scalation;graph_db;graph_algebra;MuDualIso;init;,[Default]), UsedName(!=,[Default]), UsedName(qRange,[Default]), UsedName(notifyAll,[Default]), UsedName(SELF_LOOPS,[Default]), UsedName(getClass,[Default]), UsedName(LIMIT,[Default]), UsedName(gRange,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(feasibleMates,[Default]), UsedName(CHECK,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(test,[Default]), UsedName(showMappings,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(countMappings,[Default]), UsedName(filterGraph,[Default]), UsedName(prune,[Default]), UsedName(MuDualIso,[Default]), UsedName(mappings,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.graph_algebra.MuDualIso)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.LabelFunctions...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.LabelFunctions)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.LabelFunctions)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.LabelFunctions,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName(qChildLabels,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(gChildLabels,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(qParentLabels,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(gParentLabels,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(LabelFunctions,[Default]), UsedName(ne,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.LabelFunctions has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName(qChildLabels,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(gChildLabels,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(qParentLabels,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(gParentLabels,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(LabelFunctions,[Default]), UsedName(ne,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.LabelFunctions)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.GraphSimTest2...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.GraphSimTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.GraphSimTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.GraphSimTest2,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(GraphSimTest2,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.GraphSimTest2 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(GraphSimTest2,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.GraphSimTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.MDualSim2XTest6...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.MDualSim2XTest6)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.MDualSim2XTest6)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.MDualSim2XTest6,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(MDualSim2XTest6,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.MDualSim2XTest6 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(MDualSim2XTest6,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.MDualSim2XTest6)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.GraphTest3...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.GraphTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.GraphTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.GraphTest3,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(GraphTest3,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(q3,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.GraphTest3 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(GraphTest3,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(q3,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.GraphTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.MDualSimX...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.MDualSimX)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.MDualSimX)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.MDualSimX,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(test$default$2,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(feasibleMatesW,[Default]), UsedName(isInstanceOf,[Default]), UsedName(bijections,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(disjoint,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(qRange,[Default]), UsedName(notifyAll,[Default]), UsedName(SELF_LOOPS,[Default]), UsedName(getClass,[Default]), UsedName(LIMIT,[Default]), UsedName(gRange,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(feasibleMates,[Default]), UsedName(CHECK,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(test,[Default]), UsedName(scalation;graph_db;pattern_matching;MDualSimX;init;,[Default]), UsedName(showMappings,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(countMappings,[Default]), UsedName(filterGraph,[Default]), UsedName(prune,[Default]), UsedName(MDualSimX,[Default]), UsedName(mappings,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.MDualSimX has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(test$default$2,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(feasibleMatesW,[Default]), UsedName(isInstanceOf,[Default]), UsedName(bijections,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(disjoint,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(qRange,[Default]), UsedName(notifyAll,[Default]), UsedName(SELF_LOOPS,[Default]), UsedName(getClass,[Default]), UsedName(LIMIT,[Default]), UsedName(gRange,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(feasibleMates,[Default]), UsedName(CHECK,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(test,[Default]), UsedName(scalation;graph_db;pattern_matching;MDualSimX;init;,[Default]), UsedName(showMappings,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(countMappings,[Default]), UsedName(filterGraph,[Default]), UsedName(prune,[Default]), UsedName(MDualSimX,[Default]), UsedName(mappings,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.MDualSimX)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.test.DualPattern_STest2...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.test.DualPattern_STest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.test.DualPattern_STest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.test.DualPattern_STest2,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(DualPattern_STest2,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(gLabels,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(gDegree,[Default]), UsedName(inverse,[Default]), UsedName(UNIFORM,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(qSize,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(qDegree,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.test.DualPattern_STest2 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(DualPattern_STest2,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(gLabels,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(gDegree,[Default]), UsedName(inverse,[Default]), UsedName(UNIFORM,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(qSize,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(qDegree,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.test.DualPattern_STest2)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.columnar_db.TableGenTest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.columnar_db.TableGenTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.columnar_db.TableGenTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.columnar_db.TableGenTest,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(student,[Default]), UsedName($asInstanceOf,[Default]), UsedName(transript,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(TableGenTest,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(professor,[Default]), UsedName(course,[Default]), UsedName(teaching,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.columnar_db.TableGenTest has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(student,[Default]), UsedName($asInstanceOf,[Default]), UsedName(transript,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(TableGenTest,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(professor,[Default]), UsedName(course,[Default]), UsedName(teaching,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.columnar_db.TableGenTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.graph_algebra.HashMap_NE...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.graph_algebra.HashMap_NE)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.graph_algebra.HashMap_NE)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.graph_algebra.HashMap_NE,ModifiedNames(changes = UsedName(exists,[Default]), UsedName(elemHashCode,[Default]), UsedName(entriesIterator,[Default]), UsedName(mapValues,[Default]), UsedName(table,[Default]), UsedName(equals,[Default]), UsedName(++:,[Default]), UsedName(repr,[Default]), UsedName(lastOption,[Default]), UsedName(WithFilter,[Default]), UsedName(init,[Default]), UsedName(keysIterator,[Default]), UsedName(fold,[Default]), UsedName(keys,[Default]), UsedName(lift,[Default]), UsedName(sliceWithKnownBound,[Default]), UsedName(hashCode,[Default]), UsedName(find,[Default]), UsedName(reduceOption,[Default]), UsedName(last,[Default]), UsedName(zipWithIndex,[Default]), UsedName(hashTableContents,[Default]), UsedName(findEntry,[Default]), UsedName(DefaultKeySet,[Default]), UsedName(addEntry,[Default]), UsedName(toTraversable,[Default]), UsedName(threshold,[Default]), UsedName(headOption,[Default]), UsedName($isInstanceOf,[Default]), UsedName(aggregate,[Default]), UsedName(clone,[Default]), UsedName(:\,[Default]), UsedName(isTraversableAgain,[Default]), UsedName(canEqual,[Default]), UsedName(sliding,[Default]), UsedName(retain,[Default]), UsedName(reduceLeftOption,[Default]), UsedName(scalation;graph_db;graph_algebra;HashMap_NE;init;,[Default]), UsedName(-,[Default]), UsedName(compose,[Default]), UsedName(groupBy,[Default]), UsedName(tableSizeSeed,[Default]), UsedName(parCombiner,[Default]), UsedName(remove,[Default]), UsedName(initialSize,[Default]), UsedName(isInstanceOf,[Default]), UsedName(unzip,[Default]), UsedName(inits,[Default]), UsedName(max,[Default]), UsedName(sizemap,[Default]), UsedName(sizeMapInit,[Default]), UsedName(sizeMapDisable,[Default]), UsedName(finalize,[Default]), UsedName(hasDefiniteSize,[Default]), UsedName(totalSizeMapBuckets,[Default]), UsedName(nonEmpty,[Default]), UsedName(take,[Default]), UsedName(asInstanceOf,[Default]), UsedName(toIndexedSeq,[Default]), UsedName(update,[Default]), UsedName(toList,[Default]), UsedName(Entry,[Default]), UsedName(map,[Default]), UsedName($asInstanceOf,[Default]), UsedName(span,[Default]), UsedName(useSizeMap,[Default]), UsedName(minBy,[Default]), UsedName(toCollection,[Default]), UsedName(improve,[Default]), UsedName(andThen,[Default]), UsedName(++,[Default]), UsedName(transpose,[Default]), UsedName(sliceWithKnownDelta,[Default]), UsedName(reduceRightOption,[Default]), UsedName(filter,[Default]), UsedName(!=,[Default]), UsedName(sizeHint,[Default]), UsedName(copyToArray,[Default]), UsedName(/:,[Default]), UsedName(+,[Default]), UsedName(withDefault,[Default]), UsedName(notifyAll,[Default]), UsedName(getOrElse,[Default]), UsedName(reversed,[Default]), UsedName(nnSizeMapReset,[Default]), UsedName(getClass,[Default]), UsedName(default,[Default]), UsedName(tableSize,[Default]), UsedName(drop,[Default]), UsedName(filterNot,[Default]), UsedName(stringPrefix,[Default]), UsedName(product,[Default]), UsedName(seedvalue,[Default]), UsedName(clearTable,[Default]), UsedName(contains,[Default]), UsedName(HashMap_NE,[Default]), UsedName(iterator,[Default]), UsedName(toVector,[Default]), UsedName(sizeMapBucketBitSize,[Default]), UsedName(findOrAddEntry,[Default]), UsedName(reduceLeft,[Default]), UsedName(scan,[Default]), UsedName(maxBy,[Default]), UsedName(reduceRight,[Default]), UsedName(count,[Default]), UsedName(empty,[Default]), UsedName(grouped,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(DefaultValuesIterable,[Default]), UsedName(runWith,[Default]), UsedName(collectFirst,[Default]), UsedName(foldLeft,[Default]), UsedName(zipAll,[Default]), UsedName(toIterator,[Default]), UsedName(filterImpl,[Default]), UsedName(toIterable,[Default]), UsedName(seq,[Default]), UsedName(apply,[Default]), UsedName(printSizeMap,[Default]), UsedName(put,[Default]), UsedName(sizeHintBounded,[Default]), UsedName(sameElements,[Default]), UsedName(foreach,[Default]), UsedName(par,[Default]), UsedName(transform,[Default]), UsedName(createNewEntry,[Default]), UsedName(++=,[Default]), UsedName(zip,[Default]), UsedName(isDefinedAt,[Default]), UsedName(reduce,[Default]), UsedName(synchronized,[Default]), UsedName(keySet,[Default]), UsedName(dropRight,[Default]), UsedName(initWithContents,[Default]), UsedName(genericBuilder,[Default]), UsedName(takeWhile,[Default]), UsedName(mapResult,[Default]), UsedName(tail,[Default]), UsedName(--,[Default]), UsedName(to,[Default]), UsedName(Self,[Default]), UsedName(toString,[Default]), UsedName(get,[Default]), UsedName(toSeq,[Default]), UsedName(mkString,[Default]), UsedName(##,[Default]), UsedName(view,[Default]), UsedName(-=,[Default]), UsedName(size,[Default]), UsedName(filterKeys,[Default]), UsedName(flatMap,[Default]), UsedName(MappedValues,[Default]), UsedName(dropWhile,[Default]), UsedName(wait,[Default]), UsedName(orElse,[Default]), UsedName(copyToBuffer,[Default]), UsedName(unzip3,[Default]), UsedName(toSet,[Default]), UsedName(getOrElseUpdate,[Default]), UsedName(serializeTo,[Default]), UsedName(scanLeft,[Default]), UsedName(FilteredKeys,[Default]), UsedName(newBuilder,[Default]), UsedName(ne,[Default]), UsedName(result,[Default]), UsedName(toBuffer,[Default]), UsedName(sum,[Default]), UsedName(toMap,[Default]), UsedName(toArray,[Default]), UsedName(foreachEntry,[Default]), UsedName(min,[Default]), UsedName(removeEntry,[Default]), UsedName(index,[Default]), UsedName(+=,[Default]), UsedName(addString,[Default]), UsedName(withFilter,[Default]), UsedName(scanRight,[Default]), UsedName(alwaysInitSizeMap,[Default]), UsedName(thisCollection,[Default]), UsedName(sizeMapInitAndRebuild,[Default]), UsedName(applyOrElse,[Default]), UsedName(updated,[Default]), UsedName(toStream,[Default]), UsedName(nnSizeMapRemove,[Default]), UsedName(withDefaultValue,[Default]), UsedName(takeRight,[Default]), UsedName(head,[Default]), UsedName(sizeMapBucketSize,[Default]), UsedName(values,[Default]), UsedName(clear,[Default]), UsedName(calcSizeMapSize,[Default]), UsedName(_loadFactor,[Default]), UsedName(slice,[Default]), UsedName(collect,[Default]), UsedName(tails,[Default]), UsedName(companion,[Default]), UsedName(elemEquals,[Default]), UsedName(isEmpty,[Default]), UsedName(valuesIterator,[Default]), UsedName(sizeHintIfCheap,[Default]), UsedName(splitAt,[Default]), UsedName(forall,[Default]), UsedName(foldRight,[Default]), UsedName(--=,[Default]), UsedName(nnSizeMapAdd,[Default]), UsedName(partition,[Default]), UsedName(isSizeMapDefined,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]), UsedName(flatten,[Default]))) invalidates 1 classes due to The scalation.graph_db.graph_algebra.HashMap_NE has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(exists,[Default]), UsedName(elemHashCode,[Default]), UsedName(entriesIterator,[Default]), UsedName(mapValues,[Default]), UsedName(table,[Default]), UsedName(equals,[Default]), UsedName(++:,[Default]), UsedName(repr,[Default]), UsedName(lastOption,[Default]), UsedName(WithFilter,[Default]), UsedName(init,[Default]), UsedName(keysIterator,[Default]), UsedName(fold,[Default]), UsedName(keys,[Default]), UsedName(lift,[Default]), UsedName(sliceWithKnownBound,[Default]), UsedName(hashCode,[Default]), UsedName(find,[Default]), UsedName(reduceOption,[Default]), UsedName(last,[Default]), UsedName(zipWithIndex,[Default]), UsedName(hashTableContents,[Default]), UsedName(findEntry,[Default]), UsedName(DefaultKeySet,[Default]), UsedName(addEntry,[Default]), UsedName(toTraversable,[Default]), UsedName(threshold,[Default]), UsedName(headOption,[Default]), UsedName($isInstanceOf,[Default]), UsedName(aggregate,[Default]), UsedName(clone,[Default]), UsedName(:\,[Default]), UsedName(isTraversableAgain,[Default]), UsedName(canEqual,[Default]), UsedName(sliding,[Default]), UsedName(retain,[Default]), UsedName(reduceLeftOption,[Default]), UsedName(scalation;graph_db;graph_algebra;HashMap_NE;init;,[Default]), UsedName(-,[Default]), UsedName(compose,[Default]), UsedName(groupBy,[Default]), UsedName(tableSizeSeed,[Default]), UsedName(parCombiner,[Default]), UsedName(remove,[Default]), UsedName(initialSize,[Default]), UsedName(isInstanceOf,[Default]), UsedName(unzip,[Default]), UsedName(inits,[Default]), UsedName(max,[Default]), UsedName(sizemap,[Default]), UsedName(sizeMapInit,[Default]), UsedName(sizeMapDisable,[Default]), UsedName(finalize,[Default]), UsedName(hasDefiniteSize,[Default]), UsedName(totalSizeMapBuckets,[Default]), UsedName(nonEmpty,[Default]), UsedName(take,[Default]), UsedName(asInstanceOf,[Default]), UsedName(toIndexedSeq,[Default]), UsedName(update,[Default]), UsedName(toList,[Default]), UsedName(Entry,[Default]), UsedName(map,[Default]), UsedName($asInstanceOf,[Default]), UsedName(span,[Default]), UsedName(useSizeMap,[Default]), UsedName(minBy,[Default]), UsedName(toCollection,[Default]), UsedName(improve,[Default]), UsedName(andThen,[Default]), UsedName(++,[Default]), UsedName(transpose,[Default]), UsedName(sliceWithKnownDelta,[Default]), UsedName(reduceRightOption,[Default]), UsedName(filter,[Default]), UsedName(!=,[Default]), UsedName(sizeHint,[Default]), UsedName(copyToArray,[Default]), UsedName(/:,[Default]), UsedName(+,[Default]), UsedName(withDefault,[Default]), UsedName(notifyAll,[Default]), UsedName(getOrElse,[Default]), UsedName(reversed,[Default]), UsedName(nnSizeMapReset,[Default]), UsedName(getClass,[Default]), UsedName(default,[Default]), UsedName(tableSize,[Default]), UsedName(drop,[Default]), UsedName(filterNot,[Default]), UsedName(stringPrefix,[Default]), UsedName(product,[Default]), UsedName(seedvalue,[Default]), UsedName(clearTable,[Default]), UsedName(contains,[Default]), UsedName(HashMap_NE,[Default]), UsedName(iterator,[Default]), UsedName(toVector,[Default]), UsedName(sizeMapBucketBitSize,[Default]), UsedName(findOrAddEntry,[Default]), UsedName(reduceLeft,[Default]), UsedName(scan,[Default]), UsedName(maxBy,[Default]), UsedName(reduceRight,[Default]), UsedName(count,[Default]), UsedName(empty,[Default]), UsedName(grouped,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(DefaultValuesIterable,[Default]), UsedName(runWith,[Default]), UsedName(collectFirst,[Default]), UsedName(foldLeft,[Default]), UsedName(zipAll,[Default]), UsedName(toIterator,[Default]), UsedName(filterImpl,[Default]), UsedName(toIterable,[Default]), UsedName(seq,[Default]), UsedName(apply,[Default]), UsedName(printSizeMap,[Default]), UsedName(put,[Default]), UsedName(sizeHintBounded,[Default]), UsedName(sameElements,[Default]), UsedName(foreach,[Default]), UsedName(par,[Default]), UsedName(transform,[Default]), UsedName(createNewEntry,[Default]), UsedName(++=,[Default]), UsedName(zip,[Default]), UsedName(isDefinedAt,[Default]), UsedName(reduce,[Default]), UsedName(synchronized,[Default]), UsedName(keySet,[Default]), UsedName(dropRight,[Default]), UsedName(initWithContents,[Default]), UsedName(genericBuilder,[Default]), UsedName(takeWhile,[Default]), UsedName(mapResult,[Default]), UsedName(tail,[Default]), UsedName(--,[Default]), UsedName(to,[Default]), UsedName(Self,[Default]), UsedName(toString,[Default]), UsedName(get,[Default]), UsedName(toSeq,[Default]), UsedName(mkString,[Default]), UsedName(##,[Default]), UsedName(view,[Default]), UsedName(-=,[Default]), UsedName(size,[Default]), UsedName(filterKeys,[Default]), UsedName(flatMap,[Default]), UsedName(MappedValues,[Default]), UsedName(dropWhile,[Default]), UsedName(wait,[Default]), UsedName(orElse,[Default]), UsedName(copyToBuffer,[Default]), UsedName(unzip3,[Default]), UsedName(toSet,[Default]), UsedName(getOrElseUpdate,[Default]), UsedName(serializeTo,[Default]), UsedName(scanLeft,[Default]), UsedName(FilteredKeys,[Default]), UsedName(newBuilder,[Default]), UsedName(ne,[Default]), UsedName(result,[Default]), UsedName(toBuffer,[Default]), UsedName(sum,[Default]), UsedName(toMap,[Default]), UsedName(toArray,[Default]), UsedName(foreachEntry,[Default]), UsedName(min,[Default]), UsedName(removeEntry,[Default]), UsedName(index,[Default]), UsedName(+=,[Default]), UsedName(addString,[Default]), UsedName(withFilter,[Default]), UsedName(scanRight,[Default]), UsedName(alwaysInitSizeMap,[Default]), UsedName(thisCollection,[Default]), UsedName(sizeMapInitAndRebuild,[Default]), UsedName(applyOrElse,[Default]), UsedName(updated,[Default]), UsedName(toStream,[Default]), UsedName(nnSizeMapRemove,[Default]), UsedName(withDefaultValue,[Default]), UsedName(takeRight,[Default]), UsedName(head,[Default]), UsedName(sizeMapBucketSize,[Default]), UsedName(values,[Default]), UsedName(clear,[Default]), UsedName(calcSizeMapSize,[Default]), UsedName(_loadFactor,[Default]), UsedName(slice,[Default]), UsedName(collect,[Default]), UsedName(tails,[Default]), UsedName(companion,[Default]), UsedName(elemEquals,[Default]), UsedName(isEmpty,[Default]), UsedName(valuesIterator,[Default]), UsedName(sizeHintIfCheap,[Default]), UsedName(splitAt,[Default]), UsedName(forall,[Default]), UsedName(foldRight,[Default]), UsedName(--=,[Default]), UsedName(nnSizeMapAdd,[Default]), UsedName(partition,[Default]), UsedName(isSizeMapDefined,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]), UsedName(flatten,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.graph_algebra.HashMap_NE)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.DualSim2CARTest2...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.DualSim2CARTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.DualSim2CARTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.DualSim2CARTest2,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(DualSim2CARTest2,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(q2,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(g2,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.DualSim2CARTest2 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(DualSim2CARTest2,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(q2,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(g2,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.DualSim2CARTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.MDualSimWTest2...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.MDualSimWTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.MDualSimWTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.MDualSimWTest2,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(MDualSimWTest2,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.MDualSimWTest2 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(MDualSimWTest2,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.MDualSimWTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.MDualSim2Test...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.MDualSim2Test)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.MDualSim2Test)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.MDualSim2Test,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(MDualSim2Test,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.MDualSim2Test has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(MDualSim2Test,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.MDualSim2Test)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graphalytics.TightSimTest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graphalytics.TightSimTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graphalytics.TightSimTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graphalytics.TightSimTest,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(TightSimTest,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graphalytics.TightSimTest has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(TightSimTest,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graphalytics.TightSimTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.columnar_db.CatalogTest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.columnar_db.CatalogTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.columnar_db.CatalogTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.columnar_db.CatalogTest,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(CatalogTest,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.columnar_db.CatalogTest has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(CatalogTest,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.columnar_db.CatalogTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.MGraphSim2Test6...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.MGraphSim2Test6)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.MGraphSim2Test6)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.MGraphSim2Test6,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(MGraphSim2Test6,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.MGraphSim2Test6 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(MGraphSim2Test6,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.MGraphSim2Test6)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.MDualSimWTest4...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.MDualSimWTest4)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.MDualSimWTest4)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.MDualSimWTest4,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(MDualSimWTest4,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.MDualSimWTest4 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(MDualSimWTest4,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.MDualSimWTest4)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.graph_algebra.MatchAnswersTest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.graph_algebra.MatchAnswersTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.graph_algebra.MatchAnswersTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.graph_algebra.MatchAnswersTest,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(MatchAnswersTest,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.graph_algebra.MatchAnswersTest has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(MatchAnswersTest,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.graph_algebra.MatchAnswersTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.MDualIsoTest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.MDualIsoTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.MDualIsoTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.MDualIsoTest,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(matcher,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(MDualIsoTest,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(psi,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.MDualIsoTest has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(matcher,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(MDualIsoTest,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(psi,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.MDualIsoTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.distributed_db.union...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.distributed_db.union)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.distributed_db.union)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.distributed_db.RelationDBMaster: Set(UsedName(union,[Default]), UsedName(isInstanceOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(==,[Default]), UsedName(apply,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(r,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.distributed_db.union,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(union,[Default]), UsedName(copy$default$1,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(canEqual,[Default]), UsedName(curried,[Default]), UsedName(productPrefix,[Default]), UsedName(tupled,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(copy$default$2,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(unapply,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(apply,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(scalation;distributed_db;union;init;,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(r,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 2 classes due to The scalation.distributed_db.union has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(union,[Default]), UsedName(copy$default$1,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(canEqual,[Default]), UsedName(curried,[Default]), UsedName(productPrefix,[Default]), UsedName(tupled,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(copy$default$2,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(unapply,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(apply,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(scalation;distributed_db;union;init;,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(r,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.distributed_db.union)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> by member reference: Set(scalation.distributed_db.RelationDBMaster)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.GraphSim2...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.GraphSim2)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.GraphSim2)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.GraphSim2,ModifiedNames(changes = UsedName(GraphSim2,[Default]), UsedName(equals,[Default]), UsedName(test$default$2,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(feasibleMatesW,[Default]), UsedName(isInstanceOf,[Default]), UsedName(bijections,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(disjoint,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(qRange,[Default]), UsedName(notifyAll,[Default]), UsedName(SELF_LOOPS,[Default]), UsedName(getClass,[Default]), UsedName(LIMIT,[Default]), UsedName(gRange,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(feasibleMates,[Default]), UsedName(CHECK,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(test,[Default]), UsedName(showMappings,[Default]), UsedName(scalation;graph_db;pattern_matching;GraphSim2;init;,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(countMappings,[Default]), UsedName(filterGraph,[Default]), UsedName(prune,[Default]), UsedName(mappings,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.GraphSim2 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(GraphSim2,[Default]), UsedName(equals,[Default]), UsedName(test$default$2,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(feasibleMatesW,[Default]), UsedName(isInstanceOf,[Default]), UsedName(bijections,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(disjoint,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(qRange,[Default]), UsedName(notifyAll,[Default]), UsedName(SELF_LOOPS,[Default]), UsedName(getClass,[Default]), UsedName(LIMIT,[Default]), UsedName(gRange,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(feasibleMates,[Default]), UsedName(CHECK,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(test,[Default]), UsedName(showMappings,[Default]), UsedName(scalation;graph_db;pattern_matching;GraphSim2;init;,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(countMappings,[Default]), UsedName(filterGraph,[Default]), UsedName(prune,[Default]), UsedName(mappings,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.GraphSim2)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.distributed_db.RelationDBWorker...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.distributed_db.RelationDBWorker)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.distributed_db.RelationDBWorker)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following member ref dependencies of scalation.distributed_db.RelationDBWorker are invalidated:[0m
[0m[[0m[0mdebug[0m] [0m[0m	scalation.distributed_db.RelationDBMaster[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.distributed_db.RelationDBWorker,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(rSeq,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(retTableMap,[Default]), UsedName(receive,[Default]), UsedName(ri,[Default]), UsedName(isInstanceOf,[Default]), UsedName(self,[Implicit]), UsedName(finalize,[Default]), UsedName(preRestart,[Default]), UsedName(scalation;distributed_db;RelationDBWorker;init;,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(aroundPreStart,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(postStop,[Default]), UsedName(getClass,[Default]), UsedName(postRestart,[Default]), UsedName(aroundPreRestart,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(tableMap,[Default]), UsedName(synchronized,[Default]), UsedName(RelationDBWorker,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(sender,[Default]), UsedName(wait,[Default]), UsedName(supervisorStrategy,[Default]), UsedName(aroundPostStop,[Default]), UsedName(ne,[Default]), UsedName(context,[Implicit]), UsedName(unhandled,[Default]), UsedName(DBWorker,[Default]), UsedName(Receive,[Default]), UsedName(aroundPostRestart,[Default]), UsedName(aroundReceive,[Default]), UsedName(preStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 2 classes due to The scalation.distributed_db.RelationDBWorker has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(self,[Implicit]), UsedName(context,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.distributed_db.RelationDBWorker)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> by member reference: Set(scalation.distributed_db.RelationDBMaster)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graphalytics.GraphSim2...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graphalytics.GraphSim2)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graphalytics.GraphSim2)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graphalytics.GraphSim2,ModifiedNames(changes = UsedName(GraphSim2,[Default]), UsedName(equals,[Default]), UsedName(test$default$2,[Default]), UsedName(overlaps,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(isInstanceOf,[Default]), UsedName(bijections,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(disjoint,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(qRange,[Default]), UsedName(notifyAll,[Default]), UsedName(SELF_LOOPS,[Default]), UsedName(getClass,[Default]), UsedName(LIMIT,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(feasibleMates,[Default]), UsedName(CHECK,[Default]), UsedName(scalation;graphalytics;GraphSim2;init;,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(test,[Default]), UsedName(showMappings,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(prune,[Default]), UsedName(mappings,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.graphalytics.GraphSim2 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(GraphSim2,[Default]), UsedName(equals,[Default]), UsedName(test$default$2,[Default]), UsedName(overlaps,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(isInstanceOf,[Default]), UsedName(bijections,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(disjoint,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(qRange,[Default]), UsedName(notifyAll,[Default]), UsedName(SELF_LOOPS,[Default]), UsedName(getClass,[Default]), UsedName(LIMIT,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(feasibleMates,[Default]), UsedName(CHECK,[Default]), UsedName(scalation;graphalytics;GraphSim2;init;,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(test,[Default]), UsedName(showMappings,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(prune,[Default]), UsedName(mappings,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graphalytics.GraphSim2)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.DualSimCARTest3...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.DualSimCARTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.DualSimCARTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.DualSimCARTest3,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(DualSimCARTest3,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.DualSimCARTest3 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(DualSimCARTest3,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.DualSimCARTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graphalytics.ColorDAGTest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graphalytics.ColorDAGTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graphalytics.ColorDAGTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graphalytics.ColorDAGTest,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(ColorDAGTest,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(seed,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(stg,[Default]), UsedName(dag,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graphalytics.ColorDAGTest has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(ColorDAGTest,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(seed,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(stg,[Default]), UsedName(dag,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graphalytics.ColorDAGTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.columnar_db.RelationTest4...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.columnar_db.RelationTest4)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.columnar_db.RelationTest4)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.columnar_db.RelationTest4,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(mat,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(vec,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(RelationTest4,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.columnar_db.RelationTest4 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(mat,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(vec,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(RelationTest4,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.columnar_db.RelationTest4)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.distributed_db.showIn...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.distributed_db.showIn)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.distributed_db.showIn)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.distributed_db.RelationDBMaster: Set(UsedName(isInstanceOf,[Default]), UsedName(name,[Default]), UsedName(asInstanceOf,[Default]), UsedName(showIn,[Default]), UsedName(==,[Default]), UsedName(apply,[Default]), UsedName(ne,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.distributed_db.RelationDBWorker: Set(UsedName(isInstanceOf,[Default]), UsedName(name,[Default]), UsedName(asInstanceOf,[Default]), UsedName(uc,[Default]), UsedName(showIn,[Default]), UsedName(==,[Default]), UsedName(apply,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.distributed_db.showIn,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(copy$default$1,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(canEqual,[Default]), UsedName(curried,[Default]), UsedName(productPrefix,[Default]), UsedName(tupled,[Default]), UsedName(scalation;distributed_db;showIn;init;,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(name,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(copy$default$2,[Default]), UsedName(uc,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(unapply,[Default]), UsedName(showIn,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(apply,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 3 classes due to The scalation.distributed_db.showIn has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(copy$default$1,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(canEqual,[Default]), UsedName(curried,[Default]), UsedName(productPrefix,[Default]), UsedName(tupled,[Default]), UsedName(scalation;distributed_db;showIn;init;,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(name,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(copy$default$2,[Default]), UsedName(uc,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(unapply,[Default]), UsedName(showIn,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(apply,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.distributed_db.showIn)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> by member reference: Set(scalation.distributed_db.RelationDBMaster, scalation.distributed_db.RelationDBWorker)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.DualSimCARTest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.DualSimCARTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.DualSimCARTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.DualSimCARTest,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]), UsedName(DualSimCARTest,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.DualSimCARTest has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]), UsedName(DualSimCARTest,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.DualSimCARTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graphalytics.StrictSim...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graphalytics.StrictSim)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graphalytics.StrictSim)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graphalytics.StrictSim,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(test$default$2,[Default]), UsedName(calculateTotalEdges,[Default]), UsedName(overlaps,[Default]), UsedName(hashCode,[Default]), UsedName(selectivityCriteria,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(calculateBallDiameterMetrics,[Default]), UsedName(isInstanceOf,[Default]), UsedName(bijections,[Default]), UsedName(finalize,[Default]), UsedName(scalation;graphalytics;StrictSim;init;,[Default]), UsedName(asInstanceOf,[Default]), UsedName(disjoint,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(qRange,[Default]), UsedName(notifyAll,[Default]), UsedName(SELF_LOOPS,[Default]), UsedName(getClass,[Default]), UsedName(LIMIT,[Default]), UsedName(StrictSim,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(feasibleMates,[Default]), UsedName(calculateTotalVertices,[Default]), UsedName(CHECK,[Default]), UsedName(mappings2,[Default]), UsedName(synchronized,[Default]), UsedName(dualFilter,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(test,[Default]), UsedName(showMappings,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(filterGraph,[Default]), UsedName(prune,[Default]), UsedName(mappings,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.graphalytics.StrictSim has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(test$default$2,[Default]), UsedName(calculateTotalEdges,[Default]), UsedName(overlaps,[Default]), UsedName(hashCode,[Default]), UsedName(selectivityCriteria,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(calculateBallDiameterMetrics,[Default]), UsedName(isInstanceOf,[Default]), UsedName(bijections,[Default]), UsedName(finalize,[Default]), UsedName(scalation;graphalytics;StrictSim;init;,[Default]), UsedName(asInstanceOf,[Default]), UsedName(disjoint,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(qRange,[Default]), UsedName(notifyAll,[Default]), UsedName(SELF_LOOPS,[Default]), UsedName(getClass,[Default]), UsedName(LIMIT,[Default]), UsedName(StrictSim,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(feasibleMates,[Default]), UsedName(calculateTotalVertices,[Default]), UsedName(CHECK,[Default]), UsedName(mappings2,[Default]), UsedName(synchronized,[Default]), UsedName(dualFilter,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(test,[Default]), UsedName(showMappings,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(filterGraph,[Default]), UsedName(prune,[Default]), UsedName(mappings,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graphalytics.StrictSim)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.test.GraphPattern_STest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.test.GraphPattern_STest)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.test.GraphPattern_STest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.test.GraphPattern_STest,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(q4w,[Default]), UsedName(finalize,[Default]), UsedName(g4,[Default]), UsedName(q2,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(q3,[Default]), UsedName(synchronized,[Default]), UsedName(g2,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(GraphPattern_STest,[Default]), UsedName(q4x,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(g3,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.test.GraphPattern_STest has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(q4w,[Default]), UsedName(finalize,[Default]), UsedName(g4,[Default]), UsedName(q2,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(q3,[Default]), UsedName(synchronized,[Default]), UsedName(g2,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(GraphPattern_STest,[Default]), UsedName(q4x,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(g3,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.test.GraphPattern_STest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.TopSort...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.TopSort)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.TopSort)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.TopSort,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(TopSort,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(topSort,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.graph_db.TopSort has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(TopSort,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(topSort,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.TopSort)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.GraphGenTest6...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.GraphGenTest6)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.GraphGenTest6)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.GraphGenTest6,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(GraphGenTest6,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.GraphGenTest6 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(GraphGenTest6,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.GraphGenTest6)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.ExampleMGraphD...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.ExampleMGraphD)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.ExampleMGraphD)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.ExampleMGraphD,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(q3p,[Default]), UsedName(ExampleMGraphD,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(q2,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(g1,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g2p,[Default]), UsedName(g3p,[Default]), UsedName(q3,[Default]), UsedName(synchronized,[Default]), UsedName(g2,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(q1,[Default]), UsedName(q1p,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(g1p,[Default]), UsedName(q2p,[Default]), UsedName(g3,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.graph_db.ExampleMGraphD has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(q3p,[Default]), UsedName(ExampleMGraphD,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(q2,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(g1,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g2p,[Default]), UsedName(g3p,[Default]), UsedName(q3,[Default]), UsedName(synchronized,[Default]), UsedName(g2,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(q1,[Default]), UsedName(q1p,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(g1p,[Default]), UsedName(q2p,[Default]), UsedName(g3,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.ExampleMGraphD)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.dist_db.package...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.dist_db.package)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.dist_db.package)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.dist_db.RelDBMaster: Set(UsedName(createReply,[Default]), UsedName(union,[Default]), UsedName(intersect,[Default]), UsedName(delete,[Default]), UsedName(show,[Default]), UsedName(tableGen,[Default]), UsedName(joinIn,[Default]), UsedName(isInstanceOf,[Default]), UsedName(intersectIn,[Default]), UsedName(create,[Default]), UsedName(asInstanceOf,[Default]), UsedName(productIn,[Default]), UsedName(materialize,[Default]), UsedName(addReply,[Default]), UsedName(select,[Default]), UsedName(product,[Default]), UsedName(==,[Default]), UsedName(join,[Default]), UsedName(minus,[Default]), UsedName(minusIn,[Default]), UsedName(package,[Default]), UsedName(ne,[Default]), UsedName(selectIn,[Default]), UsedName(Predicate,[Default]), UsedName(relReply,[Default]), UsedName(add,[Default]), UsedName(project,[Default]), UsedName(relReply2,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.dist_db.RelDBMasterTest5: Set(UsedName(show,[Default]), UsedName(tableGen,[Default]), UsedName(create,[Default]), UsedName(package,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.dist_db.RelDBWorker: Set(UsedName(createReply,[Default]), UsedName(intersect,[Default]), UsedName(joinIn,[Default]), UsedName(isInstanceOf,[Default]), UsedName(intersectIn,[Default]), UsedName(asInstanceOf,[Default]), UsedName(productIn,[Default]), UsedName(materialize,[Default]), UsedName(addReply,[Default]), UsedName(select,[Default]), UsedName(product,[Default]), UsedName(showIn,[Default]), UsedName(==,[Default]), UsedName(createIn,[Default]), UsedName(addIn,[Default]), UsedName(minus,[Default]), UsedName(minusIn,[Default]), UsedName(tableGenIn,[Default]), UsedName(package,[Default]), UsedName(materializeIn,[Default]), UsedName(selectIn,[Default]), UsedName(Predicate,[Default]), UsedName(relReply,[Default]), UsedName(add,[Default]), UsedName(relReply2,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.dist_db.RelDBMasterTest: Set(UsedName(show,[Default]), UsedName(create,[Default]), UsedName(materialize,[Default]), UsedName(select,[Default]), UsedName(package,[Default]), UsedName(Predicate,[Default]), UsedName(add,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.dist_db.RelDBMasterTest4: Set(UsedName(union,[Default]), UsedName(show,[Default]), UsedName(create,[Default]), UsedName(materialize,[Default]), UsedName(package,[Default]), UsedName(add,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.dist_db.package,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(createReply,[Default]), UsedName(Predicate2,[Default]), UsedName(union,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(intersect,[Default]), UsedName(delete,[Default]), UsedName(show,[Default]), UsedName(tableGen,[Default]), UsedName(joinIn,[Default]), UsedName(isInstanceOf,[Default]), UsedName(intersectIn,[Default]), UsedName(finalize,[Default]), UsedName(create,[Default]), UsedName(AggColumn,[Default]), UsedName(unionIn,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(productIn,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(materialize,[Default]), UsedName(addReply,[Default]), UsedName(getClass,[Default]), UsedName(select,[Default]), UsedName(product,[Default]), UsedName(showIn,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(createIn,[Default]), UsedName(join,[Default]), UsedName(projectIn,[Default]), UsedName(addIn,[Default]), UsedName(nameAll,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(minus,[Default]), UsedName(minusIn,[Default]), UsedName(tableGenIn,[Default]), UsedName(wait,[Default]), UsedName(package,[Default]), UsedName(materializeIn,[Default]), UsedName(ne,[Default]), UsedName(selectIn,[Default]), UsedName(Predicate,[Default]), UsedName(relReply,[Default]), UsedName(add,[Default]), UsedName(project,[Default]), UsedName(relReply2,[Default]), UsedName(AggFunction,[Default]), UsedName(eq,[Default]))) invalidates 6 classes due to The scalation.dist_db.package has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(createReply,[Default]), UsedName(Predicate2,[Default]), UsedName(union,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(intersect,[Default]), UsedName(delete,[Default]), UsedName(show,[Default]), UsedName(tableGen,[Default]), UsedName(joinIn,[Default]), UsedName(isInstanceOf,[Default]), UsedName(intersectIn,[Default]), UsedName(finalize,[Default]), UsedName(create,[Default]), UsedName(AggColumn,[Default]), UsedName(unionIn,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(productIn,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(materialize,[Default]), UsedName(addReply,[Default]), UsedName(getClass,[Default]), UsedName(select,[Default]), UsedName(product,[Default]), UsedName(showIn,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(createIn,[Default]), UsedName(join,[Default]), UsedName(projectIn,[Default]), UsedName(addIn,[Default]), UsedName(nameAll,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(minus,[Default]), UsedName(minusIn,[Default]), UsedName(tableGenIn,[Default]), UsedName(wait,[Default]), UsedName(package,[Default]), UsedName(materializeIn,[Default]), UsedName(ne,[Default]), UsedName(selectIn,[Default]), UsedName(Predicate,[Default]), UsedName(relReply,[Default]), UsedName(add,[Default]), UsedName(project,[Default]), UsedName(relReply2,[Default]), UsedName(AggFunction,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.dist_db.package)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> by member reference: Set(scalation.dist_db.RelDBMaster, scalation.dist_db.RelDBMasterTest5, scalation.dist_db.RelDBWorker, scalation.dist_db.RelDBMasterTest, scalation.dist_db.RelDBMasterTest4)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.columnar_db.DistanceOutlier...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.columnar_db.DistanceOutlier)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.columnar_db.DistanceOutlier)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.columnar_db.DistanceOutlier,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(rmOutliers,[Default]), UsedName(DistanceOutlier,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(DEBUG,[Default]), UsedName(ne,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.columnar_db.DistanceOutlier has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(rmOutliers,[Default]), UsedName(DistanceOutlier,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(DEBUG,[Default]), UsedName(ne,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.columnar_db.DistanceOutlier)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.Ball...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.Ball)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.Ball)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.Ball,ModifiedNames(changes = UsedName(nodesInBall,[Default]), UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(Ball,[Default]), UsedName(borderNodes,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getBallDiameter,[Default]), UsedName(chMap,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(center,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(merge,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(paMap,[Default]), UsedName(scalation;graph_db;pattern_matching;Ball;init;,[Default]), UsedName(pre,[Default]), UsedName(post,[Default]), UsedName(printBall,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.Ball has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(nodesInBall,[Default]), UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(Ball,[Default]), UsedName(borderNodes,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getBallDiameter,[Default]), UsedName(chMap,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(center,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(merge,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(paMap,[Default]), UsedName(scalation;graph_db;pattern_matching;Ball;init;,[Default]), UsedName(pre,[Default]), UsedName(post,[Default]), UsedName(printBall,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.Ball)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.columnar_db.Catalog...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.columnar_db.Catalog)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.columnar_db.Catalog)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.columnar_db.Catalog,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(remove,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(names,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(Catalog,[Default]), UsedName(getRelation,[Default]), UsedName(wait,[Default]), UsedName(add$default$4,[Default]), UsedName(ne,[Default]), UsedName(add,[Default]), UsedName(clear,[Default]), UsedName(add$default$5,[Default]), UsedName(getSchema,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.columnar_db.Catalog has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(remove,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(names,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(Catalog,[Default]), UsedName(getRelation,[Default]), UsedName(wait,[Default]), UsedName(add$default$4,[Default]), UsedName(ne,[Default]), UsedName(add,[Default]), UsedName(clear,[Default]), UsedName(add$default$5,[Default]), UsedName(getSchema,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.columnar_db.Catalog)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.GraphSimCARTest3...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.GraphSimCARTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.GraphSimCARTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.GraphSimCARTest3,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(GraphSimCARTest3,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.GraphSimCARTest3 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(GraphSimCARTest3,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.GraphSimCARTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graphalytics.Tree...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graphalytics.Tree)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graphalytics.Tree)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graphalytics.Tree,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(apply$default$2,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(printTree,[Default]), UsedName(apply$default$3,[Default]), UsedName(labelMap,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(name,[Default]), UsedName(scalation;graphalytics;Tree;init;,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(apply$default$4,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(apply,[Default]), UsedName(Tree,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(size,[Default]), UsedName(wait,[Default]), UsedName(<init>$default$3,[Default]), UsedName(ne,[Default]), UsedName(add,[Default]), UsedName(root,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.graphalytics.Tree has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(apply$default$2,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(printTree,[Default]), UsedName(apply$default$3,[Default]), UsedName(labelMap,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(name,[Default]), UsedName(scalation;graphalytics;Tree;init;,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(apply$default$4,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(apply,[Default]), UsedName(Tree,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(size,[Default]), UsedName(wait,[Default]), UsedName(<init>$default$3,[Default]), UsedName(ne,[Default]), UsedName(add,[Default]), UsedName(root,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graphalytics.Tree)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.columnar_db.MakeSchemaTest2...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.columnar_db.MakeSchemaTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.columnar_db.MakeSchemaTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.columnar_db.MakeSchemaTest2,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(auto_mpg_s,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(xy,[Default]), UsedName(synchronized,[Default]), UsedName(MakeSchemaTest2,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(url,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(auto_mpg,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.columnar_db.MakeSchemaTest2 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(auto_mpg_s,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(xy,[Default]), UsedName(synchronized,[Default]), UsedName(MakeSchemaTest2,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(url,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(auto_mpg,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.columnar_db.MakeSchemaTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.MGraphSimWTest6...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.MGraphSimWTest6)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.MGraphSimWTest6)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.MGraphSimWTest6,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(MGraphSimWTest6,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.MGraphSimWTest6 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(MGraphSimWTest6,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.MGraphSimWTest6)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.columnar_db.RelationTest6...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.columnar_db.RelationTest6)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.columnar_db.RelationTest6)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.columnar_db.RelationTest6,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(RelationTest6,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(professor,[Default]), UsedName(course,[Default]), UsedName(teaching,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.columnar_db.RelationTest6 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(RelationTest6,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(professor,[Default]), UsedName(course,[Default]), UsedName(teaching,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.columnar_db.RelationTest6)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.graph_algebra.MuGraphAlgebra...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.graph_algebra.MuGraphAlgebra)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.graph_algebra.MuGraphAlgebra)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.graph_algebra.MuGraphAlgebra,ModifiedNames(changes = UsedName(expandBySchema,[Default]), UsedName(getLabels,[Default]), UsedName(le,[Default]), UsedName(ga,[Default]), UsedName(nSelfLoops,[Default]), UsedName(equals,[Default]), UsedName(union,[Default]), UsedName(edgeMap,[Default]), UsedName(children,[Default]), UsedName(schema,[Default]), UsedName(selectBySchema,[Default]), UsedName(testSetup$default$2,[Default]), UsedName(hashCode,[Default]), UsedName(password,[Default]), UsedName(expandBySchema$default$3,[Default]), UsedName(testSetup$default$4,[Default]), UsedName($isInstanceOf,[Default]), UsedName(expandInto,[Default]), UsedName(clone,[Default]), UsedName(induceEdges,[Default]), UsedName(label,[Default]), UsedName(printG$default$1,[Default]), UsedName(renumber,[Default]), UsedName(intersect,[Default]), UsedName(nEdges,[Default]), UsedName(neo,[Default]), UsedName(printG,[Default]), UsedName(test$default$3,[Default]), UsedName(labelMap,[Default]), UsedName(addVertices$default$3,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(inverse,[Default]), UsedName(name,[Default]), UsedName(vid,[Default]), UsedName(asInstanceOf,[Default]), UsedName(selectBySchema$default$3,[Default]), UsedName(scalation;graph_db;graph_algebra;MuGraphAlgebra;init;,[Default]), UsedName($asInstanceOf,[Default]), UsedName(toLine$default$2,[Default]), UsedName(!=,[Default]), UsedName(expandBackAll,[Default]), UsedName(testSetup,[Default]), UsedName(notifyAll,[Default]), UsedName(ch,[Default]), UsedName(expandBackBySchema$default$3,[Default]), UsedName(getVertices,[Default]), UsedName(toLine,[Default]), UsedName(getClass,[Default]), UsedName(expand,[Default]), UsedName(expandBack$default$3,[Default]), UsedName(count,[Default]), UsedName(MuGraphAlgebra,[Default]), UsedName(user_name,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(elabel,[Default]), UsedName(buildLabelMap,[Default]), UsedName(indexEdges,[Default]), UsedName(apply,[Default]), UsedName(id,[Default]), UsedName(parents,[Default]), UsedName(makeUndirected,[Default]), UsedName(checkEdges,[Default]), UsedName(toGraphIm,[Default]), UsedName(selectByVLabel,[Default]), UsedName(synchronized,[Default]), UsedName(<init>$default$6,[Default]), UsedName(same,[Default]), UsedName(toString,[Default]), UsedName(selectByVLabel$default$3,[Default]), UsedName(##,[Default]), UsedName(test,[Default]), UsedName(minus,[Default]), UsedName(expandEdges,[Default]), UsedName(getVerticesWithLabel,[Default]), UsedName(<init>$default$5,[Default]), UsedName(connection,[Default]), UsedName(size,[Default]), UsedName(wait,[Default]), UsedName(expandBackAll$default$2,[Default]), UsedName(addPar,[Default]), UsedName(expandBack,[Default]), UsedName(buildId,[Default]), UsedName(indexMap,[Default]), UsedName(ne,[Default]), UsedName(selectByELabel,[Default]), UsedName(selectByEdgeGraph,[Default]), UsedName(addVertices,[Default]), UsedName(testSetup$default$3,[Default]), UsedName(pa,[Default]), UsedName(expandAll,[Default]), UsedName(<init>$default$7,[Default]), UsedName(dg,[Default]), UsedName(checkElabels,[Default]), UsedName(selectByVertexGraph,[Default]), UsedName(lv,[Default]), UsedName(expandAll$default$2,[Default]), UsedName(buildIndex,[Default]), UsedName(isConnected,[Default]), UsedName(expand$default$3,[Default]), UsedName(toGraphIm$default$1,[Default]), UsedName(<init>$default$4,[Default]), UsedName(expandBackBySchema,[Default]), UsedName(vertexSet,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.graph_db.graph_algebra.MuGraphAlgebra has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(expandBySchema,[Default]), UsedName(getLabels,[Default]), UsedName(le,[Default]), UsedName(ga,[Default]), UsedName(nSelfLoops,[Default]), UsedName(equals,[Default]), UsedName(union,[Default]), UsedName(edgeMap,[Default]), UsedName(children,[Default]), UsedName(schema,[Default]), UsedName(selectBySchema,[Default]), UsedName(testSetup$default$2,[Default]), UsedName(hashCode,[Default]), UsedName(password,[Default]), UsedName(expandBySchema$default$3,[Default]), UsedName(testSetup$default$4,[Default]), UsedName($isInstanceOf,[Default]), UsedName(expandInto,[Default]), UsedName(clone,[Default]), UsedName(induceEdges,[Default]), UsedName(label,[Default]), UsedName(printG$default$1,[Default]), UsedName(renumber,[Default]), UsedName(intersect,[Default]), UsedName(nEdges,[Default]), UsedName(neo,[Default]), UsedName(printG,[Default]), UsedName(test$default$3,[Default]), UsedName(labelMap,[Default]), UsedName(addVertices$default$3,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(inverse,[Default]), UsedName(name,[Default]), UsedName(vid,[Default]), UsedName(asInstanceOf,[Default]), UsedName(selectBySchema$default$3,[Default]), UsedName(scalation;graph_db;graph_algebra;MuGraphAlgebra;init;,[Default]), UsedName($asInstanceOf,[Default]), UsedName(toLine$default$2,[Default]), UsedName(!=,[Default]), UsedName(expandBackAll,[Default]), UsedName(testSetup,[Default]), UsedName(notifyAll,[Default]), UsedName(ch,[Default]), UsedName(expandBackBySchema$default$3,[Default]), UsedName(getVertices,[Default]), UsedName(toLine,[Default]), UsedName(getClass,[Default]), UsedName(expand,[Default]), UsedName(expandBack$default$3,[Default]), UsedName(count,[Default]), UsedName(MuGraphAlgebra,[Default]), UsedName(user_name,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(elabel,[Default]), UsedName(buildLabelMap,[Default]), UsedName(indexEdges,[Default]), UsedName(apply,[Default]), UsedName(id,[Default]), UsedName(parents,[Default]), UsedName(makeUndirected,[Default]), UsedName(checkEdges,[Default]), UsedName(toGraphIm,[Default]), UsedName(selectByVLabel,[Default]), UsedName(synchronized,[Default]), UsedName(<init>$default$6,[Default]), UsedName(same,[Default]), UsedName(toString,[Default]), UsedName(selectByVLabel$default$3,[Default]), UsedName(##,[Default]), UsedName(test,[Default]), UsedName(minus,[Default]), UsedName(expandEdges,[Default]), UsedName(getVerticesWithLabel,[Default]), UsedName(<init>$default$5,[Default]), UsedName(connection,[Default]), UsedName(size,[Default]), UsedName(wait,[Default]), UsedName(expandBackAll$default$2,[Default]), UsedName(addPar,[Default]), UsedName(expandBack,[Default]), UsedName(buildId,[Default]), UsedName(indexMap,[Default]), UsedName(ne,[Default]), UsedName(selectByELabel,[Default]), UsedName(selectByEdgeGraph,[Default]), UsedName(addVertices,[Default]), UsedName(testSetup$default$3,[Default]), UsedName(pa,[Default]), UsedName(expandAll,[Default]), UsedName(<init>$default$7,[Default]), UsedName(dg,[Default]), UsedName(checkElabels,[Default]), UsedName(selectByVertexGraph,[Default]), UsedName(lv,[Default]), UsedName(expandAll$default$2,[Default]), UsedName(buildIndex,[Default]), UsedName(isConnected,[Default]), UsedName(expand$default$3,[Default]), UsedName(toGraphIm$default$1,[Default]), UsedName(<init>$default$4,[Default]), UsedName(expandBackBySchema,[Default]), UsedName(vertexSet,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.graph_algebra.MuGraphAlgebra)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.MStrictSimTest4...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.MStrictSimTest4)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.MStrictSimTest4)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.MStrictSimTest4,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(MStrictSimTest4,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.MStrictSimTest4 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(MStrictSimTest4,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.MStrictSimTest4)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.MGraphSimTest2...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.MGraphSimTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.MGraphSimTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.MGraphSimTest2,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(MGraphSimTest2,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.MGraphSimTest2 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(MGraphSimTest2,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.MGraphSimTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.MDualSimCARTest6...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.MDualSimCARTest6)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.MDualSimCARTest6)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.MDualSimCARTest6,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(MDualSimCARTest6,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.MDualSimCARTest6 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(MDualSimCARTest6,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.MDualSimCARTest6)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.MGraphSim2WTest3...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.MGraphSim2WTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.MGraphSim2WTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.MGraphSim2WTest3,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(MGraphSim2WTest3,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.MGraphSim2WTest3 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(MGraphSim2WTest3,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.MGraphSim2WTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graphalytics.TreeLayoutTest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graphalytics.TreeLayoutTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graphalytics.TreeLayoutTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graphalytics.TreeLayoutTest,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(TreeLayoutTest,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(pred,[Default]), UsedName(main,[Default]), UsedName(labl,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(tree,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(y,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(tl,[Default]), UsedName(ne,[Default]), UsedName(x,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graphalytics.TreeLayoutTest has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(TreeLayoutTest,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(pred,[Default]), UsedName(main,[Default]), UsedName(labl,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(tree,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(y,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(tl,[Default]), UsedName(ne,[Default]), UsedName(x,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graphalytics.TreeLayoutTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graphalytics.DualIso...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graphalytics.DualIso)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graphalytics.DualIso)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graphalytics.DualIso,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(test$default$2,[Default]), UsedName(overlaps,[Default]), UsedName(setLimit,[Default]), UsedName(hashCode,[Default]), UsedName(DualIso,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(numMatches,[Default]), UsedName(isInstanceOf,[Default]), UsedName(bijections,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(disjoint,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(qRange,[Default]), UsedName(notifyAll,[Default]), UsedName(SELF_LOOPS,[Default]), UsedName(getClass,[Default]), UsedName(LIMIT,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(feasibleMates,[Default]), UsedName(CHECK,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(test,[Default]), UsedName(showMappings,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(prune,[Default]), UsedName(scalation;graphalytics;DualIso;init;,[Default]), UsedName(mappings,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.graphalytics.DualIso has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(test$default$2,[Default]), UsedName(overlaps,[Default]), UsedName(setLimit,[Default]), UsedName(hashCode,[Default]), UsedName(DualIso,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(numMatches,[Default]), UsedName(isInstanceOf,[Default]), UsedName(bijections,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(disjoint,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(qRange,[Default]), UsedName(notifyAll,[Default]), UsedName(SELF_LOOPS,[Default]), UsedName(getClass,[Default]), UsedName(LIMIT,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(feasibleMates,[Default]), UsedName(CHECK,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(test,[Default]), UsedName(showMappings,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(prune,[Default]), UsedName(scalation;graphalytics;DualIso;init;,[Default]), UsedName(mappings,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graphalytics.DualIso)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.BoundedTreeWidthBN...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.BoundedTreeWidthBN)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.BoundedTreeWidthBN)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.BoundedTreeWidthBN,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(stree,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(BoundedTreeWidthBN,[Default]), UsedName(blockSort,[Default]), UsedName(orderVertices,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(findbestEdge,[Default]), UsedName(maxCliqueSize,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(scalation;graph_db;BoundedTreeWidthBN;init;,[Default]), UsedName(flaw,[Default]), UsedName(addEdgesGreedily,[Default]), UsedName(wait,[Default]), UsedName(learnBN,[Default]), UsedName(DEBUG,[Default]), UsedName(ne,[Default]), UsedName(positiveEdges,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.BoundedTreeWidthBN has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(stree,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(BoundedTreeWidthBN,[Default]), UsedName(blockSort,[Default]), UsedName(orderVertices,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(findbestEdge,[Default]), UsedName(maxCliqueSize,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(scalation;graph_db;BoundedTreeWidthBN;init;,[Default]), UsedName(flaw,[Default]), UsedName(addEdgesGreedily,[Default]), UsedName(wait,[Default]), UsedName(learnBN,[Default]), UsedName(DEBUG,[Default]), UsedName(ne,[Default]), UsedName(positiveEdges,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.BoundedTreeWidthBN)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.MDualSim2XTest4...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.MDualSim2XTest4)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.MDualSim2XTest4)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.MDualSim2XTest4,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(MDualSim2XTest4,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.MDualSim2XTest4 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(MDualSim2XTest4,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.MDualSim2XTest4)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.dist_db.RelDBMasterTest2...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.dist_db.RelDBMasterTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.dist_db.RelDBMasterTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.dist_db.RelDBMasterTest2,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(RelDBMasterTest2,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(r1,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(r2,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.dist_db.RelDBMasterTest2 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(RelDBMasterTest2,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(r1,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(r2,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.dist_db.RelDBMasterTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.MGraphSim2XTest6...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.MGraphSim2XTest6)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.MGraphSim2XTest6)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.MGraphSim2XTest6,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(MGraphSim2XTest6,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.MGraphSim2XTest6 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(MGraphSim2XTest6,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.MGraphSim2XTest6)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.MGraphSim2Test5...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.MGraphSim2Test5)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.MGraphSim2Test5)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.MGraphSim2Test5,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(MGraphSim2Test5,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.MGraphSim2Test5 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(MGraphSim2Test5,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.MGraphSim2Test5)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.columnar_db.RelationTest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.columnar_db.RelationTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.columnar_db.RelationTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.columnar_db.RelationTest,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(weekend,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(RelationTest,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(week,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(weekdays,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.columnar_db.RelationTest has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(weekend,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(RelationTest,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(week,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(weekdays,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.columnar_db.RelationTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.graph_algebra.MuDualIsoTest3...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.graph_algebra.MuDualIsoTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.graph_algebra.MuDualIsoTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.graph_algebra.MuDualIsoTest3,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(matcher,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(MuDualIsoTest3,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(psi,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.graph_algebra.MuDualIsoTest3 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(matcher,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(MuDualIsoTest3,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(psi,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.graph_algebra.MuDualIsoTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.SpanningTree...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.SpanningTree)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.SpanningTree)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.SpanningTree,ModifiedNames(changes = UsedName(setStackTrace,[Default]), UsedName(equals,[Default]), UsedName(scalation;graph_db;SpanningTree;init;,[Default]), UsedName(getStackTrace,[Default]), UsedName(hashCode,[Default]), UsedName(getLocalizedMessage,[Default]), UsedName(initCause,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(isInstanceOf,[Default]), UsedName(getStackTraceDepth,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(span,[Default]), UsedName(getMessage,[Default]), UsedName(getStackTraceElement,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(printSTree,[Default]), UsedName(getSuppressed,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(getCause,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(printStackTrace,[Default]), UsedName(wait,[Default]), UsedName(SpanningTree,[Default]), UsedName(ne,[Default]), UsedName(addSuppressed,[Default]), UsedName(fillInStackTrace,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.graph_db.SpanningTree has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(setStackTrace,[Default]), UsedName(equals,[Default]), UsedName(scalation;graph_db;SpanningTree;init;,[Default]), UsedName(getStackTrace,[Default]), UsedName(hashCode,[Default]), UsedName(getLocalizedMessage,[Default]), UsedName(initCause,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(isInstanceOf,[Default]), UsedName(getStackTraceDepth,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(span,[Default]), UsedName(getMessage,[Default]), UsedName(getStackTraceElement,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(printSTree,[Default]), UsedName(getSuppressed,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(getCause,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(printStackTrace,[Default]), UsedName(wait,[Default]), UsedName(SpanningTree,[Default]), UsedName(ne,[Default]), UsedName(addSuppressed,[Default]), UsedName(fillInStackTrace,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.SpanningTree)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.DualSim2Test3...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.DualSim2Test3)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.DualSim2Test3)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.DualSim2Test3,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(DualSim2Test3,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.DualSim2Test3 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(DualSim2Test3,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.DualSim2Test3)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.GraphSimTest4...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.GraphSimTest4)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.GraphSimTest4)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.GraphSimTest4,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(GraphSimTest4,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.GraphSimTest4 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(GraphSimTest4,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.GraphSimTest4)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.dist_db.addReply...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.dist_db.addReply)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.dist_db.addReply)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.dist_db.RelDBMaster: Set(UsedName(isInstanceOf,[Default]), UsedName(name,[Default]), UsedName(asInstanceOf,[Default]), UsedName(addReply,[Default]), UsedName(==,[Default]), UsedName(apply,[Default]), UsedName(ne,[Default]), UsedName(n,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.dist_db.RelDBWorker: Set(UsedName(isInstanceOf,[Default]), UsedName(name,[Default]), UsedName(asInstanceOf,[Default]), UsedName(addReply,[Default]), UsedName(==,[Default]), UsedName(apply,[Default]), UsedName(n,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.dist_db.addReply,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(copy$default$1,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(canEqual,[Default]), UsedName(curried,[Default]), UsedName(productPrefix,[Default]), UsedName(tupled,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(name,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(copy$default$2,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(addReply,[Default]), UsedName(getClass,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(unapply,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(apply,[Default]), UsedName(scalation;dist_db;addReply;init;,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(n,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 3 classes due to The scalation.dist_db.addReply has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(copy$default$1,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(canEqual,[Default]), UsedName(curried,[Default]), UsedName(productPrefix,[Default]), UsedName(tupled,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(name,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(copy$default$2,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(addReply,[Default]), UsedName(getClass,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(unapply,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(apply,[Default]), UsedName(scalation;dist_db;addReply;init;,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(n,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.dist_db.addReply)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> by member reference: Set(scalation.dist_db.RelDBMaster, scalation.dist_db.RelDBWorker)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graphalytics.Answers...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graphalytics.Answers)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graphalytics.Answers)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graphalytics.Answers,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName(phi3,[Default]), UsedName($isInstanceOf,[Default]), UsedName(phi1,[Default]), UsedName(phi4,[Default]), UsedName(clone,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(Answers,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(phi2,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.graphalytics.Answers has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName(phi3,[Default]), UsedName($isInstanceOf,[Default]), UsedName(phi1,[Default]), UsedName(phi4,[Default]), UsedName(clone,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(Answers,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(phi2,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graphalytics.Answers)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.MGraphSim2Test4...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.MGraphSim2Test4)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.MGraphSim2Test4)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.MGraphSim2Test4,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(MGraphSim2Test4,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.MGraphSim2Test4 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(MGraphSim2Test4,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.MGraphSim2Test4)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.MGraphSimX...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.MGraphSimX)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.MGraphSimX)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.MGraphSimX,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(test$default$2,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(feasibleMatesW,[Default]), UsedName(scalation;graph_db;pattern_matching;MGraphSimX;init;,[Default]), UsedName(isInstanceOf,[Default]), UsedName(bijections,[Default]), UsedName(MGraphSimX,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(disjoint,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(qRange,[Default]), UsedName(notifyAll,[Default]), UsedName(SELF_LOOPS,[Default]), UsedName(getClass,[Default]), UsedName(LIMIT,[Default]), UsedName(gRange,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(feasibleMates,[Default]), UsedName(CHECK,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(test,[Default]), UsedName(showMappings,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(countMappings,[Default]), UsedName(filterGraph,[Default]), UsedName(prune,[Default]), UsedName(mappings,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.MGraphSimX has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(test$default$2,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(feasibleMatesW,[Default]), UsedName(scalation;graph_db;pattern_matching;MGraphSimX;init;,[Default]), UsedName(isInstanceOf,[Default]), UsedName(bijections,[Default]), UsedName(MGraphSimX,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(disjoint,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(qRange,[Default]), UsedName(notifyAll,[Default]), UsedName(SELF_LOOPS,[Default]), UsedName(getClass,[Default]), UsedName(LIMIT,[Default]), UsedName(gRange,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(feasibleMates,[Default]), UsedName(CHECK,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(test,[Default]), UsedName(showMappings,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(countMappings,[Default]), UsedName(filterGraph,[Default]), UsedName(prune,[Default]), UsedName(mappings,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.MGraphSimX)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.test.package...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.test.package)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.test.package)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.test.package,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(package,[Default]), UsedName(ne,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.test.package has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(package,[Default]), UsedName(ne,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.test.package)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.dist_db.union...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.dist_db.union)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.dist_db.union)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.dist_db.RelDBMasterTest4: Set(UsedName(union,[Default]), UsedName(apply,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.dist_db.RelDBMaster: Set(UsedName(union,[Default]), UsedName(isInstanceOf,[Default]), UsedName(name,[Default]), UsedName(asInstanceOf,[Default]), UsedName(rName,[Default]), UsedName(==,[Default]), UsedName(apply,[Default]), UsedName(name2,[Default]), UsedName(ne,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.dist_db.union,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(union,[Default]), UsedName(copy$default$1,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(canEqual,[Default]), UsedName(curried,[Default]), UsedName(productPrefix,[Default]), UsedName(tupled,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(name,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(copy$default$2,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(rName,[Default]), UsedName(getClass,[Default]), UsedName(scalation;dist_db;union;init;,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(unapply,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(apply,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(name2,[Default]), UsedName(copy$default$3,[Default]), UsedName(ne,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 3 classes due to The scalation.dist_db.union has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(union,[Default]), UsedName(copy$default$1,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(canEqual,[Default]), UsedName(curried,[Default]), UsedName(productPrefix,[Default]), UsedName(tupled,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(name,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(copy$default$2,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(rName,[Default]), UsedName(getClass,[Default]), UsedName(scalation;dist_db;union;init;,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(unapply,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(apply,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(name2,[Default]), UsedName(copy$default$3,[Default]), UsedName(ne,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.dist_db.union)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> by member reference: Set(scalation.dist_db.RelDBMasterTest4, scalation.dist_db.RelDBMaster)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.test.StrictPattern_STest2...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.test.StrictPattern_STest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.test.StrictPattern_STest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.test.StrictPattern_STest2,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(gLabels,[Default]), UsedName(main,[Default]), UsedName(StrictPattern_STest2,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(gDegree,[Default]), UsedName(inverse,[Default]), UsedName(UNIFORM,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(qSize,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(qDegree,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.test.StrictPattern_STest2 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(gLabels,[Default]), UsedName(main,[Default]), UsedName(StrictPattern_STest2,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(gDegree,[Default]), UsedName(inverse,[Default]), UsedName(UNIFORM,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(qSize,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(qDegree,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.test.StrictPattern_STest2)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.MDualSim2WTest6...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.MDualSim2WTest6)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.MDualSim2WTest6)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.MDualSim2WTest6,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(MDualSim2WTest6,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.MDualSim2WTest6 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(MDualSim2WTest6,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.MDualSim2WTest6)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.columnar_db.MissingValuesTable...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.columnar_db.MissingValuesTable)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.columnar_db.MissingValuesTable)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.columnar_db.MissingValuesTable,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(MissingValuesTable,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(productSales,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.columnar_db.MissingValuesTable has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(MissingValuesTable,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(productSales,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.columnar_db.MissingValuesTable)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graphalytics.TreeTest4...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graphalytics.TreeTest4)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graphalytics.TreeTest4)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graphalytics.TreeTest4,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(pred,[Default]), UsedName(main,[Default]), UsedName(labl,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(tree,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(TreeTest4,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graphalytics.TreeTest4 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(pred,[Default]), UsedName(main,[Default]), UsedName(labl,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(tree,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(TreeTest4,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graphalytics.TreeTest4)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.dist_db.intersectIn...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.dist_db.intersectIn)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.dist_db.intersectIn)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.dist_db.RelDBMaster: Set(UsedName(isInstanceOf,[Default]), UsedName(intersectIn,[Default]), UsedName(asInstanceOf,[Default]), UsedName(rName,[Default]), UsedName(==,[Default]), UsedName(apply,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(r,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.dist_db.RelDBWorker: Set(UsedName(isInstanceOf,[Default]), UsedName(intersectIn,[Default]), UsedName(asInstanceOf,[Default]), UsedName(uc,[Default]), UsedName(rName,[Default]), UsedName(==,[Default]), UsedName(apply,[Default]), UsedName(q,[Default]), UsedName(r,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.dist_db.intersectIn,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(copy$default$1,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(canEqual,[Default]), UsedName(curried,[Default]), UsedName(productPrefix,[Default]), UsedName(tupled,[Default]), UsedName(isInstanceOf,[Default]), UsedName(intersectIn,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(copy$default$2,[Default]), UsedName(uc,[Default]), UsedName(!=,[Default]), UsedName(scalation;dist_db;intersectIn;init;,[Default]), UsedName(notifyAll,[Default]), UsedName(rName,[Default]), UsedName(getClass,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(unapply,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(copy$default$4,[Default]), UsedName(apply,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(copy$default$3,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(r,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 3 classes due to The scalation.dist_db.intersectIn has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(copy$default$1,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(canEqual,[Default]), UsedName(curried,[Default]), UsedName(productPrefix,[Default]), UsedName(tupled,[Default]), UsedName(isInstanceOf,[Default]), UsedName(intersectIn,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(copy$default$2,[Default]), UsedName(uc,[Default]), UsedName(!=,[Default]), UsedName(scalation;dist_db;intersectIn;init;,[Default]), UsedName(notifyAll,[Default]), UsedName(rName,[Default]), UsedName(getClass,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(unapply,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(copy$default$4,[Default]), UsedName(apply,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(copy$default$3,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(r,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.dist_db.intersectIn)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> by member reference: Set(scalation.dist_db.RelDBMaster, scalation.dist_db.RelDBWorker)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.MDualSimCARTest2...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.MDualSimCARTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.MDualSimCARTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.MDualSimCARTest2,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(MDualSimCARTest2,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.MDualSimCARTest2 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(MDualSimCARTest2,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.MDualSimCARTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.MGraphSim2Test2...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.MGraphSim2Test2)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.MGraphSim2Test2)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.MGraphSim2Test2,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(MGraphSim2Test2,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.MGraphSim2Test2 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(MGraphSim2Test2,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.MGraphSim2Test2)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.dist_db.RelDBMasterTest4...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.dist_db.RelDBMasterTest4)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.dist_db.RelDBMasterTest4)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.dist_db.RelDBMasterTest4,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(actorSystem,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(r1,[Default]), UsedName(synchronized,[Default]), UsedName(RelDBMasterTest4,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(actor,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(r2,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.dist_db.RelDBMasterTest4 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(actorSystem,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(r1,[Default]), UsedName(synchronized,[Default]), UsedName(RelDBMasterTest4,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(actor,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(r2,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.dist_db.RelDBMasterTest4)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.distributed_db.materialize...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.distributed_db.materialize)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.distributed_db.materialize)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.distributed_db.RelationDBMaster: Set(UsedName(isInstanceOf,[Default]), UsedName(name,[Default]), UsedName(asInstanceOf,[Default]), UsedName(materialize,[Default]), UsedName(==,[Default]), UsedName(apply,[Default]), UsedName(ne,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.distributed_db.RelationDBMasterTest: Set(UsedName(materialize,[Default]), UsedName(apply,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.distributed_db.materialize,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(copy$default$1,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(canEqual,[Default]), UsedName(productPrefix,[Default]), UsedName(compose,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(name,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(andThen,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(materialize,[Default]), UsedName(getClass,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(unapply,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(apply,[Default]), UsedName(synchronized,[Default]), UsedName(scalation;distributed_db;materialize;init;,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 3 classes due to The scalation.distributed_db.materialize has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(copy$default$1,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(canEqual,[Default]), UsedName(productPrefix,[Default]), UsedName(compose,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(name,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(andThen,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(materialize,[Default]), UsedName(getClass,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(unapply,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(apply,[Default]), UsedName(synchronized,[Default]), UsedName(scalation;distributed_db;materialize;init;,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.distributed_db.materialize)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> by member reference: Set(scalation.distributed_db.RelationDBMaster, scalation.distributed_db.RelationDBMasterTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.distributed_db.DistUtil...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.distributed_db.DistUtil)[0m
[0m[[0m[0mdebug[0m] [0m[0mIncluding scalation.distributed_db.RelationDBMaster by scalation.distributed_db.DistUtil[0m
[0m[[0m[0mdebug[0m] [0m[0mIncluding scalation.distributed_db.RelationDBWorker by scalation.distributed_db.DistUtil[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.distributed_db.DistUtil, scalation.distributed_db.RelationDBWorker, scalation.distributed_db.RelationDBMaster)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.distributed_db.RelationDBMaster: Set(UsedName(retTableMap,[Default]), UsedName(ri,[Default]), UsedName(isInstanceOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(DistUtil,[Default]), UsedName(==,[Default]), UsedName(tableMap,[Default]), UsedName(ne,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.distributed_db.RelationDBWorker: Set(UsedName(rSeq,[Default]), UsedName(isInstanceOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(DistUtil,[Default]), UsedName(==,[Default]), UsedName(tableMap,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.distributed_db.RelationDBMaster: Set(UsedName(retTableMap,[Default]), UsedName(ri,[Default]), UsedName(isInstanceOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(DistUtil,[Default]), UsedName(==,[Default]), UsedName(tableMap,[Default]), UsedName(ne,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.distributed_db.DistUtil,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(rSeq,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(retTableMap,[Default]), UsedName(ri,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(DistUtil,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(tableMap,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 3 classes due to The scalation.distributed_db.DistUtil has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(rSeq,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(retTableMap,[Default]), UsedName(ri,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(DistUtil,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(tableMap,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.distributed_db.DistUtil, scalation.distributed_db.RelationDBWorker, scalation.distributed_db.RelationDBMaster)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> by member reference: Set(scalation.distributed_db.RelationDBMaster, scalation.distributed_db.RelationDBWorker)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.MGraphSimW...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.MGraphSimW)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.MGraphSimW)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.MGraphSimW,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(test$default$2,[Default]), UsedName(hashCode,[Default]), UsedName(scalation;graph_db;pattern_matching;MGraphSimW;init;,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(feasibleMatesW,[Default]), UsedName(isInstanceOf,[Default]), UsedName(bijections,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(disjoint,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(qRange,[Default]), UsedName(notifyAll,[Default]), UsedName(SELF_LOOPS,[Default]), UsedName(getClass,[Default]), UsedName(LIMIT,[Default]), UsedName(gRange,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(feasibleMates,[Default]), UsedName(CHECK,[Default]), UsedName(synchronized,[Default]), UsedName(MGraphSimW,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(test,[Default]), UsedName(showMappings,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(countMappings,[Default]), UsedName(filterGraph,[Default]), UsedName(prune,[Default]), UsedName(mappings,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.MGraphSimW has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(test$default$2,[Default]), UsedName(hashCode,[Default]), UsedName(scalation;graph_db;pattern_matching;MGraphSimW;init;,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(feasibleMatesW,[Default]), UsedName(isInstanceOf,[Default]), UsedName(bijections,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(disjoint,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(qRange,[Default]), UsedName(notifyAll,[Default]), UsedName(SELF_LOOPS,[Default]), UsedName(getClass,[Default]), UsedName(LIMIT,[Default]), UsedName(gRange,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(feasibleMates,[Default]), UsedName(CHECK,[Default]), UsedName(synchronized,[Default]), UsedName(MGraphSimW,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(test,[Default]), UsedName(showMappings,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(countMappings,[Default]), UsedName(filterGraph,[Default]), UsedName(prune,[Default]), UsedName(mappings,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.MGraphSimW)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.graph_algebra.MuTightSimTest3...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.graph_algebra.MuTightSimTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.graph_algebra.MuTightSimTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.graph_algebra.MuTightSimTest3,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(matcher,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(MuTightSimTest3,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.graph_algebra.MuTightSimTest3 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(matcher,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(MuTightSimTest3,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.graph_algebra.MuTightSimTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.MTightSimTest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.MTightSimTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.MTightSimTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.MTightSimTest,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(MTightSimTest,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.MTightSimTest has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(MTightSimTest,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.MTightSimTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.MGraphSim2XTest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.MGraphSim2XTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.MGraphSim2XTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.MGraphSim2XTest,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(MGraphSim2XTest,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.MGraphSim2XTest has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(MGraphSim2XTest,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.MGraphSim2XTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.MDualSim2XTest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.MDualSim2XTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.MDualSim2XTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.MDualSim2XTest,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(MDualSim2XTest,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.MDualSim2XTest has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(MDualSim2XTest,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.MDualSim2XTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.columnar_db.RelationTest5...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.columnar_db.RelationTest5)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.columnar_db.RelationTest5)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.columnar_db.RelationTest5,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(sales_item1,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(price_item1,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(z,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(y,[Default]), UsedName(revenue,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(RelationTest5,[Default]), UsedName(x,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.columnar_db.RelationTest5 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(sales_item1,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(price_item1,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(z,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(y,[Default]), UsedName(revenue,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(RelationTest5,[Default]), UsedName(x,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.columnar_db.RelationTest5)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.graph_algebra.ExampleMuGraphD...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.graph_algebra.ExampleMuGraphD)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.graph_algebra.ExampleMuGraphD)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.graph_algebra.ExampleMuGraphD,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(schema,[Default]), UsedName(schema1,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(isInstanceOf,[Default]), UsedName(ExampleMuGraphD,[Default]), UsedName(finalize,[Default]), UsedName(q2,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(g1,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g2p,[Default]), UsedName(synchronized,[Default]), UsedName(g2,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(q1,[Default]), UsedName(q1p,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(g1p,[Default]), UsedName(q2p,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.graph_db.graph_algebra.ExampleMuGraphD has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(schema,[Default]), UsedName(schema1,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(isInstanceOf,[Default]), UsedName(ExampleMuGraphD,[Default]), UsedName(finalize,[Default]), UsedName(q2,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(g1,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g2p,[Default]), UsedName(synchronized,[Default]), UsedName(g2,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(q1,[Default]), UsedName(q1p,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(g1p,[Default]), UsedName(q2p,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.graph_algebra.ExampleMuGraphD)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.MDualSimWTest5...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.MDualSimWTest5)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.MDualSimWTest5)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.MDualSimWTest5,ModifiedNames(changes = UsedName(MDualSimWTest5,[Default]), UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.MDualSimWTest5 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(MDualSimWTest5,[Default]), UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.MDualSimWTest5)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.MDualSim2WTest5...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.MDualSim2WTest5)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.MDualSim2WTest5)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.MDualSim2WTest5,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(MDualSim2WTest5,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.MDualSim2WTest5 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(MDualSim2WTest5,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.MDualSim2WTest5)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.CycleTest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.CycleTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.CycleTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.CycleTest,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(pg2,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(CycleTest,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(pg1,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.CycleTest has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(pg2,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(CycleTest,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(pg1,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.CycleTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.MDualIso...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.MDualIso)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.MDualIso)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.MDualIso,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(test$default$2,[Default]), UsedName(setLimit,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(feasibleMatesW,[Default]), UsedName(MDualIso,[Default]), UsedName(numMatches,[Default]), UsedName(isInstanceOf,[Default]), UsedName(bijections,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(disjoint,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(qRange,[Default]), UsedName(notifyAll,[Default]), UsedName(SELF_LOOPS,[Default]), UsedName(getClass,[Default]), UsedName(LIMIT,[Default]), UsedName(gRange,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(feasibleMates,[Default]), UsedName(CHECK,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(test,[Default]), UsedName(showMappings,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(countMappings,[Default]), UsedName(filterGraph,[Default]), UsedName(scalation;graph_db;pattern_matching;MDualIso;init;,[Default]), UsedName(prune,[Default]), UsedName(mappings,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.MDualIso has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(test$default$2,[Default]), UsedName(setLimit,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(feasibleMatesW,[Default]), UsedName(MDualIso,[Default]), UsedName(numMatches,[Default]), UsedName(isInstanceOf,[Default]), UsedName(bijections,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(disjoint,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(qRange,[Default]), UsedName(notifyAll,[Default]), UsedName(SELF_LOOPS,[Default]), UsedName(getClass,[Default]), UsedName(LIMIT,[Default]), UsedName(gRange,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(feasibleMates,[Default]), UsedName(CHECK,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(test,[Default]), UsedName(showMappings,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(countMappings,[Default]), UsedName(filterGraph,[Default]), UsedName(scalation;graph_db;pattern_matching;MDualIso;init;,[Default]), UsedName(prune,[Default]), UsedName(mappings,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.MDualIso)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.MDualSimXTest5...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.MDualSimXTest5)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.MDualSimXTest5)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.MDualSimXTest5,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(MDualSimXTest5,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.MDualSimXTest5 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(MDualSimXTest5,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.MDualSimXTest5)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graphalytics.GraphMetrics...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graphalytics.GraphMetrics)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graphalytics.GraphMetrics)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graphalytics.GraphMetrics,ModifiedNames(changes = UsedName(diam,[Default]), UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName(rad,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(GraphMetrics,[Default]), UsedName(scalation;graphalytics;GraphMetrics;init;,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(ecc,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(central,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.graphalytics.GraphMetrics has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(diam,[Default]), UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName(rad,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(GraphMetrics,[Default]), UsedName(scalation;graphalytics;GraphMetrics;init;,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(ecc,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(central,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graphalytics.GraphMetrics)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.distributed_db.minusIn...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.distributed_db.minusIn)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.distributed_db.minusIn)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.distributed_db.RelationDBMaster: Set(UsedName(isInstanceOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(==,[Default]), UsedName(apply,[Default]), UsedName(minusIn,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(r,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.distributed_db.RelationDBWorker: Set(UsedName(isInstanceOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(uc,[Default]), UsedName(==,[Default]), UsedName(apply,[Default]), UsedName(minusIn,[Default]), UsedName(q,[Default]), UsedName(r,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.distributed_db.minusIn,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(copy$default$1,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(canEqual,[Default]), UsedName(curried,[Default]), UsedName(productPrefix,[Default]), UsedName(tupled,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(copy$default$2,[Default]), UsedName(uc,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(unapply,[Default]), UsedName(scalation;distributed_db;minusIn;init;,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(apply,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(minusIn,[Default]), UsedName(wait,[Default]), UsedName(copy$default$3,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(r,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 3 classes due to The scalation.distributed_db.minusIn has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(copy$default$1,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(canEqual,[Default]), UsedName(curried,[Default]), UsedName(productPrefix,[Default]), UsedName(tupled,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(copy$default$2,[Default]), UsedName(uc,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(unapply,[Default]), UsedName(scalation;distributed_db;minusIn;init;,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(apply,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(minusIn,[Default]), UsedName(wait,[Default]), UsedName(copy$default$3,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(r,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.distributed_db.minusIn)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> by member reference: Set(scalation.distributed_db.RelationDBMaster, scalation.distributed_db.RelationDBWorker)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.StrictSimTest2...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.StrictSimTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.StrictSimTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.StrictSimTest2,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(StrictSimTest2,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.StrictSimTest2 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(StrictSimTest2,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.StrictSimTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.MDualSimTest3...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.MDualSimTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.MDualSimTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.MDualSimTest3,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(MDualSimTest3,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.MDualSimTest3 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(MDualSimTest3,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.MDualSimTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.MDualSimTest4...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.MDualSimTest4)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.MDualSimTest4)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.MDualSimTest4,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(MDualSimTest4,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.MDualSimTest4 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(MDualSimTest4,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.MDualSimTest4)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.MGraphSimWTest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.MGraphSimWTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.MGraphSimWTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.MGraphSimWTest,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(MGraphSimWTest,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.MGraphSimWTest has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(MGraphSimWTest,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.MGraphSimWTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.MGraphGen...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.MGraphGen)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.MGraphGen)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.MGraphGen,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(genGraphs$default$6,[Default]), UsedName(genPowerGraphs,[Default]), UsedName(genPowerLawGraph_PowLabels$default$6,[Default]), UsedName(genGraph$default$5,[Default]), UsedName(MGraphGen,[Default]), UsedName(hashCode,[Default]), UsedName(genGraph$default$6,[Default]), UsedName(genPowerGraphs$default$4,[Default]), UsedName(genGraphs$default$9,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(genPowerGraphs$default$2,[Default]), UsedName(genPowerLawGraph$default$7,[Default]), UsedName(genPowerGraphs$default$6,[Default]), UsedName(genRandomGraph,[Default]), UsedName(genGraphs$default$2,[Default]), UsedName(isInstanceOf,[Default]), UsedName(genPowerGraphs$default$8,[Default]), UsedName(genRandomGraph_PowLabels$default$6,[Default]), UsedName(finalize,[Default]), UsedName(extractSubgraph,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(genRandomGraph_PowLabels,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(scalation;graph_db;MGraphGen;init;,[Default]), UsedName(getClass,[Default]), UsedName(genBFSQuery$default$5,[Default]), UsedName(buildQGraph,[Default]), UsedName(genGraphs$default$7,[Default]), UsedName(genPowerLawGraph_PowLabels$default$7,[Default]), UsedName(genGraphs,[Default]), UsedName(genPowerGraphs$default$5,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(genPowerLawGraph$default$5,[Default]), UsedName(extractSubgraph$default$4,[Default]), UsedName(genGraph$default$2,[Default]), UsedName(genPowerGraphs$default$3,[Default]), UsedName(extractSubgraph$default$3,[Default]), UsedName(synchronized,[Default]), UsedName(genGraphs$default$4,[Default]), UsedName(genPowerLawGraph$default$6,[Default]), UsedName(genGraphs$default$3,[Default]), UsedName(extractSubgraph$default$5,[Default]), UsedName(toString,[Default]), UsedName(genGraphs$default$8,[Default]), UsedName(##,[Default]), UsedName(genRandomConnectedGraph,[Default]), UsedName(genRandomGraph_PowLabels$default$7,[Default]), UsedName(genPowerLawGraph_PowLabels,[Default]), UsedName(flaw,[Default]), UsedName(genRandomGraph$default$7,[Default]), UsedName(genGraph$default$4,[Default]), UsedName(wait,[Default]), UsedName(genRandomGraph$default$5,[Default]), UsedName(genGraph,[Default]), UsedName(genRandomGraph_PowLabels$default$5,[Default]), UsedName(genPowerLawGraph,[Default]), UsedName(genGraphs$default$5,[Default]), UsedName(setVariate,[Default]), UsedName(genBFSQuery$default$4,[Default]), UsedName(ne,[Default]), UsedName(genPowerLawGraph_PowLabels$default$5,[Default]), UsedName(genGraph$default$7,[Default]), UsedName(genGraph$default$3,[Default]), UsedName(genRandomGraph$default$6,[Default]), UsedName(genRandomConnectedGraph$default$6,[Default]), UsedName(genRandomConnectedGraph$default$5,[Default]), UsedName(genBFSQuery,[Default]), UsedName(genPowerGraphs$default$9,[Default]), UsedName(<init>$default$2,[Default]), UsedName(genPowerGraphs$default$7,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.MGraphGen has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(genGraphs$default$6,[Default]), UsedName(genPowerGraphs,[Default]), UsedName(genPowerLawGraph_PowLabels$default$6,[Default]), UsedName(genGraph$default$5,[Default]), UsedName(MGraphGen,[Default]), UsedName(hashCode,[Default]), UsedName(genGraph$default$6,[Default]), UsedName(genPowerGraphs$default$4,[Default]), UsedName(genGraphs$default$9,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(genPowerGraphs$default$2,[Default]), UsedName(genPowerLawGraph$default$7,[Default]), UsedName(genPowerGraphs$default$6,[Default]), UsedName(genRandomGraph,[Default]), UsedName(genGraphs$default$2,[Default]), UsedName(isInstanceOf,[Default]), UsedName(genPowerGraphs$default$8,[Default]), UsedName(genRandomGraph_PowLabels$default$6,[Default]), UsedName(finalize,[Default]), UsedName(extractSubgraph,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(genRandomGraph_PowLabels,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(scalation;graph_db;MGraphGen;init;,[Default]), UsedName(getClass,[Default]), UsedName(genBFSQuery$default$5,[Default]), UsedName(buildQGraph,[Default]), UsedName(genGraphs$default$7,[Default]), UsedName(genPowerLawGraph_PowLabels$default$7,[Default]), UsedName(genGraphs,[Default]), UsedName(genPowerGraphs$default$5,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(genPowerLawGraph$default$5,[Default]), UsedName(extractSubgraph$default$4,[Default]), UsedName(genGraph$default$2,[Default]), UsedName(genPowerGraphs$default$3,[Default]), UsedName(extractSubgraph$default$3,[Default]), UsedName(synchronized,[Default]), UsedName(genGraphs$default$4,[Default]), UsedName(genPowerLawGraph$default$6,[Default]), UsedName(genGraphs$default$3,[Default]), UsedName(extractSubgraph$default$5,[Default]), UsedName(toString,[Default]), UsedName(genGraphs$default$8,[Default]), UsedName(##,[Default]), UsedName(genRandomConnectedGraph,[Default]), UsedName(genRandomGraph_PowLabels$default$7,[Default]), UsedName(genPowerLawGraph_PowLabels,[Default]), UsedName(flaw,[Default]), UsedName(genRandomGraph$default$7,[Default]), UsedName(genGraph$default$4,[Default]), UsedName(wait,[Default]), UsedName(genRandomGraph$default$5,[Default]), UsedName(genGraph,[Default]), UsedName(genRandomGraph_PowLabels$default$5,[Default]), UsedName(genPowerLawGraph,[Default]), UsedName(genGraphs$default$5,[Default]), UsedName(setVariate,[Default]), UsedName(genBFSQuery$default$4,[Default]), UsedName(ne,[Default]), UsedName(genPowerLawGraph_PowLabels$default$5,[Default]), UsedName(genGraph$default$7,[Default]), UsedName(genGraph$default$3,[Default]), UsedName(genRandomGraph$default$6,[Default]), UsedName(genRandomConnectedGraph$default$6,[Default]), UsedName(genRandomConnectedGraph$default$5,[Default]), UsedName(genBFSQuery,[Default]), UsedName(genPowerGraphs$default$9,[Default]), UsedName(<init>$default$2,[Default]), UsedName(genPowerGraphs$default$7,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.MGraphGen)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.test.DualPattern_STest3...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.test.DualPattern_STest3)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.test.DualPattern_STest3)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.test.DualPattern_STest3,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(gLabels,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(gDegree,[Default]), UsedName(inverse,[Default]), UsedName(UNIFORM,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(qSize,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(qDegree,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(DualPattern_STest3,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.test.DualPattern_STest3 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(gLabels,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(gDegree,[Default]), UsedName(inverse,[Default]), UsedName(UNIFORM,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(qSize,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(qDegree,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(DualPattern_STest3,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.test.DualPattern_STest3)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.graph_algebra.MuDualSimTest2...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.graph_algebra.MuDualSimTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.graph_algebra.MuDualSimTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.graph_algebra.MuDualSimTest2,ModifiedNames(changes = UsedName(MuDualSimTest2,[Default]), UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(matcher,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.graph_algebra.MuDualSimTest2 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(MuDualSimTest2,[Default]), UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(matcher,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.graph_algebra.MuDualSimTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graphalytics.DualSim2CARTest3...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graphalytics.DualSim2CARTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graphalytics.DualSim2CARTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graphalytics.DualSim2CARTest3,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(qAvDegree,[Default]), UsedName(qSize,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(DualSim2CARTest3,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(gAvDegree,[Default]), UsedName(nLabels,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(gSize,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graphalytics.DualSim2CARTest3 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(qAvDegree,[Default]), UsedName(qSize,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(DualSim2CARTest3,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(gAvDegree,[Default]), UsedName(nLabels,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(gSize,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graphalytics.DualSim2CARTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graphalytics.TightSim2Test3...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graphalytics.TightSim2Test3)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graphalytics.TightSim2Test3)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graphalytics.TightSim2Test3,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(TightSim2Test3,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graphalytics.TightSim2Test3 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(TightSim2Test3,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graphalytics.TightSim2Test3)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.DualSim2Test5...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.DualSim2Test5)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.DualSim2Test5)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.DualSim2Test5,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(DualSim2Test5,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.DualSim2Test5 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(DualSim2Test5,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.DualSim2Test5)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.scala3d.package...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.scala3d.package)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.scala3d.package)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.scala3d.package,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(package,[Default]), UsedName(ne,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.scala3d.package has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(package,[Default]), UsedName(ne,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.scala3d.package)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graphalytics.Convert...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graphalytics.Convert)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graphalytics.Convert)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graphalytics.Convert,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(isInstanceOf,[Default]), UsedName(graph2Matrix$default$2,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(Convert,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(graph2Matrix,[Default]), UsedName(matrix2Graph,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.graphalytics.Convert has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(isInstanceOf,[Default]), UsedName(graph2Matrix$default$2,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(Convert,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(graph2Matrix,[Default]), UsedName(matrix2Graph,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graphalytics.Convert)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graphalytics.TestGraphContainer...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graphalytics.TestGraphContainer)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graphalytics.TestGraphContainer)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graphalytics.TestGraphContainer,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(correctIsoResult,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(TestGraphContainer,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(correctDualResult,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(testGraph,[Default]), UsedName(testQuery,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(correctSimpleResult,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.graphalytics.TestGraphContainer has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(correctIsoResult,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(TestGraphContainer,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(correctDualResult,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(testGraph,[Default]), UsedName(testQuery,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(correctSimpleResult,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graphalytics.TestGraphContainer)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.analytics.package...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.analytics.package)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.analytics.package)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.analytics.package,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(package,[Default]), UsedName(ne,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.analytics.package has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(package,[Default]), UsedName(ne,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.analytics.package)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.distributed_db.selectIn...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.distributed_db.selectIn)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.distributed_db.selectIn)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.distributed_db.RelationDBMaster: Set(UsedName(isInstanceOf,[Default]), UsedName(name,[Default]), UsedName(asInstanceOf,[Default]), UsedName(==,[Default]), UsedName(apply,[Default]), UsedName(ne,[Default]), UsedName(selectIn,[Default]), UsedName(p,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.distributed_db.RelationDBWorker: Set(UsedName(isInstanceOf,[Default]), UsedName(name,[Default]), UsedName(asInstanceOf,[Default]), UsedName(uc,[Default]), UsedName(==,[Default]), UsedName(apply,[Default]), UsedName(selectIn,[Default]), UsedName(p,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.distributed_db.selectIn,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(copy$default$1,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(canEqual,[Default]), UsedName(productPrefix,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(name,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(copy$default$2,[Default]), UsedName(uc,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(unapply,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(apply,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(scalation;distributed_db;selectIn;init;,[Default]), UsedName(copy$default$3,[Default]), UsedName(ne,[Default]), UsedName(selectIn,[Default]), UsedName(productIterator,[Default]), UsedName(p,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 3 classes due to The scalation.distributed_db.selectIn has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(copy$default$1,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(canEqual,[Default]), UsedName(productPrefix,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(name,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(copy$default$2,[Default]), UsedName(uc,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(unapply,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(apply,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(scalation;distributed_db;selectIn;init;,[Default]), UsedName(copy$default$3,[Default]), UsedName(ne,[Default]), UsedName(selectIn,[Default]), UsedName(productIterator,[Default]), UsedName(p,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.distributed_db.selectIn)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> by member reference: Set(scalation.distributed_db.RelationDBMaster, scalation.distributed_db.RelationDBWorker)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.image.KL_Tracker...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.image.KL_Tracker)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.image.KL_Tracker)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.image.KL_Tracker,ModifiedNames(changes = UsedName(outside,[Default]), UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName(err,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(KL_Tracker,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(limit,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(optimize,[Default]), UsedName(flaw,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(makeInt,[Default]), UsedName(scalation;image;KL_Tracker;init;,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.image.KL_Tracker has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(outside,[Default]), UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName(err,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(KL_Tracker,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(limit,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(optimize,[Default]), UsedName(flaw,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(makeInt,[Default]), UsedName(scalation;image;KL_Tracker;init;,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.image.KL_Tracker)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graphalytics.Cycle...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graphalytics.Cycle)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graphalytics.Cycle)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graphalytics.Cycle,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(Cycle,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(hasCycle,[Default]), UsedName(ne,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.graphalytics.Cycle has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(Cycle,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(hasCycle,[Default]), UsedName(ne,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graphalytics.Cycle)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.columnar_db.RelationSQLTest3...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.columnar_db.RelationSQLTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.columnar_db.RelationSQLTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.columnar_db.RelationSQLTest3,ModifiedNames(changes = UsedName(RelationSQLTest3,[Default]), UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.columnar_db.RelationSQLTest3 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(RelationSQLTest3,[Default]), UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.columnar_db.RelationSQLTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graphalytics.TightSim...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graphalytics.TightSim)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graphalytics.TightSim)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graphalytics.TightSim,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(test$default$2,[Default]), UsedName(calculateTotalEdges,[Default]), UsedName(overlaps,[Default]), UsedName(TightSim,[Default]), UsedName(hashCode,[Default]), UsedName(selectivityCriteria,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(calculateBallDiameterMetrics,[Default]), UsedName(isInstanceOf,[Default]), UsedName(bijections,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(disjoint,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(qRange,[Default]), UsedName(scalation;graphalytics;TightSim;init;,[Default]), UsedName(notifyAll,[Default]), UsedName(SELF_LOOPS,[Default]), UsedName(getClass,[Default]), UsedName(LIMIT,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(feasibleMates,[Default]), UsedName(calculateTotalVertices,[Default]), UsedName(CHECK,[Default]), UsedName(mappings2,[Default]), UsedName(synchronized,[Default]), UsedName(dualFilter,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(test,[Default]), UsedName(showMappings,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(filterGraph,[Default]), UsedName(prune,[Default]), UsedName(mappings,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.graphalytics.TightSim has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(test$default$2,[Default]), UsedName(calculateTotalEdges,[Default]), UsedName(overlaps,[Default]), UsedName(TightSim,[Default]), UsedName(hashCode,[Default]), UsedName(selectivityCriteria,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(calculateBallDiameterMetrics,[Default]), UsedName(isInstanceOf,[Default]), UsedName(bijections,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(disjoint,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(qRange,[Default]), UsedName(scalation;graphalytics;TightSim;init;,[Default]), UsedName(notifyAll,[Default]), UsedName(SELF_LOOPS,[Default]), UsedName(getClass,[Default]), UsedName(LIMIT,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(feasibleMates,[Default]), UsedName(calculateTotalVertices,[Default]), UsedName(CHECK,[Default]), UsedName(mappings2,[Default]), UsedName(synchronized,[Default]), UsedName(dualFilter,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(test,[Default]), UsedName(showMappings,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(filterGraph,[Default]), UsedName(prune,[Default]), UsedName(mappings,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graphalytics.TightSim)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.MGraphSim2Test3...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.MGraphSim2Test3)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.MGraphSim2Test3)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.MGraphSim2Test3,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(MGraphSim2Test3,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.MGraphSim2Test3 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(MGraphSim2Test3,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.MGraphSim2Test3)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.columnar_db.RelationFTest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.columnar_db.RelationFTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.columnar_db.RelationFTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.columnar_db.RelationFTest,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(plus,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(professor,[Default]), UsedName(RelationFTest,[Default]), UsedName(professorR,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.columnar_db.RelationFTest has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(plus,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(professor,[Default]), UsedName(RelationFTest,[Default]), UsedName(professorR,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.columnar_db.RelationFTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.graph_algebra.MuGraphGenTest3...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.graph_algebra.MuGraphGenTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.graph_algebra.MuGraphGenTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.graph_algebra.MuGraphGenTest3,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(MuGraphGenTest3,[Default]), UsedName(avDegree,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(mgGen,[Default]), UsedName(g,[Default]), UsedName(nLabels,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(nVertices,[Default]), UsedName(eLabels,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.graph_algebra.MuGraphGenTest3 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(MuGraphGenTest3,[Default]), UsedName(avDegree,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(mgGen,[Default]), UsedName(g,[Default]), UsedName(nLabels,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(nVertices,[Default]), UsedName(eLabels,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.graph_algebra.MuGraphGenTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.MinSpanningTree.NodeOrder2...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.MinSpanningTree.NodeOrder2)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.MinSpanningTree.NodeOrder2)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.MinSpanningTree.NodeOrder2,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(Ops,[Default]), UsedName(NodeOrder2,[Default]), UsedName(hashCode,[Default]), UsedName(lteq,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(on,[Default]), UsedName(isInstanceOf,[Default]), UsedName(max,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(compare,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(reversed,[Default]), UsedName(getClass,[Default]), UsedName(tryCompare,[Default]), UsedName(gt,[Default]), UsedName(reverse,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(equiv,[Default]), UsedName(gteq,[Default]), UsedName(synchronized,[Default]), UsedName(thenComparingInt,[Default]), UsedName(toString,[Default]), UsedName(mkOrderingOps,[Implicit]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(thenComparing,[Default]), UsedName(lt,[Default]), UsedName(min,[Default]), UsedName(thenComparingLong,[Default]), UsedName(thenComparingDouble,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.MinSpanningTree.NodeOrder2 has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(mkOrderingOps,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.MinSpanningTree.NodeOrder2)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graphalytics.StrictSimTest3...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graphalytics.StrictSimTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graphalytics.StrictSimTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graphalytics.StrictSimTest3,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(StrictSimTest3,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graphalytics.StrictSimTest3 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(StrictSimTest3,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graphalytics.StrictSimTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.SSShortestPath...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.SSShortestPath)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.SSShortestPath)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.SSShortestPath,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName(SSShortestPath,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(apply$default$3,[Default]), UsedName(isInstanceOf,[Default]), UsedName(scalation;graph_db;SSShortestPath;init;,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(apply$default$4,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(apply,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(Item,[Default]), UsedName(spath,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.graph_db.SSShortestPath has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName(SSShortestPath,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(apply$default$3,[Default]), UsedName(isInstanceOf,[Default]), UsedName(scalation;graph_db;SSShortestPath;init;,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(apply$default$4,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(apply,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(Item,[Default]), UsedName(spath,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.SSShortestPath)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.columnar_db.MissingValuesTest4...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.columnar_db.MissingValuesTest4)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.columnar_db.MissingValuesTest4)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.columnar_db.MissingValuesTest4,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(MissingValuesTest4,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.columnar_db.MissingValuesTest4 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(MissingValuesTest4,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.columnar_db.MissingValuesTest4)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.dist_db.relReply...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.dist_db.relReply)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.dist_db.relReply)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.dist_db.RelDBMaster: Set(UsedName(isInstanceOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(==,[Default]), UsedName(apply,[Default]), UsedName(id,[Default]), UsedName(ne,[Default]), UsedName(r,[Default]), UsedName(relReply,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.dist_db.RelDBWorker: Set(UsedName(isInstanceOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(==,[Default]), UsedName(apply,[Default]), UsedName(r,[Default]), UsedName(relReply,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.dist_db.relReply,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(copy$default$1,[Default]), UsedName(scalation;dist_db;relReply;init;,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(canEqual,[Default]), UsedName(curried,[Default]), UsedName(productPrefix,[Default]), UsedName(tupled,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(copy$default$2,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(unapply,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(apply,[Default]), UsedName(id,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(r,[Default]), UsedName(relReply,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 3 classes due to The scalation.dist_db.relReply has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(copy$default$1,[Default]), UsedName(scalation;dist_db;relReply;init;,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(canEqual,[Default]), UsedName(curried,[Default]), UsedName(productPrefix,[Default]), UsedName(tupled,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(copy$default$2,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(unapply,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(apply,[Default]), UsedName(id,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(r,[Default]), UsedName(relReply,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.dist_db.relReply)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> by member reference: Set(scalation.dist_db.RelDBMaster, scalation.dist_db.RelDBWorker)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.MGraphSimWTest2...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.MGraphSimWTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.MGraphSimWTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.MGraphSimWTest2,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(MGraphSimWTest2,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.MGraphSimWTest2 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(MGraphSimWTest2,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.MGraphSimWTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graphalytics.GraphSim2Test2...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graphalytics.GraphSim2Test2)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graphalytics.GraphSim2Test2)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graphalytics.GraphSim2Test2,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(GraphSim2Test2,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graphalytics.GraphSim2Test2 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(GraphSim2Test2,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graphalytics.GraphSim2Test2)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.StrictSimTest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.StrictSimTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.StrictSimTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.StrictSimTest,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(StrictSimTest,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.StrictSimTest has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(StrictSimTest,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.StrictSimTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.DualSim2Test...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.DualSim2Test)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.DualSim2Test)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.DualSim2Test,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(DualSim2Test,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.DualSim2Test has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(DualSim2Test,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.DualSim2Test)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.image.ImageCV...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.image.ImageCV)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.image.ImageCV)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.image.ImageCV,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(subAbs,[Default]), UsedName(hashCode,[Default]), UsedName(getRgbMatrix,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(deNoising,[Default]), UsedName(scalation;image;ImageCV;init;,[Default]), UsedName(smoothingMedian,[Default]), UsedName(width,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(toBuffImage,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getRed,[Default]), UsedName(!=,[Default]), UsedName(getGreen,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(reset,[Default]), UsedName(toBW,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(deNoise,[Default]), UsedName(toGray,[Default]), UsedName(similarity,[Default]), UsedName(toFile,[Default]), UsedName(synchronized,[Default]), UsedName(displayImage,[Default]), UsedName(countNonZeros,[Default]), UsedName(toString,[Default]), UsedName(height,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(laplaceFilter,[Default]), UsedName(ImageCV,[Default]), UsedName(ne,[Default]), UsedName(smoothingMean,[Default]), UsedName(getAlpha,[Default]), UsedName(getBlue,[Default]), UsedName(toMatrix,[Default]), UsedName(eq,[Default]), UsedName(getBuffImage,[Default]))) invalidates 1 classes due to The scalation.image.ImageCV has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(subAbs,[Default]), UsedName(hashCode,[Default]), UsedName(getRgbMatrix,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(deNoising,[Default]), UsedName(scalation;image;ImageCV;init;,[Default]), UsedName(smoothingMedian,[Default]), UsedName(width,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(toBuffImage,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getRed,[Default]), UsedName(!=,[Default]), UsedName(getGreen,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(reset,[Default]), UsedName(toBW,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(deNoise,[Default]), UsedName(toGray,[Default]), UsedName(similarity,[Default]), UsedName(toFile,[Default]), UsedName(synchronized,[Default]), UsedName(displayImage,[Default]), UsedName(countNonZeros,[Default]), UsedName(toString,[Default]), UsedName(height,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(laplaceFilter,[Default]), UsedName(ImageCV,[Default]), UsedName(ne,[Default]), UsedName(smoothingMean,[Default]), UsedName(getAlpha,[Default]), UsedName(getBlue,[Default]), UsedName(toMatrix,[Default]), UsedName(eq,[Default]), UsedName(getBuffImage,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.image.ImageCV)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graphalytics.GraphGenTest3...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graphalytics.GraphGenTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graphalytics.GraphGenTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graphalytics.GraphGenTest3,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(GraphGenTest3,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graphalytics.GraphGenTest3 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(GraphGenTest3,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graphalytics.GraphGenTest3)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graphalytics.CycleTest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graphalytics.CycleTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graphalytics.CycleTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graphalytics.CycleTest,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(pg2,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(CycleTest,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(pg1,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graphalytics.CycleTest has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(pg2,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(CycleTest,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(pg1,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graphalytics.CycleTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graphalytics.DualSim2CARTest2...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graphalytics.DualSim2CARTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graphalytics.DualSim2CARTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graphalytics.DualSim2CARTest2,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(DualSim2CARTest2,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(q2,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(g2,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graphalytics.DualSim2CARTest2 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(DualSim2CARTest2,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(q2,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(g2,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graphalytics.DualSim2CARTest2)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.distributed_db.project...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.distributed_db.project)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.distributed_db.project)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.distributed_db.RelationDBMasterTest: Set(UsedName(apply,[Default]), UsedName(project,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.distributed_db.RelationDBMaster: Set(UsedName(cNames,[Default]), UsedName(isInstanceOf,[Default]), UsedName(name,[Default]), UsedName(asInstanceOf,[Default]), UsedName(==,[Default]), UsedName(apply,[Default]), UsedName(ne,[Default]), UsedName(project,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.distributed_db.project,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(copy$default$1,[Default]), UsedName(hashCode,[Default]), UsedName(cNames,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(canEqual,[Default]), UsedName(curried,[Default]), UsedName(productPrefix,[Default]), UsedName(tupled,[Default]), UsedName(scalation;distributed_db;project;init;,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(name,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(copy$default$2,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(unapply,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(apply,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(project,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 3 classes due to The scalation.distributed_db.project has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(copy$default$1,[Default]), UsedName(hashCode,[Default]), UsedName(cNames,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(canEqual,[Default]), UsedName(curried,[Default]), UsedName(productPrefix,[Default]), UsedName(tupled,[Default]), UsedName(scalation;distributed_db;project;init;,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(name,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(copy$default$2,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(unapply,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(apply,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(project,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.distributed_db.project)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> by member reference: Set(scalation.distributed_db.RelationDBMasterTest, scalation.distributed_db.RelationDBMaster)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.DualSim2CARTest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.DualSim2CARTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.DualSim2CARTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.DualSim2CARTest,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(DualSim2CARTest,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(g1,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(q1,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.DualSim2CARTest has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(DualSim2CARTest,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(g1,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(q1,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.DualSim2CARTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.test.TightPattern_DTest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.test.TightPattern_DTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.test.TightPattern_DTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.test.TightPattern_DTest,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(q2,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(q3,[Default]), UsedName(synchronized,[Default]), UsedName(g2,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(TightPattern_DTest,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(g3,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.test.TightPattern_DTest has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(q2,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(q3,[Default]), UsedName(synchronized,[Default]), UsedName(g2,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(TightPattern_DTest,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(g3,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.test.TightPattern_DTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.MinSpanningTreeTest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.MinSpanningTreeTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.MinSpanningTreeTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.MinSpanningTreeTest,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(st,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(MinSpanningTreeTest,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.MinSpanningTreeTest has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName(st,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(MinSpanningTreeTest,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.MinSpanningTreeTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.spatial.Vector2D...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.spatial.Vector2D)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.spatial.Vector2D)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.spatial.Vector2D,ModifiedNames(changes = UsedName(exists,[Default]), UsedName(filterMissing,[Default]), UsedName(recip,[Default]), UsedName(oneAt,[Default]), UsedName(equals,[Default]), UsedName(++:,[Default]), UsedName(repr,[Default]), UsedName(one$default$1,[Default]), UsedName(argmaxPos,[Default]), UsedName(lastOption,[Default]), UsedName(WithFilter,[Default]), UsedName(range,[Default]), UsedName(init,[Default]), UsedName(firstPos,[Default]), UsedName(fold,[Default]), UsedName(sliceWithKnownBound,[Default]), UsedName(hashCode,[Default]), UsedName(find,[Default]), UsedName(reduceOption,[Default]), UsedName(last,[Default]), UsedName(cumulate,[Default]), UsedName(containsAny,[Default]), UsedName(toTraversable,[Default]), UsedName(sq,[Default]), UsedName(min$default$1,[Default]), UsedName(headOption,[Default]), UsedName($isInstanceOf,[Default]), UsedName(firstNeg$default$1,[Default]), UsedName(argminNeg$default$1,[Default]), UsedName(aggregate,[Default]), UsedName(clone,[Default]), UsedName(:\,[Default]), UsedName(selectEx,[Default]), UsedName(sort,[Default]), UsedName(countZero,[Default]), UsedName(isTraversableAgain,[Default]), UsedName(intersect,[Default]), UsedName(max$default$1,[Default]), UsedName(firstPos$default$1,[Default]), UsedName(sort2,[Default]), UsedName(fString,[Default]), UsedName(distinct,[Default]), UsedName(_oneAt$default$2,[Default]), UsedName(reduceLeftOption,[Default]), UsedName(-,[Default]), UsedName(groupBy,[Default]), UsedName(parCombiner,[Default]), UsedName(isInstanceOf,[Default]), UsedName(unzip,[Default]), UsedName(inits,[Default]), UsedName(indexOf,[Default]), UsedName(max,[Default]), UsedName(tryCompareTo,[Default]), UsedName(mean,[Default]), UsedName(finalize,[Default]), UsedName(hasDefiniteSize,[Default]), UsedName(*=,[Default]), UsedName(≤,[Default]), UsedName(nonEmpty,[Default]), UsedName(take,[Default]), UsedName(<=,[Default]), UsedName(asInstanceOf,[Default]), UsedName(>,[Default]), UsedName(toIndexedSeq,[Default]), UsedName(update,[Default]), UsedName(toList,[Default]), UsedName(map,[Default]), UsedName(v,[Default]), UsedName($asInstanceOf,[Default]), UsedName(pvariance,[Default]), UsedName(span,[Default]), UsedName(minBy,[Default]), UsedName(toCollection,[Default]), UsedName(*,[Default]), UsedName(toLong,[Default]), UsedName(++,[Default]), UsedName(transpose,[Default]), UsedName(sliceWithKnownDelta,[Default]), UsedName(unary_-,[Default]), UsedName(swap,[Default]), UsedName(toDouble,[Default]), UsedName(reduceRightOption,[Default]), UsedName(mag,[Default]), UsedName(filter,[Default]), UsedName(!=,[Default]), UsedName(zero,[Default]), UsedName(zero$default$1,[Default]), UsedName(copyToArray,[Default]), UsedName(isSorted,[Default]), UsedName(/:,[Default]), UsedName(+,[Default]), UsedName(≠,[Default]), UsedName(notifyAll,[Default]), UsedName(dim,[Default]), UsedName(normalize1,[Default]), UsedName(reversed,[Default]), UsedName(getClass,[Default]), UsedName(select,[Default]), UsedName(drop,[Default]), UsedName(filterNot,[Default]), UsedName(expand,[Default]), UsedName(stringPrefix,[Default]), UsedName(product,[Default]), UsedName(dot,[Default]), UsedName(contains,[Default]), UsedName(toVector,[Default]), UsedName(copy,[Default]), UsedName(argmaxPos$default$1,[Default]), UsedName(reduceLeft,[Default]), UsedName(scan,[Default]), UsedName(maxBy,[Default]), UsedName(reduceRight,[Default]), UsedName(count,[Default]), UsedName(clean$default$1,[Default]), UsedName(_oneAt,[Default]), UsedName(reverse,[Default]), UsedName(setFormat,[Default]), UsedName(toDense,[Default]), UsedName(∙,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(collectFirst,[Default]), UsedName(≥,[Default]), UsedName(foldLeft,[Default]), UsedName(countPos,[Default]), UsedName(argminNeg,[Default]), UsedName(y,[Default]), UsedName(toIterator,[Default]), UsedName(filterImpl,[Default]), UsedName(scalation;spatial;Vector2D;init;,[Default]), UsedName(toIterable,[Default]), UsedName(toInt,[Default]), UsedName(clean$default$2,[Default]), UsedName(seq,[Default]), UsedName(filterPos2,[Default]), UsedName(apply,[Default]), UsedName(<init>$default$1,[Default]), UsedName(foreach,[Default]), UsedName(par,[Default]), UsedName(<,[Default]), UsedName(reduce,[Default]), UsedName(synchronized,[Default]), UsedName(genericBuilder,[Default]), UsedName(~^,[Default]), UsedName(takeWhile,[Default]), UsedName(oneAt$default$2,[Default]), UsedName(tail,[Default]), UsedName(Vector2D,[Default]), UsedName(to,[Default]), UsedName(set,[Default]), UsedName(Self,[Default]), UsedName(toString,[Default]), UsedName(normalize,[Default]), UsedName(/,[Default]), UsedName(toSeq,[Default]), UsedName(mkString,[Default]), UsedName(##,[Default]), UsedName(slice$default$2,[Default]), UsedName(view,[Default]), UsedName(-=,[Default]), UsedName(flaw,[Default]), UsedName(normSq,[Default]), UsedName(countNeg,[Default]), UsedName(size,[Default]), UsedName(one,[Default]), UsedName(flatMap,[Default]), UsedName(sumNE,[Default]), UsedName(fromLatLong,[Default]), UsedName(dropWhile,[Default]), UsedName(wait,[Default]), UsedName(countinct,[Default]), UsedName(copyToBuffer,[Default]), UsedName(unzip3,[Default]), UsedName(toSet,[Default]), UsedName(rank,[Default]), UsedName(/=,[Default]), UsedName(scanLeft,[Default]), UsedName(newBuilder,[Default]), UsedName(normalizeU,[Default]), UsedName(indices,[Default]), UsedName(argmin$default$1,[Default]), UsedName(ne,[Default]), UsedName(toBuffer,[Default]), UsedName(sum,[Default]), UsedName(argmax,[Default]), UsedName(firstNeg,[Default]), UsedName(toMap,[Default]), UsedName(toArray,[Default]), UsedName(~^=,[Default]), UsedName(min,[Default]), UsedName(+=,[Default]), UsedName(addString,[Default]), UsedName(norm1,[Default]), UsedName(withFilter,[Default]), UsedName(argmax$default$1,[Default]), UsedName(scanRight,[Default]), UsedName(thisCollection,[Default]), UsedName(clean,[Default]), UsedName(indexWhere,[Default]), UsedName(sameDimensions,[Default]), UsedName(>=,[Default]), UsedName(filterPos,[Default]), UsedName(argmin,[Default]), UsedName(toStream,[Default]), UsedName(norm,[Default]), UsedName(indexOf$default$2,[Default]), UsedName(variance,[Default]), UsedName(sliceEx,[Default]), UsedName(abs,[Default]), UsedName(head,[Default]), UsedName(x,[Default]), UsedName(slice,[Default]), UsedName(collect,[Default]), UsedName(tails,[Default]), UsedName(split,[Default]), UsedName(companion,[Default]), UsedName(isEmpty,[Default]), UsedName(sizeHintIfCheap,[Default]), UsedName(splitAt,[Default]), UsedName(forall,[Default]), UsedName(nd,[Default]), UsedName(foldRight,[Default]), UsedName(sumPos,[Default]), UsedName(partition,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]), UsedName(isNonnegative,[Default]), UsedName(flatten,[Default]), UsedName(expand$default$1,[Default]))) invalidates 1 classes due to The scalation.spatial.Vector2D has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(exists,[Default]), UsedName(filterMissing,[Default]), UsedName(recip,[Default]), UsedName(oneAt,[Default]), UsedName(equals,[Default]), UsedName(++:,[Default]), UsedName(repr,[Default]), UsedName(one$default$1,[Default]), UsedName(argmaxPos,[Default]), UsedName(lastOption,[Default]), UsedName(WithFilter,[Default]), UsedName(range,[Default]), UsedName(init,[Default]), UsedName(firstPos,[Default]), UsedName(fold,[Default]), UsedName(sliceWithKnownBound,[Default]), UsedName(hashCode,[Default]), UsedName(find,[Default]), UsedName(reduceOption,[Default]), UsedName(last,[Default]), UsedName(cumulate,[Default]), UsedName(containsAny,[Default]), UsedName(toTraversable,[Default]), UsedName(sq,[Default]), UsedName(min$default$1,[Default]), UsedName(headOption,[Default]), UsedName($isInstanceOf,[Default]), UsedName(firstNeg$default$1,[Default]), UsedName(argminNeg$default$1,[Default]), UsedName(aggregate,[Default]), UsedName(clone,[Default]), UsedName(:\,[Default]), UsedName(selectEx,[Default]), UsedName(sort,[Default]), UsedName(countZero,[Default]), UsedName(isTraversableAgain,[Default]), UsedName(intersect,[Default]), UsedName(max$default$1,[Default]), UsedName(firstPos$default$1,[Default]), UsedName(sort2,[Default]), UsedName(fString,[Default]), UsedName(distinct,[Default]), UsedName(_oneAt$default$2,[Default]), UsedName(reduceLeftOption,[Default]), UsedName(-,[Default]), UsedName(groupBy,[Default]), UsedName(parCombiner,[Default]), UsedName(isInstanceOf,[Default]), UsedName(unzip,[Default]), UsedName(inits,[Default]), UsedName(indexOf,[Default]), UsedName(max,[Default]), UsedName(tryCompareTo,[Default]), UsedName(mean,[Default]), UsedName(finalize,[Default]), UsedName(hasDefiniteSize,[Default]), UsedName(*=,[Default]), UsedName(≤,[Default]), UsedName(nonEmpty,[Default]), UsedName(take,[Default]), UsedName(<=,[Default]), UsedName(asInstanceOf,[Default]), UsedName(>,[Default]), UsedName(toIndexedSeq,[Default]), UsedName(update,[Default]), UsedName(toList,[Default]), UsedName(map,[Default]), UsedName(v,[Default]), UsedName($asInstanceOf,[Default]), UsedName(pvariance,[Default]), UsedName(span,[Default]), UsedName(minBy,[Default]), UsedName(toCollection,[Default]), UsedName(*,[Default]), UsedName(toLong,[Default]), UsedName(++,[Default]), UsedName(transpose,[Default]), UsedName(sliceWithKnownDelta,[Default]), UsedName(unary_-,[Default]), UsedName(swap,[Default]), UsedName(toDouble,[Default]), UsedName(reduceRightOption,[Default]), UsedName(mag,[Default]), UsedName(filter,[Default]), UsedName(!=,[Default]), UsedName(zero,[Default]), UsedName(zero$default$1,[Default]), UsedName(copyToArray,[Default]), UsedName(isSorted,[Default]), UsedName(/:,[Default]), UsedName(+,[Default]), UsedName(≠,[Default]), UsedName(notifyAll,[Default]), UsedName(dim,[Default]), UsedName(normalize1,[Default]), UsedName(reversed,[Default]), UsedName(getClass,[Default]), UsedName(select,[Default]), UsedName(drop,[Default]), UsedName(filterNot,[Default]), UsedName(expand,[Default]), UsedName(stringPrefix,[Default]), UsedName(product,[Default]), UsedName(dot,[Default]), UsedName(contains,[Default]), UsedName(toVector,[Default]), UsedName(copy,[Default]), UsedName(argmaxPos$default$1,[Default]), UsedName(reduceLeft,[Default]), UsedName(scan,[Default]), UsedName(maxBy,[Default]), UsedName(reduceRight,[Default]), UsedName(count,[Default]), UsedName(clean$default$1,[Default]), UsedName(_oneAt,[Default]), UsedName(reverse,[Default]), UsedName(setFormat,[Default]), UsedName(toDense,[Default]), UsedName(∙,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(collectFirst,[Default]), UsedName(≥,[Default]), UsedName(foldLeft,[Default]), UsedName(countPos,[Default]), UsedName(argminNeg,[Default]), UsedName(y,[Default]), UsedName(toIterator,[Default]), UsedName(filterImpl,[Default]), UsedName(scalation;spatial;Vector2D;init;,[Default]), UsedName(toIterable,[Default]), UsedName(toInt,[Default]), UsedName(clean$default$2,[Default]), UsedName(seq,[Default]), UsedName(filterPos2,[Default]), UsedName(apply,[Default]), UsedName(<init>$default$1,[Default]), UsedName(foreach,[Default]), UsedName(par,[Default]), UsedName(<,[Default]), UsedName(reduce,[Default]), UsedName(synchronized,[Default]), UsedName(genericBuilder,[Default]), UsedName(~^,[Default]), UsedName(takeWhile,[Default]), UsedName(oneAt$default$2,[Default]), UsedName(tail,[Default]), UsedName(Vector2D,[Default]), UsedName(to,[Default]), UsedName(set,[Default]), UsedName(Self,[Default]), UsedName(toString,[Default]), UsedName(normalize,[Default]), UsedName(/,[Default]), UsedName(toSeq,[Default]), UsedName(mkString,[Default]), UsedName(##,[Default]), UsedName(slice$default$2,[Default]), UsedName(view,[Default]), UsedName(-=,[Default]), UsedName(flaw,[Default]), UsedName(normSq,[Default]), UsedName(countNeg,[Default]), UsedName(size,[Default]), UsedName(one,[Default]), UsedName(flatMap,[Default]), UsedName(sumNE,[Default]), UsedName(fromLatLong,[Default]), UsedName(dropWhile,[Default]), UsedName(wait,[Default]), UsedName(countinct,[Default]), UsedName(copyToBuffer,[Default]), UsedName(unzip3,[Default]), UsedName(toSet,[Default]), UsedName(rank,[Default]), UsedName(/=,[Default]), UsedName(scanLeft,[Default]), UsedName(newBuilder,[Default]), UsedName(normalizeU,[Default]), UsedName(indices,[Default]), UsedName(argmin$default$1,[Default]), UsedName(ne,[Default]), UsedName(toBuffer,[Default]), UsedName(sum,[Default]), UsedName(argmax,[Default]), UsedName(firstNeg,[Default]), UsedName(toMap,[Default]), UsedName(toArray,[Default]), UsedName(~^=,[Default]), UsedName(min,[Default]), UsedName(+=,[Default]), UsedName(addString,[Default]), UsedName(norm1,[Default]), UsedName(withFilter,[Default]), UsedName(argmax$default$1,[Default]), UsedName(scanRight,[Default]), UsedName(thisCollection,[Default]), UsedName(clean,[Default]), UsedName(indexWhere,[Default]), UsedName(sameDimensions,[Default]), UsedName(>=,[Default]), UsedName(filterPos,[Default]), UsedName(argmin,[Default]), UsedName(toStream,[Default]), UsedName(norm,[Default]), UsedName(indexOf$default$2,[Default]), UsedName(variance,[Default]), UsedName(sliceEx,[Default]), UsedName(abs,[Default]), UsedName(head,[Default]), UsedName(x,[Default]), UsedName(slice,[Default]), UsedName(collect,[Default]), UsedName(tails,[Default]), UsedName(split,[Default]), UsedName(companion,[Default]), UsedName(isEmpty,[Default]), UsedName(sizeHintIfCheap,[Default]), UsedName(splitAt,[Default]), UsedName(forall,[Default]), UsedName(nd,[Default]), UsedName(foldRight,[Default]), UsedName(sumPos,[Default]), UsedName(partition,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]), UsedName(isNonnegative,[Default]), UsedName(flatten,[Default]), UsedName(expand$default$1,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.spatial.Vector2D)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.DualSimTest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.DualSimTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.DualSimTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.DualSimTest,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(DualSimTest,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.DualSimTest has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(DualSimTest,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.DualSimTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.columnar_db.TableGen...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.columnar_db.TableGen)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.columnar_db.TableGen)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.dist_db.RelDBMasterTest2: Set(UsedName(popTable,[Default]), UsedName(TableGen,[Default]), UsedName(popTable$default$3,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.dist_db.RelDBMasterTest4: Set(UsedName(popTable,[Default]), UsedName(TableGen,[Default]), UsedName(popTable$default$3,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.dist_db.RelDBMaster: Set(UsedName(popTable,[Default]), UsedName(isInstanceOf,[Default]), UsedName(TableGen,[Default]), UsedName(asInstanceOf,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(popTable$default$3,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.dist_db.RelDBWorker: Set(UsedName(popTable,[Default]), UsedName(isInstanceOf,[Default]), UsedName(TableGen,[Default]), UsedName(asInstanceOf,[Default]), UsedName(==,[Default]), UsedName(popTable$default$3,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.columnar_db.TableGen,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName(find,[Default]), UsedName(popTable,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(isInstanceOf,[Default]), UsedName(TableGen,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(flaw,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(popTable$default$3,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 5 classes due to The scalation.columnar_db.TableGen has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(hashCode,[Default]), UsedName(find,[Default]), UsedName(popTable,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(isInstanceOf,[Default]), UsedName(TableGen,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(flaw,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(popTable$default$3,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.columnar_db.TableGen)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> by member reference: Set(scalation.dist_db.RelDBMasterTest2, scalation.dist_db.RelDBMasterTest4, scalation.dist_db.RelDBMaster, scalation.dist_db.RelDBWorker)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.Partition...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.Partition)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.Partition)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.Partition,ModifiedNames(changes = UsedName(group_ran,[Default]), UsedName(equals,[Default]), UsedName(formGraphs,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(group_ord,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(group_lp,[Default]), UsedName(scalation;graph_db;Partition;init;,[Default]), UsedName(Partition,[Default]), UsedName(partition,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The scalation.graph_db.Partition has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(group_ran,[Default]), UsedName(equals,[Default]), UsedName(formGraphs,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(group_ord,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(group_lp,[Default]), UsedName(scalation;graph_db;Partition;init;,[Default]), UsedName(Partition,[Default]), UsedName(partition,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.Partition)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graphalytics.GraphMetricsTest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graphalytics.GraphMetricsTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graphalytics.GraphMetricsTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graphalytics.GraphMetricsTest,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(dia,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(ctr,[Default]), UsedName(!=,[Default]), UsedName(GraphMetricsTest,[Default]), UsedName(notifyAll,[Default]), UsedName(bfs,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(rd,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graphalytics.GraphMetricsTest has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(dia,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(ctr,[Default]), UsedName(!=,[Default]), UsedName(GraphMetricsTest,[Default]), UsedName(notifyAll,[Default]), UsedName(bfs,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(rd,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graphalytics.GraphMetricsTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.TightSimTest5...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.TightSimTest5)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.TightSimTest5)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.TightSimTest5,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(TightSimTest5,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.TightSimTest5 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(TightSimTest5,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.TightSimTest5)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graphalytics.IsomorphismChecker...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graphalytics.IsomorphismChecker)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graphalytics.IsomorphismChecker)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graphalytics.IsomorphismChecker,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(IsomorphismChecker,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(checkEdges,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(checkIsomorphisms,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(checkLabels,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graphalytics.IsomorphismChecker has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(IsomorphismChecker,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(checkEdges,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(checkIsomorphisms,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(checkLabels,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graphalytics.IsomorphismChecker)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.graph_db.pattern_matching.MDualSim2Test6...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.graph_db.pattern_matching.MDualSim2Test6)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.graph_db.pattern_matching.MDualSim2Test6)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.graph_db.pattern_matching.MDualSim2Test6,ModifiedNames(changes = UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(MDualSim2Test6,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 1 classes due to The scalation.graph_db.pattern_matching.MDualSim2Test6 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(equals,[Default]), UsedName(args,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(getClass,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(g,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(q,[Default]), UsedName(ne,[Default]), UsedName(MDualSim2Test6,[Default]), UsedName(delayedInit,[Default]), UsedName(executionStart,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.graph_db.pattern_matching.MDualSim2Test6)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from scalation.dist_db.relReply2...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(scalation.dist_db.relReply2)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(scalation.dist_db.relReply2)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.dist_db.RelDBMaster: Set(UsedName(isInstanceOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(rName,[Default]), UsedName(==,[Default]), UsedName(apply,[Default]), UsedName(id,[Default]), UsedName(ne,[Default]), UsedName(r,[Default]), UsedName(relReply2,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of scalation.dist_db.RelDBWorker: Set(UsedName(isInstanceOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(rName,[Default]), UsedName(==,[Default]), UsedName(apply,[Default]), UsedName(r,[Default]), UsedName(relReply2,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(scalation.dist_db.relReply2,ModifiedNames(changes = UsedName(scalation;dist_db;relReply2;init;,[Default]), UsedName(equals,[Default]), UsedName(copy$default$1,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(canEqual,[Default]), UsedName(curried,[Default]), UsedName(productPrefix,[Default]), UsedName(tupled,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(copy$default$2,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(rName,[Default]), UsedName(getClass,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(unapply,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(apply,[Default]), UsedName(id,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(copy$default$3,[Default]), UsedName(ne,[Default]), UsedName(r,[Default]), UsedName(relReply2,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]))) invalidates 3 classes due to The scalation.dist_db.relReply2 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(scalation;dist_db;relReply2;init;,[Default]), UsedName(equals,[Default]), UsedName(copy$default$1,[Default]), UsedName(hashCode,[Default]), UsedName($isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(canEqual,[Default]), UsedName(curried,[Default]), UsedName(productPrefix,[Default]), UsedName(tupled,[Default]), UsedName(isInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(copy$default$2,[Default]), UsedName(!=,[Default]), UsedName(notifyAll,[Default]), UsedName(rName,[Default]), UsedName(getClass,[Default]), UsedName(productArity,[Default]), UsedName(copy,[Default]), UsedName(unapply,[Default]), UsedName(==,[Default]), UsedName(notify,[Default]), UsedName(apply,[Default]), UsedName(id,[Default]), UsedName(synchronized,[Default]), UsedName(toString,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(copy$default$3,[Default]), UsedName(ne,[Default]), UsedName(r,[Default]), UsedName(relReply2,[Default]), UsedName(productIterator,[Default]), UsedName(eq,[Default]), UsedName($init$,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(scalation.dist_db.relReply2)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> by member reference: Set(scalation.dist_db.RelDBMaster, scalation.dist_db.RelDBWorker)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mNew invalidations:[0m
[0m[[0m[0mdebug[0m] [0m[0m	Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mPreviously invalidated, but (transitively) depend on new invalidations:[0m
[0m[[0m[0mdebug[0m] [0m[0m	Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mAll newly invalidated classes after taking into account (previously) recompiled classes:Set()[0m
